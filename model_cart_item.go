/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// CartItem The type that defines the fields for the individual items in a cart.
type CartItem struct {
	// The identifier for the item being added to the cart. This is generated when the item is added to the cart.
	CartItemId *string `json:"cartItemId,omitempty"`
	CartItemSubtotal *Amount `json:"cartItemSubtotal,omitempty"`
	Image *Image `json:"image,omitempty"`
	// The RESTful identifier of the item. This identifier is generated when the item was listed. <br /><br /> <b>RESTful Item ID Format: </b><code>v1</code>|<code><i>#</i></code>|<code><i>#</i></code> <br /><b> For example: </b><br /> <code>v1|2**********2|0</code> <br /><code>v1|1**********2|4**********2</code>
	ItemId *string `json:"itemId,omitempty"`
	// The URL of the eBay view item page for the item.
	ItemWebUrl *string `json:"itemWebUrl,omitempty"`
	Price *Price `json:"price,omitempty"`
	// The number of this item the buyer wants to purchase.
	Quantity *int32 `json:"quantity,omitempty"`
	// The title of the item. This can be written by the seller or come from the eBay product catalog.
	Title *string `json:"title,omitempty"`
}

// NewCartItem instantiates a new CartItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCartItem() *CartItem {
	this := CartItem{}
	return &this
}

// NewCartItemWithDefaults instantiates a new CartItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCartItemWithDefaults() *CartItem {
	this := CartItem{}
	return &this
}

// GetCartItemId returns the CartItemId field value if set, zero value otherwise.
func (o *CartItem) GetCartItemId() string {
	if o == nil || o.CartItemId == nil {
		var ret string
		return ret
	}
	return *o.CartItemId
}

// GetCartItemIdOk returns a tuple with the CartItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetCartItemIdOk() (*string, bool) {
	if o == nil || o.CartItemId == nil {
		return nil, false
	}
	return o.CartItemId, true
}

// HasCartItemId returns a boolean if a field has been set.
func (o *CartItem) HasCartItemId() bool {
	if o != nil && o.CartItemId != nil {
		return true
	}

	return false
}

// SetCartItemId gets a reference to the given string and assigns it to the CartItemId field.
func (o *CartItem) SetCartItemId(v string) {
	o.CartItemId = &v
}

// GetCartItemSubtotal returns the CartItemSubtotal field value if set, zero value otherwise.
func (o *CartItem) GetCartItemSubtotal() Amount {
	if o == nil || o.CartItemSubtotal == nil {
		var ret Amount
		return ret
	}
	return *o.CartItemSubtotal
}

// GetCartItemSubtotalOk returns a tuple with the CartItemSubtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetCartItemSubtotalOk() (*Amount, bool) {
	if o == nil || o.CartItemSubtotal == nil {
		return nil, false
	}
	return o.CartItemSubtotal, true
}

// HasCartItemSubtotal returns a boolean if a field has been set.
func (o *CartItem) HasCartItemSubtotal() bool {
	if o != nil && o.CartItemSubtotal != nil {
		return true
	}

	return false
}

// SetCartItemSubtotal gets a reference to the given Amount and assigns it to the CartItemSubtotal field.
func (o *CartItem) SetCartItemSubtotal(v Amount) {
	o.CartItemSubtotal = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CartItem) GetImage() Image {
	if o == nil || o.Image == nil {
		var ret Image
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetImageOk() (*Image, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CartItem) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given Image and assigns it to the Image field.
func (o *CartItem) SetImage(v Image) {
	o.Image = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *CartItem) GetItemId() string {
	if o == nil || o.ItemId == nil {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetItemIdOk() (*string, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *CartItem) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *CartItem) SetItemId(v string) {
	o.ItemId = &v
}

// GetItemWebUrl returns the ItemWebUrl field value if set, zero value otherwise.
func (o *CartItem) GetItemWebUrl() string {
	if o == nil || o.ItemWebUrl == nil {
		var ret string
		return ret
	}
	return *o.ItemWebUrl
}

// GetItemWebUrlOk returns a tuple with the ItemWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetItemWebUrlOk() (*string, bool) {
	if o == nil || o.ItemWebUrl == nil {
		return nil, false
	}
	return o.ItemWebUrl, true
}

// HasItemWebUrl returns a boolean if a field has been set.
func (o *CartItem) HasItemWebUrl() bool {
	if o != nil && o.ItemWebUrl != nil {
		return true
	}

	return false
}

// SetItemWebUrl gets a reference to the given string and assigns it to the ItemWebUrl field.
func (o *CartItem) SetItemWebUrl(v string) {
	o.ItemWebUrl = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CartItem) GetPrice() Price {
	if o == nil || o.Price == nil {
		var ret Price
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetPriceOk() (*Price, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CartItem) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given Price and assigns it to the Price field.
func (o *CartItem) SetPrice(v Price) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CartItem) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetQuantityOk() (*int32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CartItem) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *CartItem) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CartItem) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CartItem) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CartItem) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CartItem) SetTitle(v string) {
	o.Title = &v
}

func (o CartItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CartItemId != nil {
		toSerialize["cartItemId"] = o.CartItemId
	}
	if o.CartItemSubtotal != nil {
		toSerialize["cartItemSubtotal"] = o.CartItemSubtotal
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.ItemId != nil {
		toSerialize["itemId"] = o.ItemId
	}
	if o.ItemWebUrl != nil {
		toSerialize["itemWebUrl"] = o.ItemWebUrl
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableCartItem struct {
	value *CartItem
	isSet bool
}

func (v NullableCartItem) Get() *CartItem {
	return v.value
}

func (v *NullableCartItem) Set(val *CartItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCartItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCartItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCartItem(val *CartItem) *NullableCartItem {
	return &NullableCartItem{value: val, isSet: true}
}

func (v NullableCartItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCartItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


