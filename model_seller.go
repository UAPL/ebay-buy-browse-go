/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// Seller The type that defines the fields for basic information about the seller of the item returned by the <b> item_summary</b> resource.
type Seller struct {
	// The percentage of the total positive feedback.
	FeedbackPercentage *string `json:"feedbackPercentage,omitempty"`
	// The feedback score of the seller. This value is based on the ratings from eBay members that bought items from this seller.
	FeedbackScore *int32 `json:"feedbackScore,omitempty"`
	// Indicates if the seller is a business or an individual. This is determined when the seller registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in some countries.   <br /><br />This field is returned only on the following sites. <br /><br />EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL <br /><br /><b> Valid Values:</b> BUSINESS or INDIVIDUAL <br /><br />Code so that your app gracefully handles any future changes to this list. 
	SellerAccountType *string `json:"sellerAccountType,omitempty"`
	// The user name created by the seller for use on eBay.
	Username *string `json:"username,omitempty"`
}

// NewSeller instantiates a new Seller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeller() *Seller {
	this := Seller{}
	return &this
}

// NewSellerWithDefaults instantiates a new Seller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellerWithDefaults() *Seller {
	this := Seller{}
	return &this
}

// GetFeedbackPercentage returns the FeedbackPercentage field value if set, zero value otherwise.
func (o *Seller) GetFeedbackPercentage() string {
	if o == nil || o.FeedbackPercentage == nil {
		var ret string
		return ret
	}
	return *o.FeedbackPercentage
}

// GetFeedbackPercentageOk returns a tuple with the FeedbackPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetFeedbackPercentageOk() (*string, bool) {
	if o == nil || o.FeedbackPercentage == nil {
		return nil, false
	}
	return o.FeedbackPercentage, true
}

// HasFeedbackPercentage returns a boolean if a field has been set.
func (o *Seller) HasFeedbackPercentage() bool {
	if o != nil && o.FeedbackPercentage != nil {
		return true
	}

	return false
}

// SetFeedbackPercentage gets a reference to the given string and assigns it to the FeedbackPercentage field.
func (o *Seller) SetFeedbackPercentage(v string) {
	o.FeedbackPercentage = &v
}

// GetFeedbackScore returns the FeedbackScore field value if set, zero value otherwise.
func (o *Seller) GetFeedbackScore() int32 {
	if o == nil || o.FeedbackScore == nil {
		var ret int32
		return ret
	}
	return *o.FeedbackScore
}

// GetFeedbackScoreOk returns a tuple with the FeedbackScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetFeedbackScoreOk() (*int32, bool) {
	if o == nil || o.FeedbackScore == nil {
		return nil, false
	}
	return o.FeedbackScore, true
}

// HasFeedbackScore returns a boolean if a field has been set.
func (o *Seller) HasFeedbackScore() bool {
	if o != nil && o.FeedbackScore != nil {
		return true
	}

	return false
}

// SetFeedbackScore gets a reference to the given int32 and assigns it to the FeedbackScore field.
func (o *Seller) SetFeedbackScore(v int32) {
	o.FeedbackScore = &v
}

// GetSellerAccountType returns the SellerAccountType field value if set, zero value otherwise.
func (o *Seller) GetSellerAccountType() string {
	if o == nil || o.SellerAccountType == nil {
		var ret string
		return ret
	}
	return *o.SellerAccountType
}

// GetSellerAccountTypeOk returns a tuple with the SellerAccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetSellerAccountTypeOk() (*string, bool) {
	if o == nil || o.SellerAccountType == nil {
		return nil, false
	}
	return o.SellerAccountType, true
}

// HasSellerAccountType returns a boolean if a field has been set.
func (o *Seller) HasSellerAccountType() bool {
	if o != nil && o.SellerAccountType != nil {
		return true
	}

	return false
}

// SetSellerAccountType gets a reference to the given string and assigns it to the SellerAccountType field.
func (o *Seller) SetSellerAccountType(v string) {
	o.SellerAccountType = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Seller) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Seller) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Seller) SetUsername(v string) {
	o.Username = &v
}

func (o Seller) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeedbackPercentage != nil {
		toSerialize["feedbackPercentage"] = o.FeedbackPercentage
	}
	if o.FeedbackScore != nil {
		toSerialize["feedbackScore"] = o.FeedbackScore
	}
	if o.SellerAccountType != nil {
		toSerialize["sellerAccountType"] = o.SellerAccountType
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableSeller struct {
	value *Seller
	isSet bool
}

func (v NullableSeller) Get() *Seller {
	return v.value
}

func (v *NullableSeller) Set(val *Seller) {
	v.value = val
	v.isSet = true
}

func (v NullableSeller) IsSet() bool {
	return v.isSet
}

func (v *NullableSeller) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeller(val *Seller) *NullableSeller {
	return &NullableSeller{value: val, isSet: true}
}

func (v NullableSeller) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeller) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


