/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the AvailableCoupon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableCoupon{}

// AvailableCoupon struct for AvailableCoupon
type AvailableCoupon struct {
	Constraint *CouponConstraint `json:"constraint,omitempty"`
	DiscountAmount *Amount `json:"discountAmount,omitempty"`
	// The type of discount that the coupon applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CouponDiscountType'>eBay API documentation</a>
	DiscountType *string `json:"discountType,omitempty"`
	// A description of the coupon.<br><br><span class=\"tablenote\"><b>Note:</b> The value returned in the <code>termsWebUrl</code> field should appear for all experiences when displaying coupons. The value in the <code>availableCoupons.message</code> field must also be included if returned in the API response.</span>
	Message *string `json:"message,omitempty"`
	// The coupon code.
	RedemptionCode *string `json:"redemptionCode,omitempty"`
	// The URL to the coupon terms of use.<br><br><span class=\"tablenote\"><b>Note:</b> The value returned in the <code>termsWebUrl</code> field should appear for all experiences when displaying coupons. The value in the <code>availableCoupons.message</code> field must also be included if returned in the API response.</span>
	TermsWebUrl *string `json:"termsWebUrl,omitempty"`
}

// NewAvailableCoupon instantiates a new AvailableCoupon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableCoupon() *AvailableCoupon {
	this := AvailableCoupon{}
	return &this
}

// NewAvailableCouponWithDefaults instantiates a new AvailableCoupon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableCouponWithDefaults() *AvailableCoupon {
	this := AvailableCoupon{}
	return &this
}

// GetConstraint returns the Constraint field value if set, zero value otherwise.
func (o *AvailableCoupon) GetConstraint() CouponConstraint {
	if o == nil || IsNil(o.Constraint) {
		var ret CouponConstraint
		return ret
	}
	return *o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetConstraintOk() (*CouponConstraint, bool) {
	if o == nil || IsNil(o.Constraint) {
		return nil, false
	}
	return o.Constraint, true
}

// HasConstraint returns a boolean if a field has been set.
func (o *AvailableCoupon) HasConstraint() bool {
	if o != nil && !IsNil(o.Constraint) {
		return true
	}

	return false
}

// SetConstraint gets a reference to the given CouponConstraint and assigns it to the Constraint field.
func (o *AvailableCoupon) SetConstraint(v CouponConstraint) {
	o.Constraint = &v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *AvailableCoupon) GetDiscountAmount() Amount {
	if o == nil || IsNil(o.DiscountAmount) {
		var ret Amount
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetDiscountAmountOk() (*Amount, bool) {
	if o == nil || IsNil(o.DiscountAmount) {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *AvailableCoupon) HasDiscountAmount() bool {
	if o != nil && !IsNil(o.DiscountAmount) {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given Amount and assigns it to the DiscountAmount field.
func (o *AvailableCoupon) SetDiscountAmount(v Amount) {
	o.DiscountAmount = &v
}

// GetDiscountType returns the DiscountType field value if set, zero value otherwise.
func (o *AvailableCoupon) GetDiscountType() string {
	if o == nil || IsNil(o.DiscountType) {
		var ret string
		return ret
	}
	return *o.DiscountType
}

// GetDiscountTypeOk returns a tuple with the DiscountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetDiscountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiscountType) {
		return nil, false
	}
	return o.DiscountType, true
}

// HasDiscountType returns a boolean if a field has been set.
func (o *AvailableCoupon) HasDiscountType() bool {
	if o != nil && !IsNil(o.DiscountType) {
		return true
	}

	return false
}

// SetDiscountType gets a reference to the given string and assigns it to the DiscountType field.
func (o *AvailableCoupon) SetDiscountType(v string) {
	o.DiscountType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *AvailableCoupon) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *AvailableCoupon) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *AvailableCoupon) SetMessage(v string) {
	o.Message = &v
}

// GetRedemptionCode returns the RedemptionCode field value if set, zero value otherwise.
func (o *AvailableCoupon) GetRedemptionCode() string {
	if o == nil || IsNil(o.RedemptionCode) {
		var ret string
		return ret
	}
	return *o.RedemptionCode
}

// GetRedemptionCodeOk returns a tuple with the RedemptionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetRedemptionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RedemptionCode) {
		return nil, false
	}
	return o.RedemptionCode, true
}

// HasRedemptionCode returns a boolean if a field has been set.
func (o *AvailableCoupon) HasRedemptionCode() bool {
	if o != nil && !IsNil(o.RedemptionCode) {
		return true
	}

	return false
}

// SetRedemptionCode gets a reference to the given string and assigns it to the RedemptionCode field.
func (o *AvailableCoupon) SetRedemptionCode(v string) {
	o.RedemptionCode = &v
}

// GetTermsWebUrl returns the TermsWebUrl field value if set, zero value otherwise.
func (o *AvailableCoupon) GetTermsWebUrl() string {
	if o == nil || IsNil(o.TermsWebUrl) {
		var ret string
		return ret
	}
	return *o.TermsWebUrl
}

// GetTermsWebUrlOk returns a tuple with the TermsWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetTermsWebUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TermsWebUrl) {
		return nil, false
	}
	return o.TermsWebUrl, true
}

// HasTermsWebUrl returns a boolean if a field has been set.
func (o *AvailableCoupon) HasTermsWebUrl() bool {
	if o != nil && !IsNil(o.TermsWebUrl) {
		return true
	}

	return false
}

// SetTermsWebUrl gets a reference to the given string and assigns it to the TermsWebUrl field.
func (o *AvailableCoupon) SetTermsWebUrl(v string) {
	o.TermsWebUrl = &v
}

func (o AvailableCoupon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableCoupon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Constraint) {
		toSerialize["constraint"] = o.Constraint
	}
	if !IsNil(o.DiscountAmount) {
		toSerialize["discountAmount"] = o.DiscountAmount
	}
	if !IsNil(o.DiscountType) {
		toSerialize["discountType"] = o.DiscountType
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RedemptionCode) {
		toSerialize["redemptionCode"] = o.RedemptionCode
	}
	if !IsNil(o.TermsWebUrl) {
		toSerialize["termsWebUrl"] = o.TermsWebUrl
	}
	return toSerialize, nil
}

type NullableAvailableCoupon struct {
	value *AvailableCoupon
	isSet bool
}

func (v NullableAvailableCoupon) Get() *AvailableCoupon {
	return v.value
}

func (v *NullableAvailableCoupon) Set(val *AvailableCoupon) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableCoupon) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableCoupon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableCoupon(val *AvailableCoupon) *NullableAvailableCoupon {
	return &NullableAvailableCoupon{value: val, isSet: true}
}

func (v NullableAvailableCoupon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableCoupon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


