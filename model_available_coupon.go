/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// AvailableCoupon struct for AvailableCoupon
type AvailableCoupon struct {
	Constraint *CouponConstraint `json:"constraint,omitempty"`
	DiscountAmount *Amount `json:"discountAmount,omitempty"`
	// The type of discount that the coupon applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CouponDiscountType'>eBay API documentation</a>
	DiscountType *string `json:"discountType,omitempty"`
	// A description of the coupon.<br /><br /><span class=\"tablenote\"><b> Note: </b> The value returned in the <b>termsWebUrl</b> field should appear for all experiences when displaying coupons. The value in the <b>availableCoupons.message</b> field must also be included, if returned in the API response.</span>
	Message *string `json:"message,omitempty"`
	// The coupon code.
	RedemptionCode *string `json:"redemptionCode,omitempty"`
	// The URL to the coupon terms of use.<br /><br /><span class=\"tablenote\"><b> Note: </b> The value returned in the <b>termsWebUrl</b> field should appear for all experiences when displaying coupons. The value in the <b>availableCoupons.message</b> field must also be included, if returned in the API response.</span>
	TermsWebUrl *string `json:"termsWebUrl,omitempty"`
}

// NewAvailableCoupon instantiates a new AvailableCoupon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableCoupon() *AvailableCoupon {
	this := AvailableCoupon{}
	return &this
}

// NewAvailableCouponWithDefaults instantiates a new AvailableCoupon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableCouponWithDefaults() *AvailableCoupon {
	this := AvailableCoupon{}
	return &this
}

// GetConstraint returns the Constraint field value if set, zero value otherwise.
func (o *AvailableCoupon) GetConstraint() CouponConstraint {
	if o == nil || o.Constraint == nil {
		var ret CouponConstraint
		return ret
	}
	return *o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetConstraintOk() (*CouponConstraint, bool) {
	if o == nil || o.Constraint == nil {
		return nil, false
	}
	return o.Constraint, true
}

// HasConstraint returns a boolean if a field has been set.
func (o *AvailableCoupon) HasConstraint() bool {
	if o != nil && o.Constraint != nil {
		return true
	}

	return false
}

// SetConstraint gets a reference to the given CouponConstraint and assigns it to the Constraint field.
func (o *AvailableCoupon) SetConstraint(v CouponConstraint) {
	o.Constraint = &v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *AvailableCoupon) GetDiscountAmount() Amount {
	if o == nil || o.DiscountAmount == nil {
		var ret Amount
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetDiscountAmountOk() (*Amount, bool) {
	if o == nil || o.DiscountAmount == nil {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *AvailableCoupon) HasDiscountAmount() bool {
	if o != nil && o.DiscountAmount != nil {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given Amount and assigns it to the DiscountAmount field.
func (o *AvailableCoupon) SetDiscountAmount(v Amount) {
	o.DiscountAmount = &v
}

// GetDiscountType returns the DiscountType field value if set, zero value otherwise.
func (o *AvailableCoupon) GetDiscountType() string {
	if o == nil || o.DiscountType == nil {
		var ret string
		return ret
	}
	return *o.DiscountType
}

// GetDiscountTypeOk returns a tuple with the DiscountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetDiscountTypeOk() (*string, bool) {
	if o == nil || o.DiscountType == nil {
		return nil, false
	}
	return o.DiscountType, true
}

// HasDiscountType returns a boolean if a field has been set.
func (o *AvailableCoupon) HasDiscountType() bool {
	if o != nil && o.DiscountType != nil {
		return true
	}

	return false
}

// SetDiscountType gets a reference to the given string and assigns it to the DiscountType field.
func (o *AvailableCoupon) SetDiscountType(v string) {
	o.DiscountType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *AvailableCoupon) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *AvailableCoupon) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *AvailableCoupon) SetMessage(v string) {
	o.Message = &v
}

// GetRedemptionCode returns the RedemptionCode field value if set, zero value otherwise.
func (o *AvailableCoupon) GetRedemptionCode() string {
	if o == nil || o.RedemptionCode == nil {
		var ret string
		return ret
	}
	return *o.RedemptionCode
}

// GetRedemptionCodeOk returns a tuple with the RedemptionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetRedemptionCodeOk() (*string, bool) {
	if o == nil || o.RedemptionCode == nil {
		return nil, false
	}
	return o.RedemptionCode, true
}

// HasRedemptionCode returns a boolean if a field has been set.
func (o *AvailableCoupon) HasRedemptionCode() bool {
	if o != nil && o.RedemptionCode != nil {
		return true
	}

	return false
}

// SetRedemptionCode gets a reference to the given string and assigns it to the RedemptionCode field.
func (o *AvailableCoupon) SetRedemptionCode(v string) {
	o.RedemptionCode = &v
}

// GetTermsWebUrl returns the TermsWebUrl field value if set, zero value otherwise.
func (o *AvailableCoupon) GetTermsWebUrl() string {
	if o == nil || o.TermsWebUrl == nil {
		var ret string
		return ret
	}
	return *o.TermsWebUrl
}

// GetTermsWebUrlOk returns a tuple with the TermsWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableCoupon) GetTermsWebUrlOk() (*string, bool) {
	if o == nil || o.TermsWebUrl == nil {
		return nil, false
	}
	return o.TermsWebUrl, true
}

// HasTermsWebUrl returns a boolean if a field has been set.
func (o *AvailableCoupon) HasTermsWebUrl() bool {
	if o != nil && o.TermsWebUrl != nil {
		return true
	}

	return false
}

// SetTermsWebUrl gets a reference to the given string and assigns it to the TermsWebUrl field.
func (o *AvailableCoupon) SetTermsWebUrl(v string) {
	o.TermsWebUrl = &v
}

func (o AvailableCoupon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Constraint != nil {
		toSerialize["constraint"] = o.Constraint
	}
	if o.DiscountAmount != nil {
		toSerialize["discountAmount"] = o.DiscountAmount
	}
	if o.DiscountType != nil {
		toSerialize["discountType"] = o.DiscountType
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.RedemptionCode != nil {
		toSerialize["redemptionCode"] = o.RedemptionCode
	}
	if o.TermsWebUrl != nil {
		toSerialize["termsWebUrl"] = o.TermsWebUrl
	}
	return json.Marshal(toSerialize)
}

type NullableAvailableCoupon struct {
	value *AvailableCoupon
	isSet bool
}

func (v NullableAvailableCoupon) Get() *AvailableCoupon {
	return v.value
}

func (v *NullableAvailableCoupon) Set(val *AvailableCoupon) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableCoupon) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableCoupon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableCoupon(val *AvailableCoupon) *NullableAvailableCoupon {
	return &NullableAvailableCoupon{value: val, isSet: true}
}

func (v NullableAvailableCoupon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableCoupon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


