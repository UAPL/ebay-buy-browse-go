/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the HazardPictogram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HazardPictogram{}

// HazardPictogram A type that defines the pictogram for the type of hazard that a hazardous material represents.
type HazardPictogram struct {
	// The description of the hazard pictogram, such as Flammable.
	PictogramDescription *string `json:"pictogramDescription,omitempty"`
	// The ID of the hazard pictogram.
	PictogramId *string `json:"pictogramId,omitempty"`
	// The URL of the hazard pictogram.
	PictogramUrl *string `json:"pictogramUrl,omitempty"`
}

// NewHazardPictogram instantiates a new HazardPictogram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHazardPictogram() *HazardPictogram {
	this := HazardPictogram{}
	return &this
}

// NewHazardPictogramWithDefaults instantiates a new HazardPictogram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHazardPictogramWithDefaults() *HazardPictogram {
	this := HazardPictogram{}
	return &this
}

// GetPictogramDescription returns the PictogramDescription field value if set, zero value otherwise.
func (o *HazardPictogram) GetPictogramDescription() string {
	if o == nil || IsNil(o.PictogramDescription) {
		var ret string
		return ret
	}
	return *o.PictogramDescription
}

// GetPictogramDescriptionOk returns a tuple with the PictogramDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardPictogram) GetPictogramDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PictogramDescription) {
		return nil, false
	}
	return o.PictogramDescription, true
}

// HasPictogramDescription returns a boolean if a field has been set.
func (o *HazardPictogram) HasPictogramDescription() bool {
	if o != nil && !IsNil(o.PictogramDescription) {
		return true
	}

	return false
}

// SetPictogramDescription gets a reference to the given string and assigns it to the PictogramDescription field.
func (o *HazardPictogram) SetPictogramDescription(v string) {
	o.PictogramDescription = &v
}

// GetPictogramId returns the PictogramId field value if set, zero value otherwise.
func (o *HazardPictogram) GetPictogramId() string {
	if o == nil || IsNil(o.PictogramId) {
		var ret string
		return ret
	}
	return *o.PictogramId
}

// GetPictogramIdOk returns a tuple with the PictogramId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardPictogram) GetPictogramIdOk() (*string, bool) {
	if o == nil || IsNil(o.PictogramId) {
		return nil, false
	}
	return o.PictogramId, true
}

// HasPictogramId returns a boolean if a field has been set.
func (o *HazardPictogram) HasPictogramId() bool {
	if o != nil && !IsNil(o.PictogramId) {
		return true
	}

	return false
}

// SetPictogramId gets a reference to the given string and assigns it to the PictogramId field.
func (o *HazardPictogram) SetPictogramId(v string) {
	o.PictogramId = &v
}

// GetPictogramUrl returns the PictogramUrl field value if set, zero value otherwise.
func (o *HazardPictogram) GetPictogramUrl() string {
	if o == nil || IsNil(o.PictogramUrl) {
		var ret string
		return ret
	}
	return *o.PictogramUrl
}

// GetPictogramUrlOk returns a tuple with the PictogramUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardPictogram) GetPictogramUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PictogramUrl) {
		return nil, false
	}
	return o.PictogramUrl, true
}

// HasPictogramUrl returns a boolean if a field has been set.
func (o *HazardPictogram) HasPictogramUrl() bool {
	if o != nil && !IsNil(o.PictogramUrl) {
		return true
	}

	return false
}

// SetPictogramUrl gets a reference to the given string and assigns it to the PictogramUrl field.
func (o *HazardPictogram) SetPictogramUrl(v string) {
	o.PictogramUrl = &v
}

func (o HazardPictogram) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HazardPictogram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PictogramDescription) {
		toSerialize["pictogramDescription"] = o.PictogramDescription
	}
	if !IsNil(o.PictogramId) {
		toSerialize["pictogramId"] = o.PictogramId
	}
	if !IsNil(o.PictogramUrl) {
		toSerialize["pictogramUrl"] = o.PictogramUrl
	}
	return toSerialize, nil
}

type NullableHazardPictogram struct {
	value *HazardPictogram
	isSet bool
}

func (v NullableHazardPictogram) Get() *HazardPictogram {
	return v.value
}

func (v *NullableHazardPictogram) Set(val *HazardPictogram) {
	v.value = val
	v.isSet = true
}

func (v NullableHazardPictogram) IsSet() bool {
	return v.isSet
}

func (v *NullableHazardPictogram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHazardPictogram(val *HazardPictogram) *NullableHazardPictogram {
	return &NullableHazardPictogram{value: val, isSet: true}
}

func (v NullableHazardPictogram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHazardPictogram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


