/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// CategoryDistribution The container that defines the fields for the category refinements. This container is returned when <b> fieldgroups</b> is set to <code>CATEGORY_REFINEMENTS</code> or <code>FULL</code> in the request.
type CategoryDistribution struct {
	// The identifier of the category.
	CategoryId *string `json:"categoryId,omitempty"`
	// The name of the category, such as Baby & Toddler Clothing.
	CategoryName *string `json:"categoryName,omitempty"`
	// The number of items in this category.
	MatchCount *int32 `json:"matchCount,omitempty"`
	// The HATEOAS reference of this category.
	RefinementHref *string `json:"refinementHref,omitempty"`
}

// NewCategoryDistribution instantiates a new CategoryDistribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryDistribution() *CategoryDistribution {
	this := CategoryDistribution{}
	return &this
}

// NewCategoryDistributionWithDefaults instantiates a new CategoryDistribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryDistributionWithDefaults() *CategoryDistribution {
	this := CategoryDistribution{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *CategoryDistribution) GetCategoryId() string {
	if o == nil || o.CategoryId == nil {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryDistribution) GetCategoryIdOk() (*string, bool) {
	if o == nil || o.CategoryId == nil {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *CategoryDistribution) HasCategoryId() bool {
	if o != nil && o.CategoryId != nil {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *CategoryDistribution) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise.
func (o *CategoryDistribution) GetCategoryName() string {
	if o == nil || o.CategoryName == nil {
		var ret string
		return ret
	}
	return *o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryDistribution) GetCategoryNameOk() (*string, bool) {
	if o == nil || o.CategoryName == nil {
		return nil, false
	}
	return o.CategoryName, true
}

// HasCategoryName returns a boolean if a field has been set.
func (o *CategoryDistribution) HasCategoryName() bool {
	if o != nil && o.CategoryName != nil {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given string and assigns it to the CategoryName field.
func (o *CategoryDistribution) SetCategoryName(v string) {
	o.CategoryName = &v
}

// GetMatchCount returns the MatchCount field value if set, zero value otherwise.
func (o *CategoryDistribution) GetMatchCount() int32 {
	if o == nil || o.MatchCount == nil {
		var ret int32
		return ret
	}
	return *o.MatchCount
}

// GetMatchCountOk returns a tuple with the MatchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryDistribution) GetMatchCountOk() (*int32, bool) {
	if o == nil || o.MatchCount == nil {
		return nil, false
	}
	return o.MatchCount, true
}

// HasMatchCount returns a boolean if a field has been set.
func (o *CategoryDistribution) HasMatchCount() bool {
	if o != nil && o.MatchCount != nil {
		return true
	}

	return false
}

// SetMatchCount gets a reference to the given int32 and assigns it to the MatchCount field.
func (o *CategoryDistribution) SetMatchCount(v int32) {
	o.MatchCount = &v
}

// GetRefinementHref returns the RefinementHref field value if set, zero value otherwise.
func (o *CategoryDistribution) GetRefinementHref() string {
	if o == nil || o.RefinementHref == nil {
		var ret string
		return ret
	}
	return *o.RefinementHref
}

// GetRefinementHrefOk returns a tuple with the RefinementHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryDistribution) GetRefinementHrefOk() (*string, bool) {
	if o == nil || o.RefinementHref == nil {
		return nil, false
	}
	return o.RefinementHref, true
}

// HasRefinementHref returns a boolean if a field has been set.
func (o *CategoryDistribution) HasRefinementHref() bool {
	if o != nil && o.RefinementHref != nil {
		return true
	}

	return false
}

// SetRefinementHref gets a reference to the given string and assigns it to the RefinementHref field.
func (o *CategoryDistribution) SetRefinementHref(v string) {
	o.RefinementHref = &v
}

func (o CategoryDistribution) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CategoryId != nil {
		toSerialize["categoryId"] = o.CategoryId
	}
	if o.CategoryName != nil {
		toSerialize["categoryName"] = o.CategoryName
	}
	if o.MatchCount != nil {
		toSerialize["matchCount"] = o.MatchCount
	}
	if o.RefinementHref != nil {
		toSerialize["refinementHref"] = o.RefinementHref
	}
	return json.Marshal(toSerialize)
}

type NullableCategoryDistribution struct {
	value *CategoryDistribution
	isSet bool
}

func (v NullableCategoryDistribution) Get() *CategoryDistribution {
	return v.value
}

func (v *NullableCategoryDistribution) Set(val *CategoryDistribution) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryDistribution(val *CategoryDistribution) *NullableCategoryDistribution {
	return &NullableCategoryDistribution{value: val, isSet: true}
}

func (v NullableCategoryDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


