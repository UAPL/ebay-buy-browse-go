/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// Refinement This type defines the fields for the various refinements of an item. You can use the information in this container to create histograms, which help shoppers choose exactly what they want.
type Refinement struct {
	// An array of containers for the all the aspect refinements.
	AspectDistributions *[]AspectDistribution `json:"aspectDistributions,omitempty"`
	// An array of containers for the all the buying option refinements.
	BuyingOptionDistributions *[]BuyingOptionDistribution `json:"buyingOptionDistributions,omitempty"`
	// An array of containers for the all the category refinements.
	CategoryDistributions *[]CategoryDistribution `json:"categoryDistributions,omitempty"`
	// An array of containers for the all the condition refinements.
	ConditionDistributions *[]ConditionDistribution `json:"conditionDistributions,omitempty"`
	// The identifier of the category that most of the items are part of. 
	DominantCategoryId *string `json:"dominantCategoryId,omitempty"`
}

// NewRefinement instantiates a new Refinement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefinement() *Refinement {
	this := Refinement{}
	return &this
}

// NewRefinementWithDefaults instantiates a new Refinement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefinementWithDefaults() *Refinement {
	this := Refinement{}
	return &this
}

// GetAspectDistributions returns the AspectDistributions field value if set, zero value otherwise.
func (o *Refinement) GetAspectDistributions() []AspectDistribution {
	if o == nil || o.AspectDistributions == nil {
		var ret []AspectDistribution
		return ret
	}
	return *o.AspectDistributions
}

// GetAspectDistributionsOk returns a tuple with the AspectDistributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refinement) GetAspectDistributionsOk() (*[]AspectDistribution, bool) {
	if o == nil || o.AspectDistributions == nil {
		return nil, false
	}
	return o.AspectDistributions, true
}

// HasAspectDistributions returns a boolean if a field has been set.
func (o *Refinement) HasAspectDistributions() bool {
	if o != nil && o.AspectDistributions != nil {
		return true
	}

	return false
}

// SetAspectDistributions gets a reference to the given []AspectDistribution and assigns it to the AspectDistributions field.
func (o *Refinement) SetAspectDistributions(v []AspectDistribution) {
	o.AspectDistributions = &v
}

// GetBuyingOptionDistributions returns the BuyingOptionDistributions field value if set, zero value otherwise.
func (o *Refinement) GetBuyingOptionDistributions() []BuyingOptionDistribution {
	if o == nil || o.BuyingOptionDistributions == nil {
		var ret []BuyingOptionDistribution
		return ret
	}
	return *o.BuyingOptionDistributions
}

// GetBuyingOptionDistributionsOk returns a tuple with the BuyingOptionDistributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refinement) GetBuyingOptionDistributionsOk() (*[]BuyingOptionDistribution, bool) {
	if o == nil || o.BuyingOptionDistributions == nil {
		return nil, false
	}
	return o.BuyingOptionDistributions, true
}

// HasBuyingOptionDistributions returns a boolean if a field has been set.
func (o *Refinement) HasBuyingOptionDistributions() bool {
	if o != nil && o.BuyingOptionDistributions != nil {
		return true
	}

	return false
}

// SetBuyingOptionDistributions gets a reference to the given []BuyingOptionDistribution and assigns it to the BuyingOptionDistributions field.
func (o *Refinement) SetBuyingOptionDistributions(v []BuyingOptionDistribution) {
	o.BuyingOptionDistributions = &v
}

// GetCategoryDistributions returns the CategoryDistributions field value if set, zero value otherwise.
func (o *Refinement) GetCategoryDistributions() []CategoryDistribution {
	if o == nil || o.CategoryDistributions == nil {
		var ret []CategoryDistribution
		return ret
	}
	return *o.CategoryDistributions
}

// GetCategoryDistributionsOk returns a tuple with the CategoryDistributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refinement) GetCategoryDistributionsOk() (*[]CategoryDistribution, bool) {
	if o == nil || o.CategoryDistributions == nil {
		return nil, false
	}
	return o.CategoryDistributions, true
}

// HasCategoryDistributions returns a boolean if a field has been set.
func (o *Refinement) HasCategoryDistributions() bool {
	if o != nil && o.CategoryDistributions != nil {
		return true
	}

	return false
}

// SetCategoryDistributions gets a reference to the given []CategoryDistribution and assigns it to the CategoryDistributions field.
func (o *Refinement) SetCategoryDistributions(v []CategoryDistribution) {
	o.CategoryDistributions = &v
}

// GetConditionDistributions returns the ConditionDistributions field value if set, zero value otherwise.
func (o *Refinement) GetConditionDistributions() []ConditionDistribution {
	if o == nil || o.ConditionDistributions == nil {
		var ret []ConditionDistribution
		return ret
	}
	return *o.ConditionDistributions
}

// GetConditionDistributionsOk returns a tuple with the ConditionDistributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refinement) GetConditionDistributionsOk() (*[]ConditionDistribution, bool) {
	if o == nil || o.ConditionDistributions == nil {
		return nil, false
	}
	return o.ConditionDistributions, true
}

// HasConditionDistributions returns a boolean if a field has been set.
func (o *Refinement) HasConditionDistributions() bool {
	if o != nil && o.ConditionDistributions != nil {
		return true
	}

	return false
}

// SetConditionDistributions gets a reference to the given []ConditionDistribution and assigns it to the ConditionDistributions field.
func (o *Refinement) SetConditionDistributions(v []ConditionDistribution) {
	o.ConditionDistributions = &v
}

// GetDominantCategoryId returns the DominantCategoryId field value if set, zero value otherwise.
func (o *Refinement) GetDominantCategoryId() string {
	if o == nil || o.DominantCategoryId == nil {
		var ret string
		return ret
	}
	return *o.DominantCategoryId
}

// GetDominantCategoryIdOk returns a tuple with the DominantCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refinement) GetDominantCategoryIdOk() (*string, bool) {
	if o == nil || o.DominantCategoryId == nil {
		return nil, false
	}
	return o.DominantCategoryId, true
}

// HasDominantCategoryId returns a boolean if a field has been set.
func (o *Refinement) HasDominantCategoryId() bool {
	if o != nil && o.DominantCategoryId != nil {
		return true
	}

	return false
}

// SetDominantCategoryId gets a reference to the given string and assigns it to the DominantCategoryId field.
func (o *Refinement) SetDominantCategoryId(v string) {
	o.DominantCategoryId = &v
}

func (o Refinement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AspectDistributions != nil {
		toSerialize["aspectDistributions"] = o.AspectDistributions
	}
	if o.BuyingOptionDistributions != nil {
		toSerialize["buyingOptionDistributions"] = o.BuyingOptionDistributions
	}
	if o.CategoryDistributions != nil {
		toSerialize["categoryDistributions"] = o.CategoryDistributions
	}
	if o.ConditionDistributions != nil {
		toSerialize["conditionDistributions"] = o.ConditionDistributions
	}
	if o.DominantCategoryId != nil {
		toSerialize["dominantCategoryId"] = o.DominantCategoryId
	}
	return json.Marshal(toSerialize)
}

type NullableRefinement struct {
	value *Refinement
	isSet bool
}

func (v NullableRefinement) Get() *Refinement {
	return v.value
}

func (v *NullableRefinement) Set(val *Refinement) {
	v.value = val
	v.isSet = true
}

func (v NullableRefinement) IsSet() bool {
	return v.isSet
}

func (v *NullableRefinement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefinement(val *Refinement) *NullableRefinement {
	return &NullableRefinement{value: val, isSet: true}
}

func (v NullableRefinement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefinement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


