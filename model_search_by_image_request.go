/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the SearchByImageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchByImageRequest{}

// SearchByImageRequest The type that defines the fields for the image information.
type SearchByImageRequest struct {
	// The Base64 string of the image.<br><br>To get the Base64 image string, you can use sites such as <a href=\"https://codebeautify.org/image-to-base64-converter \" target=\"_blank\">https://codebeautify.org/image-to-base64-converter</a>.
	Image *string `json:"image,omitempty"`
}

// NewSearchByImageRequest instantiates a new SearchByImageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchByImageRequest() *SearchByImageRequest {
	this := SearchByImageRequest{}
	return &this
}

// NewSearchByImageRequestWithDefaults instantiates a new SearchByImageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchByImageRequestWithDefaults() *SearchByImageRequest {
	this := SearchByImageRequest{}
	return &this
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *SearchByImageRequest) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchByImageRequest) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *SearchByImageRequest) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *SearchByImageRequest) SetImage(v string) {
	o.Image = &v
}

func (o SearchByImageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchByImageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	return toSerialize, nil
}

type NullableSearchByImageRequest struct {
	value *SearchByImageRequest
	isSet bool
}

func (v NullableSearchByImageRequest) Get() *SearchByImageRequest {
	return v.value
}

func (v *NullableSearchByImageRequest) Set(val *SearchByImageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchByImageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchByImageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchByImageRequest(val *SearchByImageRequest) *NullableSearchByImageRequest {
	return &NullableSearchByImageRequest{value: val, isSet: true}
}

func (v NullableSearchByImageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchByImageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


