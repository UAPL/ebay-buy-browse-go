/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// SearchPagedCollection The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced <em> pages</em> where each page has 0 or more items. 
type SearchPagedCollection struct {
	AutoCorrections *AutoCorrections `json:"autoCorrections,omitempty"`
	// The URI of the current page of results. <br /><br />The following example of the <b> search</b> method returns items 1 thru 5 from the list of items found. <br /><br /><code>https://api.ebay.com/buy/v1/item_summary/search?q=shirt&limit=5&offset=0</code>.
	Href *string `json:"href,omitempty"`
	// An array of the items on this page. The items are sorted according to the sorting method specified in the request.
	ItemSummaries *[]ItemSummary `json:"itemSummaries,omitempty"`
	// The value of the <b>limit</b> parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.
	Limit *int32 `json:"limit,omitempty"`
	// The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set. <br /><br />The following example of the <b> search</b> method returns items 5 thru 10 from the list of items found.<br /> <br /><code>https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&limit=5&offset=10 </code>
	Next *string `json:"next,omitempty"`
	// This value indicates the <b>offset</b> used for current page of items being returned. Assume the initial request used an <b>offset</b> of <code>0</code> and a <b>limit</b> of <code>3</code>. Then in the first page of results, this value would be <code>0</code>, and items 1-3 are returned. For the second page, this value is <code>3</code> and so on.
	Offset *int32 `json:"offset,omitempty"`
	// The URI for the previous page of results. This is returned if there is a previous page of results from the result set. <br /><br />The following example of the <b> search</b> method returns items 1 thru 5 from the list of items found, which would be the first set of items returned.<br /> <br /><code>https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&limit=5&offset=0</code>
	Prev *string `json:"prev,omitempty"`
	Refinement *Refinement `json:"refinement,omitempty"`
	// The total number of items that match the input criteria.
	Total *int32 `json:"total,omitempty"`
	// The container with all the warnings for the request.
	Warnings *[]Error `json:"warnings,omitempty"`
}

// NewSearchPagedCollection instantiates a new SearchPagedCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPagedCollection() *SearchPagedCollection {
	this := SearchPagedCollection{}
	return &this
}

// NewSearchPagedCollectionWithDefaults instantiates a new SearchPagedCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPagedCollectionWithDefaults() *SearchPagedCollection {
	this := SearchPagedCollection{}
	return &this
}

// GetAutoCorrections returns the AutoCorrections field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetAutoCorrections() AutoCorrections {
	if o == nil || o.AutoCorrections == nil {
		var ret AutoCorrections
		return ret
	}
	return *o.AutoCorrections
}

// GetAutoCorrectionsOk returns a tuple with the AutoCorrections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetAutoCorrectionsOk() (*AutoCorrections, bool) {
	if o == nil || o.AutoCorrections == nil {
		return nil, false
	}
	return o.AutoCorrections, true
}

// HasAutoCorrections returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasAutoCorrections() bool {
	if o != nil && o.AutoCorrections != nil {
		return true
	}

	return false
}

// SetAutoCorrections gets a reference to the given AutoCorrections and assigns it to the AutoCorrections field.
func (o *SearchPagedCollection) SetAutoCorrections(v AutoCorrections) {
	o.AutoCorrections = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SearchPagedCollection) SetHref(v string) {
	o.Href = &v
}

// GetItemSummaries returns the ItemSummaries field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetItemSummaries() []ItemSummary {
	if o == nil || o.ItemSummaries == nil {
		var ret []ItemSummary
		return ret
	}
	return *o.ItemSummaries
}

// GetItemSummariesOk returns a tuple with the ItemSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetItemSummariesOk() (*[]ItemSummary, bool) {
	if o == nil || o.ItemSummaries == nil {
		return nil, false
	}
	return o.ItemSummaries, true
}

// HasItemSummaries returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasItemSummaries() bool {
	if o != nil && o.ItemSummaries != nil {
		return true
	}

	return false
}

// SetItemSummaries gets a reference to the given []ItemSummary and assigns it to the ItemSummaries field.
func (o *SearchPagedCollection) SetItemSummaries(v []ItemSummary) {
	o.ItemSummaries = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SearchPagedCollection) SetLimit(v int32) {
	o.Limit = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetNext() string {
	if o == nil || o.Next == nil {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetNextOk() (*string, bool) {
	if o == nil || o.Next == nil {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasNext() bool {
	if o != nil && o.Next != nil {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *SearchPagedCollection) SetNext(v string) {
	o.Next = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetOffset() int32 {
	if o == nil || o.Offset == nil {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetOffsetOk() (*int32, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SearchPagedCollection) SetOffset(v int32) {
	o.Offset = &v
}

// GetPrev returns the Prev field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetPrev() string {
	if o == nil || o.Prev == nil {
		var ret string
		return ret
	}
	return *o.Prev
}

// GetPrevOk returns a tuple with the Prev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetPrevOk() (*string, bool) {
	if o == nil || o.Prev == nil {
		return nil, false
	}
	return o.Prev, true
}

// HasPrev returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasPrev() bool {
	if o != nil && o.Prev != nil {
		return true
	}

	return false
}

// SetPrev gets a reference to the given string and assigns it to the Prev field.
func (o *SearchPagedCollection) SetPrev(v string) {
	o.Prev = &v
}

// GetRefinement returns the Refinement field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetRefinement() Refinement {
	if o == nil || o.Refinement == nil {
		var ret Refinement
		return ret
	}
	return *o.Refinement
}

// GetRefinementOk returns a tuple with the Refinement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetRefinementOk() (*Refinement, bool) {
	if o == nil || o.Refinement == nil {
		return nil, false
	}
	return o.Refinement, true
}

// HasRefinement returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasRefinement() bool {
	if o != nil && o.Refinement != nil {
		return true
	}

	return false
}

// SetRefinement gets a reference to the given Refinement and assigns it to the Refinement field.
func (o *SearchPagedCollection) SetRefinement(v Refinement) {
	o.Refinement = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *SearchPagedCollection) SetTotal(v int32) {
	o.Total = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetWarnings() []Error {
	if o == nil || o.Warnings == nil {
		var ret []Error
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetWarningsOk() (*[]Error, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Error and assigns it to the Warnings field.
func (o *SearchPagedCollection) SetWarnings(v []Error) {
	o.Warnings = &v
}

func (o SearchPagedCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoCorrections != nil {
		toSerialize["autoCorrections"] = o.AutoCorrections
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.ItemSummaries != nil {
		toSerialize["itemSummaries"] = o.ItemSummaries
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Next != nil {
		toSerialize["next"] = o.Next
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	if o.Prev != nil {
		toSerialize["prev"] = o.Prev
	}
	if o.Refinement != nil {
		toSerialize["refinement"] = o.Refinement
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableSearchPagedCollection struct {
	value *SearchPagedCollection
	isSet bool
}

func (v NullableSearchPagedCollection) Get() *SearchPagedCollection {
	return v.value
}

func (v *NullableSearchPagedCollection) Set(val *SearchPagedCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPagedCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPagedCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPagedCollection(val *SearchPagedCollection) *NullableSearchPagedCollection {
	return &NullableSearchPagedCollection{value: val, isSet: true}
}

func (v NullableSearchPagedCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPagedCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


