/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the SearchPagedCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchPagedCollection{}

// SearchPagedCollection The type that defines the fields for a paginated result set. The response consists of 0 or more sequenced <i>pages</i> where each page has 0 or more items.
type SearchPagedCollection struct {
	AutoCorrections *AutoCorrections `json:"autoCorrections,omitempty"`
	// The URI of the current page of results.<br><br>The following example of the <b>search</b> method returns items 1 thru 5 from the list of items found.<pre>https://api.ebay.com/buy/v1/item_summary/search?q=shirt&limit=5&offset=0</pre>.
	Href *string `json:"href,omitempty"`
	// An array of the items on this page. The items are sorted according to the sorting method specified in the request.
	ItemSummaries []ItemSummary `json:"itemSummaries,omitempty"`
	// The value of the <code>limit</code> parameter submitted in the request, which is the maximum number of items to return on a page, from the result set. A result set is the complete set of items returned by the method.
	Limit *int32 `json:"limit,omitempty"`
	// The URI for the next page of results. This value is returned if there is an additional page of results to return from the result set.<br><br>The following example of the <b>search</b> method returns items 5 thru 10 from the list of items found.<pre>https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&limit=5&offset=10</pre>
	Next *string `json:"next,omitempty"`
	// This value indicates the <code>offset</code> used for current page of items being returned. Assume the initial request used an <code>offset</code> of <code>0</code> and a <code>limit</code> of <code>3</code>. Then in the first page of results, this value would be <code>0</code>, and items 1-3 are returned. For the second page, this value is <code>3</code> and so on.
	Offset *int32 `json:"offset,omitempty"`
	// The URI for the previous page of results. This is returned if there is a previous page of results from the result set.<br><br>The following example of the <b>search</b> method returns items 1 thru 5 from the list of items found, which would be the first set of items returned.<pre>https://api.ebay.com/buy/v1/item_summary/search?query=t-shirts&limit=5&offset=0</pre>
	Prev *string `json:"prev,omitempty"`
	Refinement *Refinement `json:"refinement,omitempty"`
	// The total number of items that match the input criteria.<br><br><span class=\"tablenote\"><b>Note:</b> <code>total</code> is just an indicator of the number of listings for a given query. It could vary based on the number of listings with variations included in the result. It is strongly recommended that <code>total</code> not be used in pagination use cases. Instead, use <a href=\"/api-docs/buy/browse/resources/item_summary/methods/search#response.next \">next</a> to determine the results on the next page.</span>
	Total *int32 `json:"total,omitempty"`
	// The container with all the warnings for the request.
	Warnings []Error `json:"warnings,omitempty"`
}

// NewSearchPagedCollection instantiates a new SearchPagedCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchPagedCollection() *SearchPagedCollection {
	this := SearchPagedCollection{}
	return &this
}

// NewSearchPagedCollectionWithDefaults instantiates a new SearchPagedCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchPagedCollectionWithDefaults() *SearchPagedCollection {
	this := SearchPagedCollection{}
	return &this
}

// GetAutoCorrections returns the AutoCorrections field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetAutoCorrections() AutoCorrections {
	if o == nil || IsNil(o.AutoCorrections) {
		var ret AutoCorrections
		return ret
	}
	return *o.AutoCorrections
}

// GetAutoCorrectionsOk returns a tuple with the AutoCorrections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetAutoCorrectionsOk() (*AutoCorrections, bool) {
	if o == nil || IsNil(o.AutoCorrections) {
		return nil, false
	}
	return o.AutoCorrections, true
}

// HasAutoCorrections returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasAutoCorrections() bool {
	if o != nil && !IsNil(o.AutoCorrections) {
		return true
	}

	return false
}

// SetAutoCorrections gets a reference to the given AutoCorrections and assigns it to the AutoCorrections field.
func (o *SearchPagedCollection) SetAutoCorrections(v AutoCorrections) {
	o.AutoCorrections = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SearchPagedCollection) SetHref(v string) {
	o.Href = &v
}

// GetItemSummaries returns the ItemSummaries field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetItemSummaries() []ItemSummary {
	if o == nil || IsNil(o.ItemSummaries) {
		var ret []ItemSummary
		return ret
	}
	return o.ItemSummaries
}

// GetItemSummariesOk returns a tuple with the ItemSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetItemSummariesOk() ([]ItemSummary, bool) {
	if o == nil || IsNil(o.ItemSummaries) {
		return nil, false
	}
	return o.ItemSummaries, true
}

// HasItemSummaries returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasItemSummaries() bool {
	if o != nil && !IsNil(o.ItemSummaries) {
		return true
	}

	return false
}

// SetItemSummaries gets a reference to the given []ItemSummary and assigns it to the ItemSummaries field.
func (o *SearchPagedCollection) SetItemSummaries(v []ItemSummary) {
	o.ItemSummaries = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SearchPagedCollection) SetLimit(v int32) {
	o.Limit = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *SearchPagedCollection) SetNext(v string) {
	o.Next = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *SearchPagedCollection) SetOffset(v int32) {
	o.Offset = &v
}

// GetPrev returns the Prev field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetPrev() string {
	if o == nil || IsNil(o.Prev) {
		var ret string
		return ret
	}
	return *o.Prev
}

// GetPrevOk returns a tuple with the Prev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetPrevOk() (*string, bool) {
	if o == nil || IsNil(o.Prev) {
		return nil, false
	}
	return o.Prev, true
}

// HasPrev returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasPrev() bool {
	if o != nil && !IsNil(o.Prev) {
		return true
	}

	return false
}

// SetPrev gets a reference to the given string and assigns it to the Prev field.
func (o *SearchPagedCollection) SetPrev(v string) {
	o.Prev = &v
}

// GetRefinement returns the Refinement field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetRefinement() Refinement {
	if o == nil || IsNil(o.Refinement) {
		var ret Refinement
		return ret
	}
	return *o.Refinement
}

// GetRefinementOk returns a tuple with the Refinement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetRefinementOk() (*Refinement, bool) {
	if o == nil || IsNil(o.Refinement) {
		return nil, false
	}
	return o.Refinement, true
}

// HasRefinement returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasRefinement() bool {
	if o != nil && !IsNil(o.Refinement) {
		return true
	}

	return false
}

// SetRefinement gets a reference to the given Refinement and assigns it to the Refinement field.
func (o *SearchPagedCollection) SetRefinement(v Refinement) {
	o.Refinement = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *SearchPagedCollection) SetTotal(v int32) {
	o.Total = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SearchPagedCollection) GetWarnings() []Error {
	if o == nil || IsNil(o.Warnings) {
		var ret []Error
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchPagedCollection) GetWarningsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SearchPagedCollection) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Error and assigns it to the Warnings field.
func (o *SearchPagedCollection) SetWarnings(v []Error) {
	o.Warnings = v
}

func (o SearchPagedCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchPagedCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoCorrections) {
		toSerialize["autoCorrections"] = o.AutoCorrections
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.ItemSummaries) {
		toSerialize["itemSummaries"] = o.ItemSummaries
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Prev) {
		toSerialize["prev"] = o.Prev
	}
	if !IsNil(o.Refinement) {
		toSerialize["refinement"] = o.Refinement
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableSearchPagedCollection struct {
	value *SearchPagedCollection
	isSet bool
}

func (v NullableSearchPagedCollection) Get() *SearchPagedCollection {
	return v.value
}

func (v *NullableSearchPagedCollection) Set(val *SearchPagedCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPagedCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPagedCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPagedCollection(val *SearchPagedCollection) *NullableSearchPagedCollection {
	return &NullableSearchPagedCollection{value: val, isSet: true}
}

func (v NullableSearchPagedCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPagedCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


