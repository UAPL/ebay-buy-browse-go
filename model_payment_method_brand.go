/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// PaymentMethodBrand struct for PaymentMethodBrand
type PaymentMethodBrand struct {
	// The payment method brand, such as Visa or PayPal. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodBrandEnum'>eBay API documentation</a>
	PaymentMethodBrandType *string `json:"paymentMethodBrandType,omitempty"`
	LogoImage *Image `json:"logoImage,omitempty"`
}

// NewPaymentMethodBrand instantiates a new PaymentMethodBrand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodBrand() *PaymentMethodBrand {
	this := PaymentMethodBrand{}
	return &this
}

// NewPaymentMethodBrandWithDefaults instantiates a new PaymentMethodBrand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodBrandWithDefaults() *PaymentMethodBrand {
	this := PaymentMethodBrand{}
	return &this
}

// GetPaymentMethodBrandType returns the PaymentMethodBrandType field value if set, zero value otherwise.
func (o *PaymentMethodBrand) GetPaymentMethodBrandType() string {
	if o == nil || o.PaymentMethodBrandType == nil {
		var ret string
		return ret
	}
	return *o.PaymentMethodBrandType
}

// GetPaymentMethodBrandTypeOk returns a tuple with the PaymentMethodBrandType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodBrand) GetPaymentMethodBrandTypeOk() (*string, bool) {
	if o == nil || o.PaymentMethodBrandType == nil {
		return nil, false
	}
	return o.PaymentMethodBrandType, true
}

// HasPaymentMethodBrandType returns a boolean if a field has been set.
func (o *PaymentMethodBrand) HasPaymentMethodBrandType() bool {
	if o != nil && o.PaymentMethodBrandType != nil {
		return true
	}

	return false
}

// SetPaymentMethodBrandType gets a reference to the given string and assigns it to the PaymentMethodBrandType field.
func (o *PaymentMethodBrand) SetPaymentMethodBrandType(v string) {
	o.PaymentMethodBrandType = &v
}

// GetLogoImage returns the LogoImage field value if set, zero value otherwise.
func (o *PaymentMethodBrand) GetLogoImage() Image {
	if o == nil || o.LogoImage == nil {
		var ret Image
		return ret
	}
	return *o.LogoImage
}

// GetLogoImageOk returns a tuple with the LogoImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodBrand) GetLogoImageOk() (*Image, bool) {
	if o == nil || o.LogoImage == nil {
		return nil, false
	}
	return o.LogoImage, true
}

// HasLogoImage returns a boolean if a field has been set.
func (o *PaymentMethodBrand) HasLogoImage() bool {
	if o != nil && o.LogoImage != nil {
		return true
	}

	return false
}

// SetLogoImage gets a reference to the given Image and assigns it to the LogoImage field.
func (o *PaymentMethodBrand) SetLogoImage(v Image) {
	o.LogoImage = &v
}

func (o PaymentMethodBrand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PaymentMethodBrandType != nil {
		toSerialize["paymentMethodBrandType"] = o.PaymentMethodBrandType
	}
	if o.LogoImage != nil {
		toSerialize["logoImage"] = o.LogoImage
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethodBrand struct {
	value *PaymentMethodBrand
	isSet bool
}

func (v NullablePaymentMethodBrand) Get() *PaymentMethodBrand {
	return v.value
}

func (v *NullablePaymentMethodBrand) Set(val *PaymentMethodBrand) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodBrand) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodBrand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodBrand(val *PaymentMethodBrand) *NullablePaymentMethodBrand {
	return &NullablePaymentMethodBrand{value: val, isSet: true}
}

func (v NullablePaymentMethodBrand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodBrand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


