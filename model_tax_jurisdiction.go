/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the TaxJurisdiction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxJurisdiction{}

// TaxJurisdiction The type that defines the fields for the tax jurisdiction details.
type TaxJurisdiction struct {
	Region *Region `json:"region,omitempty"`
	// The identifier of the tax jurisdiction.
	TaxJurisdictionId *string `json:"taxJurisdictionId,omitempty"`
}

// NewTaxJurisdiction instantiates a new TaxJurisdiction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxJurisdiction() *TaxJurisdiction {
	this := TaxJurisdiction{}
	return &this
}

// NewTaxJurisdictionWithDefaults instantiates a new TaxJurisdiction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxJurisdictionWithDefaults() *TaxJurisdiction {
	this := TaxJurisdiction{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *TaxJurisdiction) GetRegion() Region {
	if o == nil || IsNil(o.Region) {
		var ret Region
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxJurisdiction) GetRegionOk() (*Region, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *TaxJurisdiction) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given Region and assigns it to the Region field.
func (o *TaxJurisdiction) SetRegion(v Region) {
	o.Region = &v
}

// GetTaxJurisdictionId returns the TaxJurisdictionId field value if set, zero value otherwise.
func (o *TaxJurisdiction) GetTaxJurisdictionId() string {
	if o == nil || IsNil(o.TaxJurisdictionId) {
		var ret string
		return ret
	}
	return *o.TaxJurisdictionId
}

// GetTaxJurisdictionIdOk returns a tuple with the TaxJurisdictionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxJurisdiction) GetTaxJurisdictionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaxJurisdictionId) {
		return nil, false
	}
	return o.TaxJurisdictionId, true
}

// HasTaxJurisdictionId returns a boolean if a field has been set.
func (o *TaxJurisdiction) HasTaxJurisdictionId() bool {
	if o != nil && !IsNil(o.TaxJurisdictionId) {
		return true
	}

	return false
}

// SetTaxJurisdictionId gets a reference to the given string and assigns it to the TaxJurisdictionId field.
func (o *TaxJurisdiction) SetTaxJurisdictionId(v string) {
	o.TaxJurisdictionId = &v
}

func (o TaxJurisdiction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxJurisdiction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.TaxJurisdictionId) {
		toSerialize["taxJurisdictionId"] = o.TaxJurisdictionId
	}
	return toSerialize, nil
}

type NullableTaxJurisdiction struct {
	value *TaxJurisdiction
	isSet bool
}

func (v NullableTaxJurisdiction) Get() *TaxJurisdiction {
	return v.value
}

func (v *NullableTaxJurisdiction) Set(val *TaxJurisdiction) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxJurisdiction) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxJurisdiction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxJurisdiction(val *TaxJurisdiction) *NullableTaxJurisdiction {
	return &NullableTaxJurisdiction{value: val, isSet: true}
}

func (v NullableTaxJurisdiction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxJurisdiction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


