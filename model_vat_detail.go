/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the VatDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VatDetail{}

// VatDetail The type the defines the fields for the VAT (value add tax) information.
type VatDetail struct {
	// The two-letter <a href=\"https://www.iso.org/iso-3166-country-codes.html \" target=\"_blank\">ISO 3166</a> standard of the country issuing the seller's VAT (value added tax) ID. VAT is a tax added by some European countries. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:CountryCodeEnum'>eBay API documentation</a>
	IssuingCountry *string `json:"issuingCountry,omitempty"`
	// The seller's VAT (value added tax) ID. VAT is a tax added by some European countries.
	VatId *string `json:"vatId,omitempty"`
}

// NewVatDetail instantiates a new VatDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVatDetail() *VatDetail {
	this := VatDetail{}
	return &this
}

// NewVatDetailWithDefaults instantiates a new VatDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVatDetailWithDefaults() *VatDetail {
	this := VatDetail{}
	return &this
}

// GetIssuingCountry returns the IssuingCountry field value if set, zero value otherwise.
func (o *VatDetail) GetIssuingCountry() string {
	if o == nil || IsNil(o.IssuingCountry) {
		var ret string
		return ret
	}
	return *o.IssuingCountry
}

// GetIssuingCountryOk returns a tuple with the IssuingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VatDetail) GetIssuingCountryOk() (*string, bool) {
	if o == nil || IsNil(o.IssuingCountry) {
		return nil, false
	}
	return o.IssuingCountry, true
}

// HasIssuingCountry returns a boolean if a field has been set.
func (o *VatDetail) HasIssuingCountry() bool {
	if o != nil && !IsNil(o.IssuingCountry) {
		return true
	}

	return false
}

// SetIssuingCountry gets a reference to the given string and assigns it to the IssuingCountry field.
func (o *VatDetail) SetIssuingCountry(v string) {
	o.IssuingCountry = &v
}

// GetVatId returns the VatId field value if set, zero value otherwise.
func (o *VatDetail) GetVatId() string {
	if o == nil || IsNil(o.VatId) {
		var ret string
		return ret
	}
	return *o.VatId
}

// GetVatIdOk returns a tuple with the VatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VatDetail) GetVatIdOk() (*string, bool) {
	if o == nil || IsNil(o.VatId) {
		return nil, false
	}
	return o.VatId, true
}

// HasVatId returns a boolean if a field has been set.
func (o *VatDetail) HasVatId() bool {
	if o != nil && !IsNil(o.VatId) {
		return true
	}

	return false
}

// SetVatId gets a reference to the given string and assigns it to the VatId field.
func (o *VatDetail) SetVatId(v string) {
	o.VatId = &v
}

func (o VatDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VatDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssuingCountry) {
		toSerialize["issuingCountry"] = o.IssuingCountry
	}
	if !IsNil(o.VatId) {
		toSerialize["vatId"] = o.VatId
	}
	return toSerialize, nil
}

type NullableVatDetail struct {
	value *VatDetail
	isSet bool
}

func (v NullableVatDetail) Get() *VatDetail {
	return v.value
}

func (v *NullableVatDetail) Set(val *VatDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableVatDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableVatDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVatDetail(val *VatDetail) *NullableVatDetail {
	return &NullableVatDetail{value: val, isSet: true}
}

func (v NullableVatDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVatDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


