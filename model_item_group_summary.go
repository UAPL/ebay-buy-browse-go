/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// ItemGroupSummary The type that defines the fields for the details of each item in an item group. An item group is  an item that has various aspect differences, such as color, size, storage capacity, etc. When an item group is created, one of the item variations, such as the red shirt size L, is chosen as the \"parent\". All the other items in the group are the children, such as the blue shirt size L, red shirt size M, etc. <br /><br /><span class=\"tablenote\"><b> Note: </b> This container is returned only if the <b> item_id</b> in the request is an item group (parent ID of an item with variations).</span>
type ItemGroupSummary struct {
	// An array of containers with the URLs for images that are in addition to the primary image of the item group.  The primary image is returned in the <b> itemGroupImage</b> field.
	ItemGroupAdditionalImages *[]Image `json:"itemGroupAdditionalImages,omitempty"`
	// The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. 
	ItemGroupHref *string `json:"itemGroupHref,omitempty"`
	// The unique identifier for the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. 
	ItemGroupId *string `json:"itemGroupId,omitempty"`
	ItemGroupImage *Image `json:"itemGroupImage,omitempty"`
	// The title of the item that appears on the item group page. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. 
	ItemGroupTitle *string `json:"itemGroupTitle,omitempty"`
	// An enumeration value that indicates the type of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ItemGroupTypeEnum'>eBay API documentation</a>
	ItemGroupType *string `json:"itemGroupType,omitempty"`
}

// NewItemGroupSummary instantiates a new ItemGroupSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemGroupSummary() *ItemGroupSummary {
	this := ItemGroupSummary{}
	return &this
}

// NewItemGroupSummaryWithDefaults instantiates a new ItemGroupSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemGroupSummaryWithDefaults() *ItemGroupSummary {
	this := ItemGroupSummary{}
	return &this
}

// GetItemGroupAdditionalImages returns the ItemGroupAdditionalImages field value if set, zero value otherwise.
func (o *ItemGroupSummary) GetItemGroupAdditionalImages() []Image {
	if o == nil || o.ItemGroupAdditionalImages == nil {
		var ret []Image
		return ret
	}
	return *o.ItemGroupAdditionalImages
}

// GetItemGroupAdditionalImagesOk returns a tuple with the ItemGroupAdditionalImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroupSummary) GetItemGroupAdditionalImagesOk() (*[]Image, bool) {
	if o == nil || o.ItemGroupAdditionalImages == nil {
		return nil, false
	}
	return o.ItemGroupAdditionalImages, true
}

// HasItemGroupAdditionalImages returns a boolean if a field has been set.
func (o *ItemGroupSummary) HasItemGroupAdditionalImages() bool {
	if o != nil && o.ItemGroupAdditionalImages != nil {
		return true
	}

	return false
}

// SetItemGroupAdditionalImages gets a reference to the given []Image and assigns it to the ItemGroupAdditionalImages field.
func (o *ItemGroupSummary) SetItemGroupAdditionalImages(v []Image) {
	o.ItemGroupAdditionalImages = &v
}

// GetItemGroupHref returns the ItemGroupHref field value if set, zero value otherwise.
func (o *ItemGroupSummary) GetItemGroupHref() string {
	if o == nil || o.ItemGroupHref == nil {
		var ret string
		return ret
	}
	return *o.ItemGroupHref
}

// GetItemGroupHrefOk returns a tuple with the ItemGroupHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroupSummary) GetItemGroupHrefOk() (*string, bool) {
	if o == nil || o.ItemGroupHref == nil {
		return nil, false
	}
	return o.ItemGroupHref, true
}

// HasItemGroupHref returns a boolean if a field has been set.
func (o *ItemGroupSummary) HasItemGroupHref() bool {
	if o != nil && o.ItemGroupHref != nil {
		return true
	}

	return false
}

// SetItemGroupHref gets a reference to the given string and assigns it to the ItemGroupHref field.
func (o *ItemGroupSummary) SetItemGroupHref(v string) {
	o.ItemGroupHref = &v
}

// GetItemGroupId returns the ItemGroupId field value if set, zero value otherwise.
func (o *ItemGroupSummary) GetItemGroupId() string {
	if o == nil || o.ItemGroupId == nil {
		var ret string
		return ret
	}
	return *o.ItemGroupId
}

// GetItemGroupIdOk returns a tuple with the ItemGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroupSummary) GetItemGroupIdOk() (*string, bool) {
	if o == nil || o.ItemGroupId == nil {
		return nil, false
	}
	return o.ItemGroupId, true
}

// HasItemGroupId returns a boolean if a field has been set.
func (o *ItemGroupSummary) HasItemGroupId() bool {
	if o != nil && o.ItemGroupId != nil {
		return true
	}

	return false
}

// SetItemGroupId gets a reference to the given string and assigns it to the ItemGroupId field.
func (o *ItemGroupSummary) SetItemGroupId(v string) {
	o.ItemGroupId = &v
}

// GetItemGroupImage returns the ItemGroupImage field value if set, zero value otherwise.
func (o *ItemGroupSummary) GetItemGroupImage() Image {
	if o == nil || o.ItemGroupImage == nil {
		var ret Image
		return ret
	}
	return *o.ItemGroupImage
}

// GetItemGroupImageOk returns a tuple with the ItemGroupImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroupSummary) GetItemGroupImageOk() (*Image, bool) {
	if o == nil || o.ItemGroupImage == nil {
		return nil, false
	}
	return o.ItemGroupImage, true
}

// HasItemGroupImage returns a boolean if a field has been set.
func (o *ItemGroupSummary) HasItemGroupImage() bool {
	if o != nil && o.ItemGroupImage != nil {
		return true
	}

	return false
}

// SetItemGroupImage gets a reference to the given Image and assigns it to the ItemGroupImage field.
func (o *ItemGroupSummary) SetItemGroupImage(v Image) {
	o.ItemGroupImage = &v
}

// GetItemGroupTitle returns the ItemGroupTitle field value if set, zero value otherwise.
func (o *ItemGroupSummary) GetItemGroupTitle() string {
	if o == nil || o.ItemGroupTitle == nil {
		var ret string
		return ret
	}
	return *o.ItemGroupTitle
}

// GetItemGroupTitleOk returns a tuple with the ItemGroupTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroupSummary) GetItemGroupTitleOk() (*string, bool) {
	if o == nil || o.ItemGroupTitle == nil {
		return nil, false
	}
	return o.ItemGroupTitle, true
}

// HasItemGroupTitle returns a boolean if a field has been set.
func (o *ItemGroupSummary) HasItemGroupTitle() bool {
	if o != nil && o.ItemGroupTitle != nil {
		return true
	}

	return false
}

// SetItemGroupTitle gets a reference to the given string and assigns it to the ItemGroupTitle field.
func (o *ItemGroupSummary) SetItemGroupTitle(v string) {
	o.ItemGroupTitle = &v
}

// GetItemGroupType returns the ItemGroupType field value if set, zero value otherwise.
func (o *ItemGroupSummary) GetItemGroupType() string {
	if o == nil || o.ItemGroupType == nil {
		var ret string
		return ret
	}
	return *o.ItemGroupType
}

// GetItemGroupTypeOk returns a tuple with the ItemGroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroupSummary) GetItemGroupTypeOk() (*string, bool) {
	if o == nil || o.ItemGroupType == nil {
		return nil, false
	}
	return o.ItemGroupType, true
}

// HasItemGroupType returns a boolean if a field has been set.
func (o *ItemGroupSummary) HasItemGroupType() bool {
	if o != nil && o.ItemGroupType != nil {
		return true
	}

	return false
}

// SetItemGroupType gets a reference to the given string and assigns it to the ItemGroupType field.
func (o *ItemGroupSummary) SetItemGroupType(v string) {
	o.ItemGroupType = &v
}

func (o ItemGroupSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemGroupAdditionalImages != nil {
		toSerialize["itemGroupAdditionalImages"] = o.ItemGroupAdditionalImages
	}
	if o.ItemGroupHref != nil {
		toSerialize["itemGroupHref"] = o.ItemGroupHref
	}
	if o.ItemGroupId != nil {
		toSerialize["itemGroupId"] = o.ItemGroupId
	}
	if o.ItemGroupImage != nil {
		toSerialize["itemGroupImage"] = o.ItemGroupImage
	}
	if o.ItemGroupTitle != nil {
		toSerialize["itemGroupTitle"] = o.ItemGroupTitle
	}
	if o.ItemGroupType != nil {
		toSerialize["itemGroupType"] = o.ItemGroupType
	}
	return json.Marshal(toSerialize)
}

type NullableItemGroupSummary struct {
	value *ItemGroupSummary
	isSet bool
}

func (v NullableItemGroupSummary) Get() *ItemGroupSummary {
	return v.value
}

func (v *NullableItemGroupSummary) Set(val *ItemGroupSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableItemGroupSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableItemGroupSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemGroupSummary(val *ItemGroupSummary) *NullableItemGroupSummary {
	return &NullableItemGroupSummary{value: val, isSet: true}
}

func (v NullableItemGroupSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemGroupSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


