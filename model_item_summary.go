/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the ItemSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemSummary{}

// ItemSummary The type that defines the fields for the details of a specific item.
type ItemSummary struct {
	// An array of containers with the URLs for the images that are in addition to the primary image. The primary image is returned in the <code>image.imageUrl</code> field.
	AdditionalImages []Image `json:"additionalImages,omitempty"`
	// This indicates if the item is for adults only. For more information about adult-only items on eBay, refer to the <a href=\"https://www.ebay.com/help/policies/prohibited-restricted-items/adult-items-policy?id=4278 \" target=\"_blank\">Adult items policy</a>.
	AdultOnly *bool `json:"adultOnly,omitempty"`
	// This boolean attribute indicates if coupons are available for the item.
	AvailableCoupons *bool `json:"availableCoupons,omitempty"`
	// This integer value indicates the total number of bids that have been placed for an auction item. This field is only returned for auction items.
	BidCount *int32 `json:"bidCount,omitempty"`
	// A comma separated list of all the purchase options available for the item.<br><br><b>Values Returned:</b><ul><li><code>FIXED_PRICE</code><br>Indicates the buyer can purchase the item for a set price using the <i>Buy It Now</i> button.</li><li><code>AUCTION</code><br>Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item.</li><li><code>BEST_OFFER</code><br>Items where the buyer can send the seller a price they are willing to pay for the item. The seller can accept, reject, or send a counter offer. For additional information about Best Offer, refer to <a href=\"https://www.ebay.com/help/selling/listings/selling-buy-now/adding-best-offer-listing?id=4144 \" target=\"_blank\">Adding Best Offer to your listing and sending offers to buyers</a>.</li><li><code>CLASSIFIED_AD</code><br>Indicates that the final sales transaction is to be completed outside of the eBay environment.</li></ul>
	BuyingOptions []string `json:"buyingOptions,omitempty"`
	// This array returns the name and ID of each category associated with the item, including top level, branch, and leaf categories.
	Categories []Category `json:"categories,omitempty"`
	// This indicates how well an item matches the <code>compatibility_filter</code> product attributes.<br><br><b>Valid Values:</b><ul><li><code>EXACT</code></li><li><code>POSSIBLE</li></ul> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:CompatibilityMatchEnum'>eBay API documentation</a>
	CompatibilityMatch *string `json:"compatibilityMatch,omitempty"`
	// This container returns only the product attributes that are compatible with the item. These attributes were specified in the <code>compatibility_filter</code> in the request. This means that if you passed in 5 attributes and only 4 are compatible, only those 4 are returned. If none of the attributes are compatible, this container is not returned.
	CompatibilityProperties []CompatibilityProperty `json:"compatibilityProperties,omitempty"`
	// The text describing the condition of the item, such as <b>New</b> or <b>Used</b>. For a list of condition names, refer to <a href=\"/devzone/finding/callref/enums/conditionIdList.html \" target=\"_blank\">Item Condition IDs and Names</a>.
	Condition *string `json:"condition,omitempty"`
	// The identifier of the condition of the item. For example, <code>1000</code> is the identifier for <code>NEW</code>. For a list of condition names and IDs, refer to <a href=\"/devzone/finding/callref/enums/conditionIdList.html \" target=\"_blank\">Item Condition IDs and Names</a>.
	ConditionId *string `json:"conditionId,omitempty"`
	CurrentBidPrice *ConvertedAmount `json:"currentBidPrice,omitempty"`
	DistanceFromPickupLocation *TargetLocation `json:"distanceFromPickupLocation,omitempty"`
	// This indicates the <a href=\"https://en.wikipedia.org/wiki/European_Union_energy_label \" target=\"_blank\">European energy efficiency</a> rating (EEK) of the item. Energy efficiency ratings apply to products listed by commercial vendors in electronics categories only. <br><br>Currently, this field is only applicable for the Germany site, and is returned only if the seller specifies the energy efficiency rating through item specifics at listing time. Rating values include <code>A+++</code>, <code>A++</code>, <code>A+</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>F</code>, and <code>G</code>.
	EnergyEfficiencyClass *string `json:"energyEfficiencyClass,omitempty"`
	// An ePID is the eBay product identifier of a product from the eBay product catalog.  This indicates the product in which the item belongs.
	Epid *string `json:"epid,omitempty"`
	Image *Image `json:"image,omitempty"`
	// The URL to the View Item page of the item which includes the affiliate tracking ID.<br><br><span class=\"tablenote\"><b>Note:</b> In order to receive commissions on sales, eBay Partner Network affiliates must use this URL to forward buyers to the listing on the eBay marketplace.</span><br>The <code>itemAffiliateWebUrl</code> is returned only if:<ul><li>The marketplace through which the item is being viewed is part of the eBay Partner Network. Currently Singapore (<code>EBAY_SG</code>) is <b>not</b> supported.<br><br>For additional information, refer to <a href=\"https://partnerhelp.ebay.com/helpcenter/s/article/countries-available-as-a-program-in-EPN?language=en_US \" target=\"_blank\">eBay Partner Network</a>.</li><li>The seller enables affiliate tracking for the item by including the <code><a href=\"/api-docs/buy/static/api-browse.html#Headers\">X-EBAY-C-ENDUSERCTX</a></code> request header in the method.</li></ul>
	ItemAffiliateWebUrl *string `json:"itemAffiliateWebUrl,omitempty"`
	// The date and time when the item listing was created. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.
	ItemCreationDate *string `json:"itemCreationDate,omitempty"`
	// The date and time up to which the item can be purchased. This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.<br><br><span class=\"tablenote\"><b>Note:</b> This field is not returned for Good 'Til Cancelled (GTC) listings.</span>
	ItemEndDate *string `json:"itemEndDate,omitempty"`
	// The HATEOAS reference of the parent page of the item group. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>
	ItemGroupHref *string `json:"itemGroupHref,omitempty"`
	// The indicates the item group type. An item group is an item that has various aspect differences, such as color, size, storage capacity, etc. <br><br>Currently only the <code>SELLER_DEFINED_VARIATIONS</code> is supported and indicates this is an item group created by the seller.<br><br><span class=\"tablenote\"><b>Note:</b> This field is returned only for item groups.</span>
	ItemGroupType *string `json:"itemGroupType,omitempty"`
	// The URI for the Browse API <a href=\"/api-docs/buy/browse/resources/item/methods/getItem\" target=\"_blank\">getItem</a> method, which can be used to retrieve more details about items in the search results.
	ItemHref *string `json:"itemHref,omitempty"`
	// The unique RESTful identifier of the item.
	ItemId *string `json:"itemId,omitempty"`
	ItemLocation *ItemLocationImpl `json:"itemLocation,omitempty"`
	// The URL to the View Item page of the item. This enables you to include a \"Report Item on eBay\" hyperlink that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
	ItemWebUrl *string `json:"itemWebUrl,omitempty"`
	// The leaf category IDs of the item. When the item belongs to two leaf categories, the ID values are returned in the order primary, secondary.
	LeafCategoryIds []string `json:"leafCategoryIds,omitempty"`
	// The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.
	LegacyItemId *string `json:"legacyItemId,omitempty"`
	// The ID of the eBay marketplace on which the seller listed the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/ba:MarketplaceIdEnum'>eBay API documentation</a>
	ListingMarketplaceId *string `json:"listingMarketplaceId,omitempty"`
	MarketingPrice *MarketingPrice `json:"marketingPrice,omitempty"`
	// This container returns the local pickup options available to the buyer. This container is returned only if the user is searching for local pickup items and set the local pickup filters in the method request.
	PickupOptions []PickupOptionSummary `json:"pickupOptions,omitempty"`
	Price *ConvertedAmount `json:"price,omitempty"`
	// Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>
	PriceDisplayCondition *string `json:"priceDisplayCondition,omitempty"`
	// This field is returned as <code>true</code> if the listing is part of a Promoted Listing campaign. Promoted Listings are available to <b>Above Standard</b> and <b>Top Rated</b> sellers with recent sales activity.<br><br><span class=\"tablenote\"><b>Note:</b> Priority Listing is returned only with a Best Match sort and will not be returned for other sort options.</span>
	PriorityListing *bool `json:"priorityListing,omitempty"`
	// An array of the qualified programs available for the item, such as <code>EBAY_PLUS</code>, <code>AUTHENTICITY_GUARANTEE</code>, and <code>AUTHENTICITY_VERIFICATION</code>.<br><br>eBay Plus is a premium account option for buyers, which provides benefits such as fast, free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.<br><br><span class=\"tablenote\"><b>Note: </b> eBay Plus is available only to buyers in the Germany, Austria, and Australia marketplaces.</span><br><br>The eBay <a href=\"https://pages.ebay.com/authenticity-guarantee/ \" target=\"_blank\">Authenticity Guarantee</a> program enables third-party authenticators to perform authentication verification inspections on items such as watches and sneakers.
	QualifiedPrograms []string `json:"qualifiedPrograms,omitempty"`
	Seller *Seller `json:"seller,omitempty"`
	// This container returns the shipping options available to ship the item.
	ShippingOptions []ShippingOptionSummary `json:"shippingOptions,omitempty"`
	// This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.) Sometimes the title does not provide enough information but the description is too big. Surfacing the <code>shortDescription</code> can often provide buyers with the additional information that could help them make a buying decision.<br><br>For example:<pre>\"<b>title</b>\": \"Petrel U42W FPV Drone RC Quadcopter w/HD Camera Live Video One Key Off / Landing\",<br>\"<b>shortDescription</b>\": \"1 U42W Quadcopter. Syma X5SW-V3 Wifi FPV RC Drone Quadcopter 2.4Ghz 6-Axis Gyro with Headless Mode. Syma X20 Pocket Drone 2.4Ghz Mini RC Quadcopter Headless Mode Altitude Hold. One Key Take Off / Landing function: allow beginner to easy to fly the drone without any skill.\",</pre><br><b>Restriction:</b> This field is returned by the <b>search</b> method only when <code>fieldgroups</code> = <code>EXTENDED</code>.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// An array of thumbnail images for the item.
	ThumbnailImages []Image `json:"thumbnailImages,omitempty"`
	// The seller-created title of the item.<br><br><b>Maximum Length:</b> 80 characters
	Title *string `json:"title,omitempty"`
	// This indicates if the item is a top-rated plus item. There are three benefits of a top-rated plus item: a  minimum 30-day money-back return policy; shipping the item in 1 business day with tracking provided; and the added comfort of knowing that this item is from an experienced seller with the highest buyer ratings. For more information, refer to <a href=\"https://pages.ebay.com/topratedplus/index.html \" target=\"_blank\">Look for Top Rated Plus Items</a> and <a href=\"https://www.ebay.com/help/selling/seller-levels-performance-standards/seller-levels-performance-standards?id=4080 \" target=\"_blank\">Seller performance overview</a>.
	TopRatedBuyingExperience *bool `json:"topRatedBuyingExperience,omitempty"`
	// The URL to the image that shows the information on the tyre label.
	TyreLabelImageUrl *string `json:"tyreLabelImageUrl,omitempty"`
	UnitPrice *ConvertedAmount `json:"unitPrice,omitempty"`
	// The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item. This helps buyers compare prices.<br><br>For example, the following tells the buyer that the item is 7.99 per 100 grams.<pre>\"unitPricingMeasure\": \"100g\",<br> \"unitPrice\": {<br>&nbsp;&nbsp;\"value\": \"7.99\",<br>&nbsp;&nbsp;\"currency\": \"GBP\"</pre>
	UnitPricingMeasure *string `json:"unitPricingMeasure,omitempty"`
	// The number of users that have added the item to their watch list.<br><br><span class=\"tablenote\"><b>Note:</b> This field is restricted to applications that have been granted permission to access this feature. You must submit an <a href=\"/my/support/tickets?tab=app-check \" target=\"_blank\">App Check ticket</a> to request this access. In the App Check form, add a note to the <b>Application Title/Summary</b> and/or <b>Application Details</b> fields indicating that you want access to Watch Count data in the Browse API.</span>
	WatchCount *int32 `json:"watchCount,omitempty"`
}

// NewItemSummary instantiates a new ItemSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemSummary() *ItemSummary {
	this := ItemSummary{}
	return &this
}

// NewItemSummaryWithDefaults instantiates a new ItemSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemSummaryWithDefaults() *ItemSummary {
	this := ItemSummary{}
	return &this
}

// GetAdditionalImages returns the AdditionalImages field value if set, zero value otherwise.
func (o *ItemSummary) GetAdditionalImages() []Image {
	if o == nil || IsNil(o.AdditionalImages) {
		var ret []Image
		return ret
	}
	return o.AdditionalImages
}

// GetAdditionalImagesOk returns a tuple with the AdditionalImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetAdditionalImagesOk() ([]Image, bool) {
	if o == nil || IsNil(o.AdditionalImages) {
		return nil, false
	}
	return o.AdditionalImages, true
}

// HasAdditionalImages returns a boolean if a field has been set.
func (o *ItemSummary) HasAdditionalImages() bool {
	if o != nil && !IsNil(o.AdditionalImages) {
		return true
	}

	return false
}

// SetAdditionalImages gets a reference to the given []Image and assigns it to the AdditionalImages field.
func (o *ItemSummary) SetAdditionalImages(v []Image) {
	o.AdditionalImages = v
}

// GetAdultOnly returns the AdultOnly field value if set, zero value otherwise.
func (o *ItemSummary) GetAdultOnly() bool {
	if o == nil || IsNil(o.AdultOnly) {
		var ret bool
		return ret
	}
	return *o.AdultOnly
}

// GetAdultOnlyOk returns a tuple with the AdultOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetAdultOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.AdultOnly) {
		return nil, false
	}
	return o.AdultOnly, true
}

// HasAdultOnly returns a boolean if a field has been set.
func (o *ItemSummary) HasAdultOnly() bool {
	if o != nil && !IsNil(o.AdultOnly) {
		return true
	}

	return false
}

// SetAdultOnly gets a reference to the given bool and assigns it to the AdultOnly field.
func (o *ItemSummary) SetAdultOnly(v bool) {
	o.AdultOnly = &v
}

// GetAvailableCoupons returns the AvailableCoupons field value if set, zero value otherwise.
func (o *ItemSummary) GetAvailableCoupons() bool {
	if o == nil || IsNil(o.AvailableCoupons) {
		var ret bool
		return ret
	}
	return *o.AvailableCoupons
}

// GetAvailableCouponsOk returns a tuple with the AvailableCoupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetAvailableCouponsOk() (*bool, bool) {
	if o == nil || IsNil(o.AvailableCoupons) {
		return nil, false
	}
	return o.AvailableCoupons, true
}

// HasAvailableCoupons returns a boolean if a field has been set.
func (o *ItemSummary) HasAvailableCoupons() bool {
	if o != nil && !IsNil(o.AvailableCoupons) {
		return true
	}

	return false
}

// SetAvailableCoupons gets a reference to the given bool and assigns it to the AvailableCoupons field.
func (o *ItemSummary) SetAvailableCoupons(v bool) {
	o.AvailableCoupons = &v
}

// GetBidCount returns the BidCount field value if set, zero value otherwise.
func (o *ItemSummary) GetBidCount() int32 {
	if o == nil || IsNil(o.BidCount) {
		var ret int32
		return ret
	}
	return *o.BidCount
}

// GetBidCountOk returns a tuple with the BidCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetBidCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BidCount) {
		return nil, false
	}
	return o.BidCount, true
}

// HasBidCount returns a boolean if a field has been set.
func (o *ItemSummary) HasBidCount() bool {
	if o != nil && !IsNil(o.BidCount) {
		return true
	}

	return false
}

// SetBidCount gets a reference to the given int32 and assigns it to the BidCount field.
func (o *ItemSummary) SetBidCount(v int32) {
	o.BidCount = &v
}

// GetBuyingOptions returns the BuyingOptions field value if set, zero value otherwise.
func (o *ItemSummary) GetBuyingOptions() []string {
	if o == nil || IsNil(o.BuyingOptions) {
		var ret []string
		return ret
	}
	return o.BuyingOptions
}

// GetBuyingOptionsOk returns a tuple with the BuyingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetBuyingOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.BuyingOptions) {
		return nil, false
	}
	return o.BuyingOptions, true
}

// HasBuyingOptions returns a boolean if a field has been set.
func (o *ItemSummary) HasBuyingOptions() bool {
	if o != nil && !IsNil(o.BuyingOptions) {
		return true
	}

	return false
}

// SetBuyingOptions gets a reference to the given []string and assigns it to the BuyingOptions field.
func (o *ItemSummary) SetBuyingOptions(v []string) {
	o.BuyingOptions = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ItemSummary) GetCategories() []Category {
	if o == nil || IsNil(o.Categories) {
		var ret []Category
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetCategoriesOk() ([]Category, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ItemSummary) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *ItemSummary) SetCategories(v []Category) {
	o.Categories = v
}

// GetCompatibilityMatch returns the CompatibilityMatch field value if set, zero value otherwise.
func (o *ItemSummary) GetCompatibilityMatch() string {
	if o == nil || IsNil(o.CompatibilityMatch) {
		var ret string
		return ret
	}
	return *o.CompatibilityMatch
}

// GetCompatibilityMatchOk returns a tuple with the CompatibilityMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetCompatibilityMatchOk() (*string, bool) {
	if o == nil || IsNil(o.CompatibilityMatch) {
		return nil, false
	}
	return o.CompatibilityMatch, true
}

// HasCompatibilityMatch returns a boolean if a field has been set.
func (o *ItemSummary) HasCompatibilityMatch() bool {
	if o != nil && !IsNil(o.CompatibilityMatch) {
		return true
	}

	return false
}

// SetCompatibilityMatch gets a reference to the given string and assigns it to the CompatibilityMatch field.
func (o *ItemSummary) SetCompatibilityMatch(v string) {
	o.CompatibilityMatch = &v
}

// GetCompatibilityProperties returns the CompatibilityProperties field value if set, zero value otherwise.
func (o *ItemSummary) GetCompatibilityProperties() []CompatibilityProperty {
	if o == nil || IsNil(o.CompatibilityProperties) {
		var ret []CompatibilityProperty
		return ret
	}
	return o.CompatibilityProperties
}

// GetCompatibilityPropertiesOk returns a tuple with the CompatibilityProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetCompatibilityPropertiesOk() ([]CompatibilityProperty, bool) {
	if o == nil || IsNil(o.CompatibilityProperties) {
		return nil, false
	}
	return o.CompatibilityProperties, true
}

// HasCompatibilityProperties returns a boolean if a field has been set.
func (o *ItemSummary) HasCompatibilityProperties() bool {
	if o != nil && !IsNil(o.CompatibilityProperties) {
		return true
	}

	return false
}

// SetCompatibilityProperties gets a reference to the given []CompatibilityProperty and assigns it to the CompatibilityProperties field.
func (o *ItemSummary) SetCompatibilityProperties(v []CompatibilityProperty) {
	o.CompatibilityProperties = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ItemSummary) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ItemSummary) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *ItemSummary) SetCondition(v string) {
	o.Condition = &v
}

// GetConditionId returns the ConditionId field value if set, zero value otherwise.
func (o *ItemSummary) GetConditionId() string {
	if o == nil || IsNil(o.ConditionId) {
		var ret string
		return ret
	}
	return *o.ConditionId
}

// GetConditionIdOk returns a tuple with the ConditionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetConditionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionId) {
		return nil, false
	}
	return o.ConditionId, true
}

// HasConditionId returns a boolean if a field has been set.
func (o *ItemSummary) HasConditionId() bool {
	if o != nil && !IsNil(o.ConditionId) {
		return true
	}

	return false
}

// SetConditionId gets a reference to the given string and assigns it to the ConditionId field.
func (o *ItemSummary) SetConditionId(v string) {
	o.ConditionId = &v
}

// GetCurrentBidPrice returns the CurrentBidPrice field value if set, zero value otherwise.
func (o *ItemSummary) GetCurrentBidPrice() ConvertedAmount {
	if o == nil || IsNil(o.CurrentBidPrice) {
		var ret ConvertedAmount
		return ret
	}
	return *o.CurrentBidPrice
}

// GetCurrentBidPriceOk returns a tuple with the CurrentBidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetCurrentBidPriceOk() (*ConvertedAmount, bool) {
	if o == nil || IsNil(o.CurrentBidPrice) {
		return nil, false
	}
	return o.CurrentBidPrice, true
}

// HasCurrentBidPrice returns a boolean if a field has been set.
func (o *ItemSummary) HasCurrentBidPrice() bool {
	if o != nil && !IsNil(o.CurrentBidPrice) {
		return true
	}

	return false
}

// SetCurrentBidPrice gets a reference to the given ConvertedAmount and assigns it to the CurrentBidPrice field.
func (o *ItemSummary) SetCurrentBidPrice(v ConvertedAmount) {
	o.CurrentBidPrice = &v
}

// GetDistanceFromPickupLocation returns the DistanceFromPickupLocation field value if set, zero value otherwise.
func (o *ItemSummary) GetDistanceFromPickupLocation() TargetLocation {
	if o == nil || IsNil(o.DistanceFromPickupLocation) {
		var ret TargetLocation
		return ret
	}
	return *o.DistanceFromPickupLocation
}

// GetDistanceFromPickupLocationOk returns a tuple with the DistanceFromPickupLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetDistanceFromPickupLocationOk() (*TargetLocation, bool) {
	if o == nil || IsNil(o.DistanceFromPickupLocation) {
		return nil, false
	}
	return o.DistanceFromPickupLocation, true
}

// HasDistanceFromPickupLocation returns a boolean if a field has been set.
func (o *ItemSummary) HasDistanceFromPickupLocation() bool {
	if o != nil && !IsNil(o.DistanceFromPickupLocation) {
		return true
	}

	return false
}

// SetDistanceFromPickupLocation gets a reference to the given TargetLocation and assigns it to the DistanceFromPickupLocation field.
func (o *ItemSummary) SetDistanceFromPickupLocation(v TargetLocation) {
	o.DistanceFromPickupLocation = &v
}

// GetEnergyEfficiencyClass returns the EnergyEfficiencyClass field value if set, zero value otherwise.
func (o *ItemSummary) GetEnergyEfficiencyClass() string {
	if o == nil || IsNil(o.EnergyEfficiencyClass) {
		var ret string
		return ret
	}
	return *o.EnergyEfficiencyClass
}

// GetEnergyEfficiencyClassOk returns a tuple with the EnergyEfficiencyClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetEnergyEfficiencyClassOk() (*string, bool) {
	if o == nil || IsNil(o.EnergyEfficiencyClass) {
		return nil, false
	}
	return o.EnergyEfficiencyClass, true
}

// HasEnergyEfficiencyClass returns a boolean if a field has been set.
func (o *ItemSummary) HasEnergyEfficiencyClass() bool {
	if o != nil && !IsNil(o.EnergyEfficiencyClass) {
		return true
	}

	return false
}

// SetEnergyEfficiencyClass gets a reference to the given string and assigns it to the EnergyEfficiencyClass field.
func (o *ItemSummary) SetEnergyEfficiencyClass(v string) {
	o.EnergyEfficiencyClass = &v
}

// GetEpid returns the Epid field value if set, zero value otherwise.
func (o *ItemSummary) GetEpid() string {
	if o == nil || IsNil(o.Epid) {
		var ret string
		return ret
	}
	return *o.Epid
}

// GetEpidOk returns a tuple with the Epid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetEpidOk() (*string, bool) {
	if o == nil || IsNil(o.Epid) {
		return nil, false
	}
	return o.Epid, true
}

// HasEpid returns a boolean if a field has been set.
func (o *ItemSummary) HasEpid() bool {
	if o != nil && !IsNil(o.Epid) {
		return true
	}

	return false
}

// SetEpid gets a reference to the given string and assigns it to the Epid field.
func (o *ItemSummary) SetEpid(v string) {
	o.Epid = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ItemSummary) GetImage() Image {
	if o == nil || IsNil(o.Image) {
		var ret Image
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetImageOk() (*Image, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ItemSummary) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given Image and assigns it to the Image field.
func (o *ItemSummary) SetImage(v Image) {
	o.Image = &v
}

// GetItemAffiliateWebUrl returns the ItemAffiliateWebUrl field value if set, zero value otherwise.
func (o *ItemSummary) GetItemAffiliateWebUrl() string {
	if o == nil || IsNil(o.ItemAffiliateWebUrl) {
		var ret string
		return ret
	}
	return *o.ItemAffiliateWebUrl
}

// GetItemAffiliateWebUrlOk returns a tuple with the ItemAffiliateWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemAffiliateWebUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ItemAffiliateWebUrl) {
		return nil, false
	}
	return o.ItemAffiliateWebUrl, true
}

// HasItemAffiliateWebUrl returns a boolean if a field has been set.
func (o *ItemSummary) HasItemAffiliateWebUrl() bool {
	if o != nil && !IsNil(o.ItemAffiliateWebUrl) {
		return true
	}

	return false
}

// SetItemAffiliateWebUrl gets a reference to the given string and assigns it to the ItemAffiliateWebUrl field.
func (o *ItemSummary) SetItemAffiliateWebUrl(v string) {
	o.ItemAffiliateWebUrl = &v
}

// GetItemCreationDate returns the ItemCreationDate field value if set, zero value otherwise.
func (o *ItemSummary) GetItemCreationDate() string {
	if o == nil || IsNil(o.ItemCreationDate) {
		var ret string
		return ret
	}
	return *o.ItemCreationDate
}

// GetItemCreationDateOk returns a tuple with the ItemCreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemCreationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCreationDate) {
		return nil, false
	}
	return o.ItemCreationDate, true
}

// HasItemCreationDate returns a boolean if a field has been set.
func (o *ItemSummary) HasItemCreationDate() bool {
	if o != nil && !IsNil(o.ItemCreationDate) {
		return true
	}

	return false
}

// SetItemCreationDate gets a reference to the given string and assigns it to the ItemCreationDate field.
func (o *ItemSummary) SetItemCreationDate(v string) {
	o.ItemCreationDate = &v
}

// GetItemEndDate returns the ItemEndDate field value if set, zero value otherwise.
func (o *ItemSummary) GetItemEndDate() string {
	if o == nil || IsNil(o.ItemEndDate) {
		var ret string
		return ret
	}
	return *o.ItemEndDate
}

// GetItemEndDateOk returns a tuple with the ItemEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ItemEndDate) {
		return nil, false
	}
	return o.ItemEndDate, true
}

// HasItemEndDate returns a boolean if a field has been set.
func (o *ItemSummary) HasItemEndDate() bool {
	if o != nil && !IsNil(o.ItemEndDate) {
		return true
	}

	return false
}

// SetItemEndDate gets a reference to the given string and assigns it to the ItemEndDate field.
func (o *ItemSummary) SetItemEndDate(v string) {
	o.ItemEndDate = &v
}

// GetItemGroupHref returns the ItemGroupHref field value if set, zero value otherwise.
func (o *ItemSummary) GetItemGroupHref() string {
	if o == nil || IsNil(o.ItemGroupHref) {
		var ret string
		return ret
	}
	return *o.ItemGroupHref
}

// GetItemGroupHrefOk returns a tuple with the ItemGroupHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemGroupHrefOk() (*string, bool) {
	if o == nil || IsNil(o.ItemGroupHref) {
		return nil, false
	}
	return o.ItemGroupHref, true
}

// HasItemGroupHref returns a boolean if a field has been set.
func (o *ItemSummary) HasItemGroupHref() bool {
	if o != nil && !IsNil(o.ItemGroupHref) {
		return true
	}

	return false
}

// SetItemGroupHref gets a reference to the given string and assigns it to the ItemGroupHref field.
func (o *ItemSummary) SetItemGroupHref(v string) {
	o.ItemGroupHref = &v
}

// GetItemGroupType returns the ItemGroupType field value if set, zero value otherwise.
func (o *ItemSummary) GetItemGroupType() string {
	if o == nil || IsNil(o.ItemGroupType) {
		var ret string
		return ret
	}
	return *o.ItemGroupType
}

// GetItemGroupTypeOk returns a tuple with the ItemGroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemGroupType) {
		return nil, false
	}
	return o.ItemGroupType, true
}

// HasItemGroupType returns a boolean if a field has been set.
func (o *ItemSummary) HasItemGroupType() bool {
	if o != nil && !IsNil(o.ItemGroupType) {
		return true
	}

	return false
}

// SetItemGroupType gets a reference to the given string and assigns it to the ItemGroupType field.
func (o *ItemSummary) SetItemGroupType(v string) {
	o.ItemGroupType = &v
}

// GetItemHref returns the ItemHref field value if set, zero value otherwise.
func (o *ItemSummary) GetItemHref() string {
	if o == nil || IsNil(o.ItemHref) {
		var ret string
		return ret
	}
	return *o.ItemHref
}

// GetItemHrefOk returns a tuple with the ItemHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemHrefOk() (*string, bool) {
	if o == nil || IsNil(o.ItemHref) {
		return nil, false
	}
	return o.ItemHref, true
}

// HasItemHref returns a boolean if a field has been set.
func (o *ItemSummary) HasItemHref() bool {
	if o != nil && !IsNil(o.ItemHref) {
		return true
	}

	return false
}

// SetItemHref gets a reference to the given string and assigns it to the ItemHref field.
func (o *ItemSummary) SetItemHref(v string) {
	o.ItemHref = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ItemSummary) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ItemSummary) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ItemSummary) SetItemId(v string) {
	o.ItemId = &v
}

// GetItemLocation returns the ItemLocation field value if set, zero value otherwise.
func (o *ItemSummary) GetItemLocation() ItemLocationImpl {
	if o == nil || IsNil(o.ItemLocation) {
		var ret ItemLocationImpl
		return ret
	}
	return *o.ItemLocation
}

// GetItemLocationOk returns a tuple with the ItemLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemLocationOk() (*ItemLocationImpl, bool) {
	if o == nil || IsNil(o.ItemLocation) {
		return nil, false
	}
	return o.ItemLocation, true
}

// HasItemLocation returns a boolean if a field has been set.
func (o *ItemSummary) HasItemLocation() bool {
	if o != nil && !IsNil(o.ItemLocation) {
		return true
	}

	return false
}

// SetItemLocation gets a reference to the given ItemLocationImpl and assigns it to the ItemLocation field.
func (o *ItemSummary) SetItemLocation(v ItemLocationImpl) {
	o.ItemLocation = &v
}

// GetItemWebUrl returns the ItemWebUrl field value if set, zero value otherwise.
func (o *ItemSummary) GetItemWebUrl() string {
	if o == nil || IsNil(o.ItemWebUrl) {
		var ret string
		return ret
	}
	return *o.ItemWebUrl
}

// GetItemWebUrlOk returns a tuple with the ItemWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetItemWebUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ItemWebUrl) {
		return nil, false
	}
	return o.ItemWebUrl, true
}

// HasItemWebUrl returns a boolean if a field has been set.
func (o *ItemSummary) HasItemWebUrl() bool {
	if o != nil && !IsNil(o.ItemWebUrl) {
		return true
	}

	return false
}

// SetItemWebUrl gets a reference to the given string and assigns it to the ItemWebUrl field.
func (o *ItemSummary) SetItemWebUrl(v string) {
	o.ItemWebUrl = &v
}

// GetLeafCategoryIds returns the LeafCategoryIds field value if set, zero value otherwise.
func (o *ItemSummary) GetLeafCategoryIds() []string {
	if o == nil || IsNil(o.LeafCategoryIds) {
		var ret []string
		return ret
	}
	return o.LeafCategoryIds
}

// GetLeafCategoryIdsOk returns a tuple with the LeafCategoryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetLeafCategoryIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LeafCategoryIds) {
		return nil, false
	}
	return o.LeafCategoryIds, true
}

// HasLeafCategoryIds returns a boolean if a field has been set.
func (o *ItemSummary) HasLeafCategoryIds() bool {
	if o != nil && !IsNil(o.LeafCategoryIds) {
		return true
	}

	return false
}

// SetLeafCategoryIds gets a reference to the given []string and assigns it to the LeafCategoryIds field.
func (o *ItemSummary) SetLeafCategoryIds(v []string) {
	o.LeafCategoryIds = v
}

// GetLegacyItemId returns the LegacyItemId field value if set, zero value otherwise.
func (o *ItemSummary) GetLegacyItemId() string {
	if o == nil || IsNil(o.LegacyItemId) {
		var ret string
		return ret
	}
	return *o.LegacyItemId
}

// GetLegacyItemIdOk returns a tuple with the LegacyItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetLegacyItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyItemId) {
		return nil, false
	}
	return o.LegacyItemId, true
}

// HasLegacyItemId returns a boolean if a field has been set.
func (o *ItemSummary) HasLegacyItemId() bool {
	if o != nil && !IsNil(o.LegacyItemId) {
		return true
	}

	return false
}

// SetLegacyItemId gets a reference to the given string and assigns it to the LegacyItemId field.
func (o *ItemSummary) SetLegacyItemId(v string) {
	o.LegacyItemId = &v
}

// GetListingMarketplaceId returns the ListingMarketplaceId field value if set, zero value otherwise.
func (o *ItemSummary) GetListingMarketplaceId() string {
	if o == nil || IsNil(o.ListingMarketplaceId) {
		var ret string
		return ret
	}
	return *o.ListingMarketplaceId
}

// GetListingMarketplaceIdOk returns a tuple with the ListingMarketplaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetListingMarketplaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ListingMarketplaceId) {
		return nil, false
	}
	return o.ListingMarketplaceId, true
}

// HasListingMarketplaceId returns a boolean if a field has been set.
func (o *ItemSummary) HasListingMarketplaceId() bool {
	if o != nil && !IsNil(o.ListingMarketplaceId) {
		return true
	}

	return false
}

// SetListingMarketplaceId gets a reference to the given string and assigns it to the ListingMarketplaceId field.
func (o *ItemSummary) SetListingMarketplaceId(v string) {
	o.ListingMarketplaceId = &v
}

// GetMarketingPrice returns the MarketingPrice field value if set, zero value otherwise.
func (o *ItemSummary) GetMarketingPrice() MarketingPrice {
	if o == nil || IsNil(o.MarketingPrice) {
		var ret MarketingPrice
		return ret
	}
	return *o.MarketingPrice
}

// GetMarketingPriceOk returns a tuple with the MarketingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetMarketingPriceOk() (*MarketingPrice, bool) {
	if o == nil || IsNil(o.MarketingPrice) {
		return nil, false
	}
	return o.MarketingPrice, true
}

// HasMarketingPrice returns a boolean if a field has been set.
func (o *ItemSummary) HasMarketingPrice() bool {
	if o != nil && !IsNil(o.MarketingPrice) {
		return true
	}

	return false
}

// SetMarketingPrice gets a reference to the given MarketingPrice and assigns it to the MarketingPrice field.
func (o *ItemSummary) SetMarketingPrice(v MarketingPrice) {
	o.MarketingPrice = &v
}

// GetPickupOptions returns the PickupOptions field value if set, zero value otherwise.
func (o *ItemSummary) GetPickupOptions() []PickupOptionSummary {
	if o == nil || IsNil(o.PickupOptions) {
		var ret []PickupOptionSummary
		return ret
	}
	return o.PickupOptions
}

// GetPickupOptionsOk returns a tuple with the PickupOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetPickupOptionsOk() ([]PickupOptionSummary, bool) {
	if o == nil || IsNil(o.PickupOptions) {
		return nil, false
	}
	return o.PickupOptions, true
}

// HasPickupOptions returns a boolean if a field has been set.
func (o *ItemSummary) HasPickupOptions() bool {
	if o != nil && !IsNil(o.PickupOptions) {
		return true
	}

	return false
}

// SetPickupOptions gets a reference to the given []PickupOptionSummary and assigns it to the PickupOptions field.
func (o *ItemSummary) SetPickupOptions(v []PickupOptionSummary) {
	o.PickupOptions = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ItemSummary) GetPrice() ConvertedAmount {
	if o == nil || IsNil(o.Price) {
		var ret ConvertedAmount
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetPriceOk() (*ConvertedAmount, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ItemSummary) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given ConvertedAmount and assigns it to the Price field.
func (o *ItemSummary) SetPrice(v ConvertedAmount) {
	o.Price = &v
}

// GetPriceDisplayCondition returns the PriceDisplayCondition field value if set, zero value otherwise.
func (o *ItemSummary) GetPriceDisplayCondition() string {
	if o == nil || IsNil(o.PriceDisplayCondition) {
		var ret string
		return ret
	}
	return *o.PriceDisplayCondition
}

// GetPriceDisplayConditionOk returns a tuple with the PriceDisplayCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetPriceDisplayConditionOk() (*string, bool) {
	if o == nil || IsNil(o.PriceDisplayCondition) {
		return nil, false
	}
	return o.PriceDisplayCondition, true
}

// HasPriceDisplayCondition returns a boolean if a field has been set.
func (o *ItemSummary) HasPriceDisplayCondition() bool {
	if o != nil && !IsNil(o.PriceDisplayCondition) {
		return true
	}

	return false
}

// SetPriceDisplayCondition gets a reference to the given string and assigns it to the PriceDisplayCondition field.
func (o *ItemSummary) SetPriceDisplayCondition(v string) {
	o.PriceDisplayCondition = &v
}

// GetPriorityListing returns the PriorityListing field value if set, zero value otherwise.
func (o *ItemSummary) GetPriorityListing() bool {
	if o == nil || IsNil(o.PriorityListing) {
		var ret bool
		return ret
	}
	return *o.PriorityListing
}

// GetPriorityListingOk returns a tuple with the PriorityListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetPriorityListingOk() (*bool, bool) {
	if o == nil || IsNil(o.PriorityListing) {
		return nil, false
	}
	return o.PriorityListing, true
}

// HasPriorityListing returns a boolean if a field has been set.
func (o *ItemSummary) HasPriorityListing() bool {
	if o != nil && !IsNil(o.PriorityListing) {
		return true
	}

	return false
}

// SetPriorityListing gets a reference to the given bool and assigns it to the PriorityListing field.
func (o *ItemSummary) SetPriorityListing(v bool) {
	o.PriorityListing = &v
}

// GetQualifiedPrograms returns the QualifiedPrograms field value if set, zero value otherwise.
func (o *ItemSummary) GetQualifiedPrograms() []string {
	if o == nil || IsNil(o.QualifiedPrograms) {
		var ret []string
		return ret
	}
	return o.QualifiedPrograms
}

// GetQualifiedProgramsOk returns a tuple with the QualifiedPrograms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetQualifiedProgramsOk() ([]string, bool) {
	if o == nil || IsNil(o.QualifiedPrograms) {
		return nil, false
	}
	return o.QualifiedPrograms, true
}

// HasQualifiedPrograms returns a boolean if a field has been set.
func (o *ItemSummary) HasQualifiedPrograms() bool {
	if o != nil && !IsNil(o.QualifiedPrograms) {
		return true
	}

	return false
}

// SetQualifiedPrograms gets a reference to the given []string and assigns it to the QualifiedPrograms field.
func (o *ItemSummary) SetQualifiedPrograms(v []string) {
	o.QualifiedPrograms = v
}

// GetSeller returns the Seller field value if set, zero value otherwise.
func (o *ItemSummary) GetSeller() Seller {
	if o == nil || IsNil(o.Seller) {
		var ret Seller
		return ret
	}
	return *o.Seller
}

// GetSellerOk returns a tuple with the Seller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetSellerOk() (*Seller, bool) {
	if o == nil || IsNil(o.Seller) {
		return nil, false
	}
	return o.Seller, true
}

// HasSeller returns a boolean if a field has been set.
func (o *ItemSummary) HasSeller() bool {
	if o != nil && !IsNil(o.Seller) {
		return true
	}

	return false
}

// SetSeller gets a reference to the given Seller and assigns it to the Seller field.
func (o *ItemSummary) SetSeller(v Seller) {
	o.Seller = &v
}

// GetShippingOptions returns the ShippingOptions field value if set, zero value otherwise.
func (o *ItemSummary) GetShippingOptions() []ShippingOptionSummary {
	if o == nil || IsNil(o.ShippingOptions) {
		var ret []ShippingOptionSummary
		return ret
	}
	return o.ShippingOptions
}

// GetShippingOptionsOk returns a tuple with the ShippingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetShippingOptionsOk() ([]ShippingOptionSummary, bool) {
	if o == nil || IsNil(o.ShippingOptions) {
		return nil, false
	}
	return o.ShippingOptions, true
}

// HasShippingOptions returns a boolean if a field has been set.
func (o *ItemSummary) HasShippingOptions() bool {
	if o != nil && !IsNil(o.ShippingOptions) {
		return true
	}

	return false
}

// SetShippingOptions gets a reference to the given []ShippingOptionSummary and assigns it to the ShippingOptions field.
func (o *ItemSummary) SetShippingOptions(v []ShippingOptionSummary) {
	o.ShippingOptions = v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ItemSummary) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ItemSummary) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ItemSummary) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetThumbnailImages returns the ThumbnailImages field value if set, zero value otherwise.
func (o *ItemSummary) GetThumbnailImages() []Image {
	if o == nil || IsNil(o.ThumbnailImages) {
		var ret []Image
		return ret
	}
	return o.ThumbnailImages
}

// GetThumbnailImagesOk returns a tuple with the ThumbnailImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetThumbnailImagesOk() ([]Image, bool) {
	if o == nil || IsNil(o.ThumbnailImages) {
		return nil, false
	}
	return o.ThumbnailImages, true
}

// HasThumbnailImages returns a boolean if a field has been set.
func (o *ItemSummary) HasThumbnailImages() bool {
	if o != nil && !IsNil(o.ThumbnailImages) {
		return true
	}

	return false
}

// SetThumbnailImages gets a reference to the given []Image and assigns it to the ThumbnailImages field.
func (o *ItemSummary) SetThumbnailImages(v []Image) {
	o.ThumbnailImages = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ItemSummary) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ItemSummary) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ItemSummary) SetTitle(v string) {
	o.Title = &v
}

// GetTopRatedBuyingExperience returns the TopRatedBuyingExperience field value if set, zero value otherwise.
func (o *ItemSummary) GetTopRatedBuyingExperience() bool {
	if o == nil || IsNil(o.TopRatedBuyingExperience) {
		var ret bool
		return ret
	}
	return *o.TopRatedBuyingExperience
}

// GetTopRatedBuyingExperienceOk returns a tuple with the TopRatedBuyingExperience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetTopRatedBuyingExperienceOk() (*bool, bool) {
	if o == nil || IsNil(o.TopRatedBuyingExperience) {
		return nil, false
	}
	return o.TopRatedBuyingExperience, true
}

// HasTopRatedBuyingExperience returns a boolean if a field has been set.
func (o *ItemSummary) HasTopRatedBuyingExperience() bool {
	if o != nil && !IsNil(o.TopRatedBuyingExperience) {
		return true
	}

	return false
}

// SetTopRatedBuyingExperience gets a reference to the given bool and assigns it to the TopRatedBuyingExperience field.
func (o *ItemSummary) SetTopRatedBuyingExperience(v bool) {
	o.TopRatedBuyingExperience = &v
}

// GetTyreLabelImageUrl returns the TyreLabelImageUrl field value if set, zero value otherwise.
func (o *ItemSummary) GetTyreLabelImageUrl() string {
	if o == nil || IsNil(o.TyreLabelImageUrl) {
		var ret string
		return ret
	}
	return *o.TyreLabelImageUrl
}

// GetTyreLabelImageUrlOk returns a tuple with the TyreLabelImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetTyreLabelImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TyreLabelImageUrl) {
		return nil, false
	}
	return o.TyreLabelImageUrl, true
}

// HasTyreLabelImageUrl returns a boolean if a field has been set.
func (o *ItemSummary) HasTyreLabelImageUrl() bool {
	if o != nil && !IsNil(o.TyreLabelImageUrl) {
		return true
	}

	return false
}

// SetTyreLabelImageUrl gets a reference to the given string and assigns it to the TyreLabelImageUrl field.
func (o *ItemSummary) SetTyreLabelImageUrl(v string) {
	o.TyreLabelImageUrl = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *ItemSummary) GetUnitPrice() ConvertedAmount {
	if o == nil || IsNil(o.UnitPrice) {
		var ret ConvertedAmount
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetUnitPriceOk() (*ConvertedAmount, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *ItemSummary) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given ConvertedAmount and assigns it to the UnitPrice field.
func (o *ItemSummary) SetUnitPrice(v ConvertedAmount) {
	o.UnitPrice = &v
}

// GetUnitPricingMeasure returns the UnitPricingMeasure field value if set, zero value otherwise.
func (o *ItemSummary) GetUnitPricingMeasure() string {
	if o == nil || IsNil(o.UnitPricingMeasure) {
		var ret string
		return ret
	}
	return *o.UnitPricingMeasure
}

// GetUnitPricingMeasureOk returns a tuple with the UnitPricingMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetUnitPricingMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.UnitPricingMeasure) {
		return nil, false
	}
	return o.UnitPricingMeasure, true
}

// HasUnitPricingMeasure returns a boolean if a field has been set.
func (o *ItemSummary) HasUnitPricingMeasure() bool {
	if o != nil && !IsNil(o.UnitPricingMeasure) {
		return true
	}

	return false
}

// SetUnitPricingMeasure gets a reference to the given string and assigns it to the UnitPricingMeasure field.
func (o *ItemSummary) SetUnitPricingMeasure(v string) {
	o.UnitPricingMeasure = &v
}

// GetWatchCount returns the WatchCount field value if set, zero value otherwise.
func (o *ItemSummary) GetWatchCount() int32 {
	if o == nil || IsNil(o.WatchCount) {
		var ret int32
		return ret
	}
	return *o.WatchCount
}

// GetWatchCountOk returns a tuple with the WatchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemSummary) GetWatchCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WatchCount) {
		return nil, false
	}
	return o.WatchCount, true
}

// HasWatchCount returns a boolean if a field has been set.
func (o *ItemSummary) HasWatchCount() bool {
	if o != nil && !IsNil(o.WatchCount) {
		return true
	}

	return false
}

// SetWatchCount gets a reference to the given int32 and assigns it to the WatchCount field.
func (o *ItemSummary) SetWatchCount(v int32) {
	o.WatchCount = &v
}

func (o ItemSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalImages) {
		toSerialize["additionalImages"] = o.AdditionalImages
	}
	if !IsNil(o.AdultOnly) {
		toSerialize["adultOnly"] = o.AdultOnly
	}
	if !IsNil(o.AvailableCoupons) {
		toSerialize["availableCoupons"] = o.AvailableCoupons
	}
	if !IsNil(o.BidCount) {
		toSerialize["bidCount"] = o.BidCount
	}
	if !IsNil(o.BuyingOptions) {
		toSerialize["buyingOptions"] = o.BuyingOptions
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.CompatibilityMatch) {
		toSerialize["compatibilityMatch"] = o.CompatibilityMatch
	}
	if !IsNil(o.CompatibilityProperties) {
		toSerialize["compatibilityProperties"] = o.CompatibilityProperties
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.ConditionId) {
		toSerialize["conditionId"] = o.ConditionId
	}
	if !IsNil(o.CurrentBidPrice) {
		toSerialize["currentBidPrice"] = o.CurrentBidPrice
	}
	if !IsNil(o.DistanceFromPickupLocation) {
		toSerialize["distanceFromPickupLocation"] = o.DistanceFromPickupLocation
	}
	if !IsNil(o.EnergyEfficiencyClass) {
		toSerialize["energyEfficiencyClass"] = o.EnergyEfficiencyClass
	}
	if !IsNil(o.Epid) {
		toSerialize["epid"] = o.Epid
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.ItemAffiliateWebUrl) {
		toSerialize["itemAffiliateWebUrl"] = o.ItemAffiliateWebUrl
	}
	if !IsNil(o.ItemCreationDate) {
		toSerialize["itemCreationDate"] = o.ItemCreationDate
	}
	if !IsNil(o.ItemEndDate) {
		toSerialize["itemEndDate"] = o.ItemEndDate
	}
	if !IsNil(o.ItemGroupHref) {
		toSerialize["itemGroupHref"] = o.ItemGroupHref
	}
	if !IsNil(o.ItemGroupType) {
		toSerialize["itemGroupType"] = o.ItemGroupType
	}
	if !IsNil(o.ItemHref) {
		toSerialize["itemHref"] = o.ItemHref
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.ItemLocation) {
		toSerialize["itemLocation"] = o.ItemLocation
	}
	if !IsNil(o.ItemWebUrl) {
		toSerialize["itemWebUrl"] = o.ItemWebUrl
	}
	if !IsNil(o.LeafCategoryIds) {
		toSerialize["leafCategoryIds"] = o.LeafCategoryIds
	}
	if !IsNil(o.LegacyItemId) {
		toSerialize["legacyItemId"] = o.LegacyItemId
	}
	if !IsNil(o.ListingMarketplaceId) {
		toSerialize["listingMarketplaceId"] = o.ListingMarketplaceId
	}
	if !IsNil(o.MarketingPrice) {
		toSerialize["marketingPrice"] = o.MarketingPrice
	}
	if !IsNil(o.PickupOptions) {
		toSerialize["pickupOptions"] = o.PickupOptions
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceDisplayCondition) {
		toSerialize["priceDisplayCondition"] = o.PriceDisplayCondition
	}
	if !IsNil(o.PriorityListing) {
		toSerialize["priorityListing"] = o.PriorityListing
	}
	if !IsNil(o.QualifiedPrograms) {
		toSerialize["qualifiedPrograms"] = o.QualifiedPrograms
	}
	if !IsNil(o.Seller) {
		toSerialize["seller"] = o.Seller
	}
	if !IsNil(o.ShippingOptions) {
		toSerialize["shippingOptions"] = o.ShippingOptions
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.ThumbnailImages) {
		toSerialize["thumbnailImages"] = o.ThumbnailImages
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.TopRatedBuyingExperience) {
		toSerialize["topRatedBuyingExperience"] = o.TopRatedBuyingExperience
	}
	if !IsNil(o.TyreLabelImageUrl) {
		toSerialize["tyreLabelImageUrl"] = o.TyreLabelImageUrl
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.UnitPricingMeasure) {
		toSerialize["unitPricingMeasure"] = o.UnitPricingMeasure
	}
	if !IsNil(o.WatchCount) {
		toSerialize["watchCount"] = o.WatchCount
	}
	return toSerialize, nil
}

type NullableItemSummary struct {
	value *ItemSummary
	isSet bool
}

func (v NullableItemSummary) Get() *ItemSummary {
	return v.value
}

func (v *NullableItemSummary) Set(val *ItemSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableItemSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableItemSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemSummary(val *ItemSummary) *NullableItemSummary {
	return &NullableItemSummary{value: val, isSet: true}
}

func (v NullableItemSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


