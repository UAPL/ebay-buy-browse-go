/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the RatingHistogram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatingHistogram{}

// RatingHistogram The type that defines the fields for product ratings. Only products that are in the eBay product catalog can be reviewed and rated.
type RatingHistogram struct {
	// The total number of user ratings that the product has received.
	Count *int32 `json:"count,omitempty"`
	// This is the average rating for the product. As part of a product review, users rate the product. Products are rated from one star (terrible) to five stars (excellent), with each star having a corresponding point value - one star gets 1 point, two stars get 2 points, and so on. If a product had one four-star rating and one five-star rating, its average rating would be <code> 4.5</code>, and this is the value that would appear in this field.
	Rating *string `json:"rating,omitempty"`
}

// NewRatingHistogram instantiates a new RatingHistogram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatingHistogram() *RatingHistogram {
	this := RatingHistogram{}
	return &this
}

// NewRatingHistogramWithDefaults instantiates a new RatingHistogram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingHistogramWithDefaults() *RatingHistogram {
	this := RatingHistogram{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RatingHistogram) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatingHistogram) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RatingHistogram) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RatingHistogram) SetCount(v int32) {
	o.Count = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *RatingHistogram) GetRating() string {
	if o == nil || IsNil(o.Rating) {
		var ret string
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatingHistogram) GetRatingOk() (*string, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *RatingHistogram) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given string and assigns it to the Rating field.
func (o *RatingHistogram) SetRating(v string) {
	o.Rating = &v
}

func (o RatingHistogram) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatingHistogram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	return toSerialize, nil
}

type NullableRatingHistogram struct {
	value *RatingHistogram
	isSet bool
}

func (v NullableRatingHistogram) Get() *RatingHistogram {
	return v.value
}

func (v *NullableRatingHistogram) Set(val *RatingHistogram) {
	v.value = val
	v.isSet = true
}

func (v NullableRatingHistogram) IsSet() bool {
	return v.isSet
}

func (v *NullableRatingHistogram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatingHistogram(val *RatingHistogram) *NullableRatingHistogram {
	return &NullableRatingHistogram{value: val, isSet: true}
}

func (v NullableRatingHistogram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatingHistogram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


