/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the ConditionDistribution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionDistribution{}

// ConditionDistribution The container that defines the fields for the conditions refinements. This container is returned when <code>fieldgroups</code> is set to <code>CONDITION_REFINEMENTS</code> or <code>FULL</code> in the request.
type ConditionDistribution struct {
	// The text describing the condition of the item, such as <i>New</i> or <i>Used</i>. For a list of condition names, refer to <a href=\"/devzone/finding/callref/enums/conditionIdList.html \" target=\"_blank\">Item Condition IDs and Names</a>.
	Condition *string `json:"condition,omitempty"`
	// The identifier of the condition. For example, <code>1000</code> is the identifier for <code>NEW</code>.
	ConditionId *string `json:"conditionId,omitempty"`
	// The number of items having the condition.
	MatchCount *int32 `json:"matchCount,omitempty"`
	// The HATEOAS reference of this condition.
	RefinementHref *string `json:"refinementHref,omitempty"`
}

// NewConditionDistribution instantiates a new ConditionDistribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionDistribution() *ConditionDistribution {
	this := ConditionDistribution{}
	return &this
}

// NewConditionDistributionWithDefaults instantiates a new ConditionDistribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionDistributionWithDefaults() *ConditionDistribution {
	this := ConditionDistribution{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ConditionDistribution) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ConditionDistribution) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *ConditionDistribution) SetCondition(v string) {
	o.Condition = &v
}

// GetConditionId returns the ConditionId field value if set, zero value otherwise.
func (o *ConditionDistribution) GetConditionId() string {
	if o == nil || IsNil(o.ConditionId) {
		var ret string
		return ret
	}
	return *o.ConditionId
}

// GetConditionIdOk returns a tuple with the ConditionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetConditionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionId) {
		return nil, false
	}
	return o.ConditionId, true
}

// HasConditionId returns a boolean if a field has been set.
func (o *ConditionDistribution) HasConditionId() bool {
	if o != nil && !IsNil(o.ConditionId) {
		return true
	}

	return false
}

// SetConditionId gets a reference to the given string and assigns it to the ConditionId field.
func (o *ConditionDistribution) SetConditionId(v string) {
	o.ConditionId = &v
}

// GetMatchCount returns the MatchCount field value if set, zero value otherwise.
func (o *ConditionDistribution) GetMatchCount() int32 {
	if o == nil || IsNil(o.MatchCount) {
		var ret int32
		return ret
	}
	return *o.MatchCount
}

// GetMatchCountOk returns a tuple with the MatchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetMatchCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchCount) {
		return nil, false
	}
	return o.MatchCount, true
}

// HasMatchCount returns a boolean if a field has been set.
func (o *ConditionDistribution) HasMatchCount() bool {
	if o != nil && !IsNil(o.MatchCount) {
		return true
	}

	return false
}

// SetMatchCount gets a reference to the given int32 and assigns it to the MatchCount field.
func (o *ConditionDistribution) SetMatchCount(v int32) {
	o.MatchCount = &v
}

// GetRefinementHref returns the RefinementHref field value if set, zero value otherwise.
func (o *ConditionDistribution) GetRefinementHref() string {
	if o == nil || IsNil(o.RefinementHref) {
		var ret string
		return ret
	}
	return *o.RefinementHref
}

// GetRefinementHrefOk returns a tuple with the RefinementHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetRefinementHrefOk() (*string, bool) {
	if o == nil || IsNil(o.RefinementHref) {
		return nil, false
	}
	return o.RefinementHref, true
}

// HasRefinementHref returns a boolean if a field has been set.
func (o *ConditionDistribution) HasRefinementHref() bool {
	if o != nil && !IsNil(o.RefinementHref) {
		return true
	}

	return false
}

// SetRefinementHref gets a reference to the given string and assigns it to the RefinementHref field.
func (o *ConditionDistribution) SetRefinementHref(v string) {
	o.RefinementHref = &v
}

func (o ConditionDistribution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionDistribution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.ConditionId) {
		toSerialize["conditionId"] = o.ConditionId
	}
	if !IsNil(o.MatchCount) {
		toSerialize["matchCount"] = o.MatchCount
	}
	if !IsNil(o.RefinementHref) {
		toSerialize["refinementHref"] = o.RefinementHref
	}
	return toSerialize, nil
}

type NullableConditionDistribution struct {
	value *ConditionDistribution
	isSet bool
}

func (v NullableConditionDistribution) Get() *ConditionDistribution {
	return v.value
}

func (v *NullableConditionDistribution) Set(val *ConditionDistribution) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionDistribution(val *ConditionDistribution) *NullableConditionDistribution {
	return &NullableConditionDistribution{value: val, isSet: true}
}

func (v NullableConditionDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


