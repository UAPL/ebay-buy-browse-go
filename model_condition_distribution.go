/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// ConditionDistribution The container that defines the fields for the conditions refinements. This container is returned when <b> fieldgroups</b> is set to <code>CONDITION_REFINEMENTS</code> or <code>FULL</code> in the request.
type ConditionDistribution struct {
	// The text describing the condition of the item, such as New or Used. For a list of condition names, see <a href=\"https://developer.ebay.com/devzone/finding/callref/enums/conditionIdList.html\" target=\"_blank\">Item Condition IDs and Names</a>.  <br /><br />Code so that your app gracefully handles any future changes to this list.<br /><br /><span class=\"tablenote\"><b> Note: </b>As of September 1, 2021, condition ID 2500 ('Seller Refurbished') is no longer a valid item condition in the <b>Cell Phones & Smartphones</b> category (category ID 9355) for the following marketplaces: US, Canada, UK, Germany, and Australia. This refurbished item condition has been replaced by three new refurbished values, which include 'Excellent - Refurbished' (condition ID 2010), 'Very Good - Refurbished' (condition ID 2020), and 'Good - Refurbished' (condition ID 2030).</span>
	Condition *string `json:"condition,omitempty"`
	// The identifier of the condition. For example, 1000 is the identifier for NEW.<br /><br /><span class=\"tablenote\"><b> Note: </b>As of September 1, 2021, condition ID 2500 ('Seller Refurbished') is no longer a valid item condition in the <b>Cell Phones & Smartphones</b> category (category ID 9355) for the following marketplaces: US, Canada, UK, Germany, and Australia. This refurbished item condition has been replaced by three new refurbished values, which include 'Excellent - Refurbished' (condition ID 2010), 'Very Good - Refurbished' (condition ID 2020), and 'Good - Refurbished' (condition ID 2030).</span>
	ConditionId *string `json:"conditionId,omitempty"`
	// The number of items having the condition.
	MatchCount *int32 `json:"matchCount,omitempty"`
	// The HATEOAS reference of this condition.
	RefinementHref *string `json:"refinementHref,omitempty"`
}

// NewConditionDistribution instantiates a new ConditionDistribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionDistribution() *ConditionDistribution {
	this := ConditionDistribution{}
	return &this
}

// NewConditionDistributionWithDefaults instantiates a new ConditionDistribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionDistributionWithDefaults() *ConditionDistribution {
	this := ConditionDistribution{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ConditionDistribution) GetCondition() string {
	if o == nil || o.Condition == nil {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetConditionOk() (*string, bool) {
	if o == nil || o.Condition == nil {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ConditionDistribution) HasCondition() bool {
	if o != nil && o.Condition != nil {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *ConditionDistribution) SetCondition(v string) {
	o.Condition = &v
}

// GetConditionId returns the ConditionId field value if set, zero value otherwise.
func (o *ConditionDistribution) GetConditionId() string {
	if o == nil || o.ConditionId == nil {
		var ret string
		return ret
	}
	return *o.ConditionId
}

// GetConditionIdOk returns a tuple with the ConditionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetConditionIdOk() (*string, bool) {
	if o == nil || o.ConditionId == nil {
		return nil, false
	}
	return o.ConditionId, true
}

// HasConditionId returns a boolean if a field has been set.
func (o *ConditionDistribution) HasConditionId() bool {
	if o != nil && o.ConditionId != nil {
		return true
	}

	return false
}

// SetConditionId gets a reference to the given string and assigns it to the ConditionId field.
func (o *ConditionDistribution) SetConditionId(v string) {
	o.ConditionId = &v
}

// GetMatchCount returns the MatchCount field value if set, zero value otherwise.
func (o *ConditionDistribution) GetMatchCount() int32 {
	if o == nil || o.MatchCount == nil {
		var ret int32
		return ret
	}
	return *o.MatchCount
}

// GetMatchCountOk returns a tuple with the MatchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetMatchCountOk() (*int32, bool) {
	if o == nil || o.MatchCount == nil {
		return nil, false
	}
	return o.MatchCount, true
}

// HasMatchCount returns a boolean if a field has been set.
func (o *ConditionDistribution) HasMatchCount() bool {
	if o != nil && o.MatchCount != nil {
		return true
	}

	return false
}

// SetMatchCount gets a reference to the given int32 and assigns it to the MatchCount field.
func (o *ConditionDistribution) SetMatchCount(v int32) {
	o.MatchCount = &v
}

// GetRefinementHref returns the RefinementHref field value if set, zero value otherwise.
func (o *ConditionDistribution) GetRefinementHref() string {
	if o == nil || o.RefinementHref == nil {
		var ret string
		return ret
	}
	return *o.RefinementHref
}

// GetRefinementHrefOk returns a tuple with the RefinementHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionDistribution) GetRefinementHrefOk() (*string, bool) {
	if o == nil || o.RefinementHref == nil {
		return nil, false
	}
	return o.RefinementHref, true
}

// HasRefinementHref returns a boolean if a field has been set.
func (o *ConditionDistribution) HasRefinementHref() bool {
	if o != nil && o.RefinementHref != nil {
		return true
	}

	return false
}

// SetRefinementHref gets a reference to the given string and assigns it to the RefinementHref field.
func (o *ConditionDistribution) SetRefinementHref(v string) {
	o.RefinementHref = &v
}

func (o ConditionDistribution) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	if o.ConditionId != nil {
		toSerialize["conditionId"] = o.ConditionId
	}
	if o.MatchCount != nil {
		toSerialize["matchCount"] = o.MatchCount
	}
	if o.RefinementHref != nil {
		toSerialize["refinementHref"] = o.RefinementHref
	}
	return json.Marshal(toSerialize)
}

type NullableConditionDistribution struct {
	value *ConditionDistribution
	isSet bool
}

func (v NullableConditionDistribution) Get() *ConditionDistribution {
	return v.value
}

func (v *NullableConditionDistribution) Set(val *ConditionDistribution) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionDistribution(val *ConditionDistribution) *NullableConditionDistribution {
	return &NullableConditionDistribution{value: val, isSet: true}
}

func (v NullableConditionDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


