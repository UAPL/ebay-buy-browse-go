/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the HazardousMaterialsLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HazardousMaterialsLabels{}

// HazardousMaterialsLabels A type that defines the hazardous materials labels for an item.
type HazardousMaterialsLabels struct {
	// Additional information about the hazardous materials labels.
	AdditionalInformation *string `json:"additionalInformation,omitempty"`
	// An array of hazard pictograms that apply to the item.
	Pictograms []HazardPictogram `json:"pictograms,omitempty"`
	// The signal word for the hazardous materials label (such as Danger or Warning).
	SignalWord *string `json:"signalWord,omitempty"`
	// The ID of the signal word for the hazardous materials label.
	SignalWordId *string `json:"signalWordId,omitempty"`
	// An array of hazard statements for the item.
	Statements []HazardStatement `json:"statements,omitempty"`
}

// NewHazardousMaterialsLabels instantiates a new HazardousMaterialsLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHazardousMaterialsLabels() *HazardousMaterialsLabels {
	this := HazardousMaterialsLabels{}
	return &this
}

// NewHazardousMaterialsLabelsWithDefaults instantiates a new HazardousMaterialsLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHazardousMaterialsLabelsWithDefaults() *HazardousMaterialsLabels {
	this := HazardousMaterialsLabels{}
	return &this
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *HazardousMaterialsLabels) GetAdditionalInformation() string {
	if o == nil || IsNil(o.AdditionalInformation) {
		var ret string
		return ret
	}
	return *o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardousMaterialsLabels) GetAdditionalInformationOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInformation) {
		return nil, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *HazardousMaterialsLabels) HasAdditionalInformation() bool {
	if o != nil && !IsNil(o.AdditionalInformation) {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given string and assigns it to the AdditionalInformation field.
func (o *HazardousMaterialsLabels) SetAdditionalInformation(v string) {
	o.AdditionalInformation = &v
}

// GetPictograms returns the Pictograms field value if set, zero value otherwise.
func (o *HazardousMaterialsLabels) GetPictograms() []HazardPictogram {
	if o == nil || IsNil(o.Pictograms) {
		var ret []HazardPictogram
		return ret
	}
	return o.Pictograms
}

// GetPictogramsOk returns a tuple with the Pictograms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardousMaterialsLabels) GetPictogramsOk() ([]HazardPictogram, bool) {
	if o == nil || IsNil(o.Pictograms) {
		return nil, false
	}
	return o.Pictograms, true
}

// HasPictograms returns a boolean if a field has been set.
func (o *HazardousMaterialsLabels) HasPictograms() bool {
	if o != nil && !IsNil(o.Pictograms) {
		return true
	}

	return false
}

// SetPictograms gets a reference to the given []HazardPictogram and assigns it to the Pictograms field.
func (o *HazardousMaterialsLabels) SetPictograms(v []HazardPictogram) {
	o.Pictograms = v
}

// GetSignalWord returns the SignalWord field value if set, zero value otherwise.
func (o *HazardousMaterialsLabels) GetSignalWord() string {
	if o == nil || IsNil(o.SignalWord) {
		var ret string
		return ret
	}
	return *o.SignalWord
}

// GetSignalWordOk returns a tuple with the SignalWord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardousMaterialsLabels) GetSignalWordOk() (*string, bool) {
	if o == nil || IsNil(o.SignalWord) {
		return nil, false
	}
	return o.SignalWord, true
}

// HasSignalWord returns a boolean if a field has been set.
func (o *HazardousMaterialsLabels) HasSignalWord() bool {
	if o != nil && !IsNil(o.SignalWord) {
		return true
	}

	return false
}

// SetSignalWord gets a reference to the given string and assigns it to the SignalWord field.
func (o *HazardousMaterialsLabels) SetSignalWord(v string) {
	o.SignalWord = &v
}

// GetSignalWordId returns the SignalWordId field value if set, zero value otherwise.
func (o *HazardousMaterialsLabels) GetSignalWordId() string {
	if o == nil || IsNil(o.SignalWordId) {
		var ret string
		return ret
	}
	return *o.SignalWordId
}

// GetSignalWordIdOk returns a tuple with the SignalWordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardousMaterialsLabels) GetSignalWordIdOk() (*string, bool) {
	if o == nil || IsNil(o.SignalWordId) {
		return nil, false
	}
	return o.SignalWordId, true
}

// HasSignalWordId returns a boolean if a field has been set.
func (o *HazardousMaterialsLabels) HasSignalWordId() bool {
	if o != nil && !IsNil(o.SignalWordId) {
		return true
	}

	return false
}

// SetSignalWordId gets a reference to the given string and assigns it to the SignalWordId field.
func (o *HazardousMaterialsLabels) SetSignalWordId(v string) {
	o.SignalWordId = &v
}

// GetStatements returns the Statements field value if set, zero value otherwise.
func (o *HazardousMaterialsLabels) GetStatements() []HazardStatement {
	if o == nil || IsNil(o.Statements) {
		var ret []HazardStatement
		return ret
	}
	return o.Statements
}

// GetStatementsOk returns a tuple with the Statements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardousMaterialsLabels) GetStatementsOk() ([]HazardStatement, bool) {
	if o == nil || IsNil(o.Statements) {
		return nil, false
	}
	return o.Statements, true
}

// HasStatements returns a boolean if a field has been set.
func (o *HazardousMaterialsLabels) HasStatements() bool {
	if o != nil && !IsNil(o.Statements) {
		return true
	}

	return false
}

// SetStatements gets a reference to the given []HazardStatement and assigns it to the Statements field.
func (o *HazardousMaterialsLabels) SetStatements(v []HazardStatement) {
	o.Statements = v
}

func (o HazardousMaterialsLabels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HazardousMaterialsLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalInformation) {
		toSerialize["additionalInformation"] = o.AdditionalInformation
	}
	if !IsNil(o.Pictograms) {
		toSerialize["pictograms"] = o.Pictograms
	}
	if !IsNil(o.SignalWord) {
		toSerialize["signalWord"] = o.SignalWord
	}
	if !IsNil(o.SignalWordId) {
		toSerialize["signalWordId"] = o.SignalWordId
	}
	if !IsNil(o.Statements) {
		toSerialize["statements"] = o.Statements
	}
	return toSerialize, nil
}

type NullableHazardousMaterialsLabels struct {
	value *HazardousMaterialsLabels
	isSet bool
}

func (v NullableHazardousMaterialsLabels) Get() *HazardousMaterialsLabels {
	return v.value
}

func (v *NullableHazardousMaterialsLabels) Set(val *HazardousMaterialsLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableHazardousMaterialsLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableHazardousMaterialsLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHazardousMaterialsLabels(val *HazardousMaterialsLabels) *NullableHazardousMaterialsLabels {
	return &NullableHazardousMaterialsLabels{value: val, isSet: true}
}

func (v NullableHazardousMaterialsLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHazardousMaterialsLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


