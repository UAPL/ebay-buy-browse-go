/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the SellerLegalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SellerLegalInfo{}

// SellerLegalInfo The type that defines the fields for the contact information for a seller.
type SellerLegalInfo struct {
	// The seller's business email address.
	Email *string `json:"email,omitempty"`
	// The seller' business fax number.
	Fax *string `json:"fax,omitempty"`
	// This is a free-form string created by the seller. This is information often found on business cards, such as address. This is information used by some countries.
	Imprint *string `json:"imprint,omitempty"`
	// The seller's first name.
	LegalContactFirstName *string `json:"legalContactFirstName,omitempty"`
	// The seller's last name.
	LegalContactLastName *string `json:"legalContactLastName,omitempty"`
	// The name of the seller's business.
	Name *string `json:"name,omitempty"`
	// The seller's business phone number.
	Phone *string `json:"phone,omitempty"`
	// The seller's registration number. This is information used by some countries.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`
	SellerProvidedLegalAddress *LegalAddress `json:"sellerProvidedLegalAddress,omitempty"`
	// This is a free-form string created by the seller. This is the seller's terms or condition, which is in addition to the seller's return policies.
	TermsOfService *string `json:"termsOfService,omitempty"`
	// An array of the seller's VAT (value added tax) IDs and the issuing country. VAT is a tax added by some European countries.
	VatDetails []VatDetail `json:"vatDetails,omitempty"`
	EconomicOperator *EconomicOperator `json:"economicOperator,omitempty"`
	// The Waste Electrical and Electronic Equipment (WEEE) registration number required for any seller to place electrical and electronic equipment on the market in Germany. This manufacturer number is assigned to the first distributors of electrical and electronic equipment and comprises a country code and an 8-digit sequence of digits (e.g. “WEEE Reg. No. DE 12345678”).
	WeeeNumber *string `json:"weeeNumber,omitempty"`
}

// NewSellerLegalInfo instantiates a new SellerLegalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSellerLegalInfo() *SellerLegalInfo {
	this := SellerLegalInfo{}
	return &this
}

// NewSellerLegalInfoWithDefaults instantiates a new SellerLegalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellerLegalInfoWithDefaults() *SellerLegalInfo {
	this := SellerLegalInfo{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SellerLegalInfo) SetEmail(v string) {
	o.Email = &v
}

// GetFax returns the Fax field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetFax() string {
	if o == nil || IsNil(o.Fax) {
		var ret string
		return ret
	}
	return *o.Fax
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetFaxOk() (*string, bool) {
	if o == nil || IsNil(o.Fax) {
		return nil, false
	}
	return o.Fax, true
}

// HasFax returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasFax() bool {
	if o != nil && !IsNil(o.Fax) {
		return true
	}

	return false
}

// SetFax gets a reference to the given string and assigns it to the Fax field.
func (o *SellerLegalInfo) SetFax(v string) {
	o.Fax = &v
}

// GetImprint returns the Imprint field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetImprint() string {
	if o == nil || IsNil(o.Imprint) {
		var ret string
		return ret
	}
	return *o.Imprint
}

// GetImprintOk returns a tuple with the Imprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetImprintOk() (*string, bool) {
	if o == nil || IsNil(o.Imprint) {
		return nil, false
	}
	return o.Imprint, true
}

// HasImprint returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasImprint() bool {
	if o != nil && !IsNil(o.Imprint) {
		return true
	}

	return false
}

// SetImprint gets a reference to the given string and assigns it to the Imprint field.
func (o *SellerLegalInfo) SetImprint(v string) {
	o.Imprint = &v
}

// GetLegalContactFirstName returns the LegalContactFirstName field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetLegalContactFirstName() string {
	if o == nil || IsNil(o.LegalContactFirstName) {
		var ret string
		return ret
	}
	return *o.LegalContactFirstName
}

// GetLegalContactFirstNameOk returns a tuple with the LegalContactFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetLegalContactFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.LegalContactFirstName) {
		return nil, false
	}
	return o.LegalContactFirstName, true
}

// HasLegalContactFirstName returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasLegalContactFirstName() bool {
	if o != nil && !IsNil(o.LegalContactFirstName) {
		return true
	}

	return false
}

// SetLegalContactFirstName gets a reference to the given string and assigns it to the LegalContactFirstName field.
func (o *SellerLegalInfo) SetLegalContactFirstName(v string) {
	o.LegalContactFirstName = &v
}

// GetLegalContactLastName returns the LegalContactLastName field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetLegalContactLastName() string {
	if o == nil || IsNil(o.LegalContactLastName) {
		var ret string
		return ret
	}
	return *o.LegalContactLastName
}

// GetLegalContactLastNameOk returns a tuple with the LegalContactLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetLegalContactLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LegalContactLastName) {
		return nil, false
	}
	return o.LegalContactLastName, true
}

// HasLegalContactLastName returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasLegalContactLastName() bool {
	if o != nil && !IsNil(o.LegalContactLastName) {
		return true
	}

	return false
}

// SetLegalContactLastName gets a reference to the given string and assigns it to the LegalContactLastName field.
func (o *SellerLegalInfo) SetLegalContactLastName(v string) {
	o.LegalContactLastName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SellerLegalInfo) SetName(v string) {
	o.Name = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *SellerLegalInfo) SetPhone(v string) {
	o.Phone = &v
}

// GetRegistrationNumber returns the RegistrationNumber field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetRegistrationNumber() string {
	if o == nil || IsNil(o.RegistrationNumber) {
		var ret string
		return ret
	}
	return *o.RegistrationNumber
}

// GetRegistrationNumberOk returns a tuple with the RegistrationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetRegistrationNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrationNumber) {
		return nil, false
	}
	return o.RegistrationNumber, true
}

// HasRegistrationNumber returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasRegistrationNumber() bool {
	if o != nil && !IsNil(o.RegistrationNumber) {
		return true
	}

	return false
}

// SetRegistrationNumber gets a reference to the given string and assigns it to the RegistrationNumber field.
func (o *SellerLegalInfo) SetRegistrationNumber(v string) {
	o.RegistrationNumber = &v
}

// GetSellerProvidedLegalAddress returns the SellerProvidedLegalAddress field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetSellerProvidedLegalAddress() LegalAddress {
	if o == nil || IsNil(o.SellerProvidedLegalAddress) {
		var ret LegalAddress
		return ret
	}
	return *o.SellerProvidedLegalAddress
}

// GetSellerProvidedLegalAddressOk returns a tuple with the SellerProvidedLegalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetSellerProvidedLegalAddressOk() (*LegalAddress, bool) {
	if o == nil || IsNil(o.SellerProvidedLegalAddress) {
		return nil, false
	}
	return o.SellerProvidedLegalAddress, true
}

// HasSellerProvidedLegalAddress returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasSellerProvidedLegalAddress() bool {
	if o != nil && !IsNil(o.SellerProvidedLegalAddress) {
		return true
	}

	return false
}

// SetSellerProvidedLegalAddress gets a reference to the given LegalAddress and assigns it to the SellerProvidedLegalAddress field.
func (o *SellerLegalInfo) SetSellerProvidedLegalAddress(v LegalAddress) {
	o.SellerProvidedLegalAddress = &v
}

// GetTermsOfService returns the TermsOfService field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetTermsOfService() string {
	if o == nil || IsNil(o.TermsOfService) {
		var ret string
		return ret
	}
	return *o.TermsOfService
}

// GetTermsOfServiceOk returns a tuple with the TermsOfService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetTermsOfServiceOk() (*string, bool) {
	if o == nil || IsNil(o.TermsOfService) {
		return nil, false
	}
	return o.TermsOfService, true
}

// HasTermsOfService returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasTermsOfService() bool {
	if o != nil && !IsNil(o.TermsOfService) {
		return true
	}

	return false
}

// SetTermsOfService gets a reference to the given string and assigns it to the TermsOfService field.
func (o *SellerLegalInfo) SetTermsOfService(v string) {
	o.TermsOfService = &v
}

// GetVatDetails returns the VatDetails field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetVatDetails() []VatDetail {
	if o == nil || IsNil(o.VatDetails) {
		var ret []VatDetail
		return ret
	}
	return o.VatDetails
}

// GetVatDetailsOk returns a tuple with the VatDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetVatDetailsOk() ([]VatDetail, bool) {
	if o == nil || IsNil(o.VatDetails) {
		return nil, false
	}
	return o.VatDetails, true
}

// HasVatDetails returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasVatDetails() bool {
	if o != nil && !IsNil(o.VatDetails) {
		return true
	}

	return false
}

// SetVatDetails gets a reference to the given []VatDetail and assigns it to the VatDetails field.
func (o *SellerLegalInfo) SetVatDetails(v []VatDetail) {
	o.VatDetails = v
}

// GetEconomicOperator returns the EconomicOperator field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetEconomicOperator() EconomicOperator {
	if o == nil || IsNil(o.EconomicOperator) {
		var ret EconomicOperator
		return ret
	}
	return *o.EconomicOperator
}

// GetEconomicOperatorOk returns a tuple with the EconomicOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetEconomicOperatorOk() (*EconomicOperator, bool) {
	if o == nil || IsNil(o.EconomicOperator) {
		return nil, false
	}
	return o.EconomicOperator, true
}

// HasEconomicOperator returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasEconomicOperator() bool {
	if o != nil && !IsNil(o.EconomicOperator) {
		return true
	}

	return false
}

// SetEconomicOperator gets a reference to the given EconomicOperator and assigns it to the EconomicOperator field.
func (o *SellerLegalInfo) SetEconomicOperator(v EconomicOperator) {
	o.EconomicOperator = &v
}

// GetWeeeNumber returns the WeeeNumber field value if set, zero value otherwise.
func (o *SellerLegalInfo) GetWeeeNumber() string {
	if o == nil || IsNil(o.WeeeNumber) {
		var ret string
		return ret
	}
	return *o.WeeeNumber
}

// GetWeeeNumberOk returns a tuple with the WeeeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellerLegalInfo) GetWeeeNumberOk() (*string, bool) {
	if o == nil || IsNil(o.WeeeNumber) {
		return nil, false
	}
	return o.WeeeNumber, true
}

// HasWeeeNumber returns a boolean if a field has been set.
func (o *SellerLegalInfo) HasWeeeNumber() bool {
	if o != nil && !IsNil(o.WeeeNumber) {
		return true
	}

	return false
}

// SetWeeeNumber gets a reference to the given string and assigns it to the WeeeNumber field.
func (o *SellerLegalInfo) SetWeeeNumber(v string) {
	o.WeeeNumber = &v
}

func (o SellerLegalInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SellerLegalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Fax) {
		toSerialize["fax"] = o.Fax
	}
	if !IsNil(o.Imprint) {
		toSerialize["imprint"] = o.Imprint
	}
	if !IsNil(o.LegalContactFirstName) {
		toSerialize["legalContactFirstName"] = o.LegalContactFirstName
	}
	if !IsNil(o.LegalContactLastName) {
		toSerialize["legalContactLastName"] = o.LegalContactLastName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.RegistrationNumber) {
		toSerialize["registrationNumber"] = o.RegistrationNumber
	}
	if !IsNil(o.SellerProvidedLegalAddress) {
		toSerialize["sellerProvidedLegalAddress"] = o.SellerProvidedLegalAddress
	}
	if !IsNil(o.TermsOfService) {
		toSerialize["termsOfService"] = o.TermsOfService
	}
	if !IsNil(o.VatDetails) {
		toSerialize["vatDetails"] = o.VatDetails
	}
	if !IsNil(o.EconomicOperator) {
		toSerialize["economicOperator"] = o.EconomicOperator
	}
	if !IsNil(o.WeeeNumber) {
		toSerialize["weeeNumber"] = o.WeeeNumber
	}
	return toSerialize, nil
}

type NullableSellerLegalInfo struct {
	value *SellerLegalInfo
	isSet bool
}

func (v NullableSellerLegalInfo) Get() *SellerLegalInfo {
	return v.value
}

func (v *NullableSellerLegalInfo) Set(val *SellerLegalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSellerLegalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSellerLegalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSellerLegalInfo(val *SellerLegalInfo) *NullableSellerLegalInfo {
	return &NullableSellerLegalInfo{value: val, isSet: true}
}

func (v NullableSellerLegalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSellerLegalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


