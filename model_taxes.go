/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the Taxes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Taxes{}

// Taxes The type that defines the tax fields.
type Taxes struct {
	// This field is only returned if <code>true</code>, and indicates that eBay will collect tax (sales tax, Goods and Services tax, or VAT) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence. 
	EbayCollectAndRemitTax *bool `json:"ebayCollectAndRemitTax,omitempty"`
	// This indicates if tax was applied for the cost of the item.
	IncludedInPrice *bool `json:"includedInPrice,omitempty"`
	// This indicates if tax is applied for the shipping cost.
	ShippingAndHandlingTaxed *bool `json:"shippingAndHandlingTaxed,omitempty"`
	TaxJurisdiction *TaxJurisdiction `json:"taxJurisdiction,omitempty"`
	// The percentage of tax.
	TaxPercentage *string `json:"taxPercentage,omitempty"`
	// This field indicates the type of tax that may be collected for the item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:TaxType'>eBay API documentation</a>
	TaxType *string `json:"taxType,omitempty"`
}

// NewTaxes instantiates a new Taxes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxes() *Taxes {
	this := Taxes{}
	return &this
}

// NewTaxesWithDefaults instantiates a new Taxes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxesWithDefaults() *Taxes {
	this := Taxes{}
	return &this
}

// GetEbayCollectAndRemitTax returns the EbayCollectAndRemitTax field value if set, zero value otherwise.
func (o *Taxes) GetEbayCollectAndRemitTax() bool {
	if o == nil || IsNil(o.EbayCollectAndRemitTax) {
		var ret bool
		return ret
	}
	return *o.EbayCollectAndRemitTax
}

// GetEbayCollectAndRemitTaxOk returns a tuple with the EbayCollectAndRemitTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taxes) GetEbayCollectAndRemitTaxOk() (*bool, bool) {
	if o == nil || IsNil(o.EbayCollectAndRemitTax) {
		return nil, false
	}
	return o.EbayCollectAndRemitTax, true
}

// HasEbayCollectAndRemitTax returns a boolean if a field has been set.
func (o *Taxes) HasEbayCollectAndRemitTax() bool {
	if o != nil && !IsNil(o.EbayCollectAndRemitTax) {
		return true
	}

	return false
}

// SetEbayCollectAndRemitTax gets a reference to the given bool and assigns it to the EbayCollectAndRemitTax field.
func (o *Taxes) SetEbayCollectAndRemitTax(v bool) {
	o.EbayCollectAndRemitTax = &v
}

// GetIncludedInPrice returns the IncludedInPrice field value if set, zero value otherwise.
func (o *Taxes) GetIncludedInPrice() bool {
	if o == nil || IsNil(o.IncludedInPrice) {
		var ret bool
		return ret
	}
	return *o.IncludedInPrice
}

// GetIncludedInPriceOk returns a tuple with the IncludedInPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taxes) GetIncludedInPriceOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedInPrice) {
		return nil, false
	}
	return o.IncludedInPrice, true
}

// HasIncludedInPrice returns a boolean if a field has been set.
func (o *Taxes) HasIncludedInPrice() bool {
	if o != nil && !IsNil(o.IncludedInPrice) {
		return true
	}

	return false
}

// SetIncludedInPrice gets a reference to the given bool and assigns it to the IncludedInPrice field.
func (o *Taxes) SetIncludedInPrice(v bool) {
	o.IncludedInPrice = &v
}

// GetShippingAndHandlingTaxed returns the ShippingAndHandlingTaxed field value if set, zero value otherwise.
func (o *Taxes) GetShippingAndHandlingTaxed() bool {
	if o == nil || IsNil(o.ShippingAndHandlingTaxed) {
		var ret bool
		return ret
	}
	return *o.ShippingAndHandlingTaxed
}

// GetShippingAndHandlingTaxedOk returns a tuple with the ShippingAndHandlingTaxed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taxes) GetShippingAndHandlingTaxedOk() (*bool, bool) {
	if o == nil || IsNil(o.ShippingAndHandlingTaxed) {
		return nil, false
	}
	return o.ShippingAndHandlingTaxed, true
}

// HasShippingAndHandlingTaxed returns a boolean if a field has been set.
func (o *Taxes) HasShippingAndHandlingTaxed() bool {
	if o != nil && !IsNil(o.ShippingAndHandlingTaxed) {
		return true
	}

	return false
}

// SetShippingAndHandlingTaxed gets a reference to the given bool and assigns it to the ShippingAndHandlingTaxed field.
func (o *Taxes) SetShippingAndHandlingTaxed(v bool) {
	o.ShippingAndHandlingTaxed = &v
}

// GetTaxJurisdiction returns the TaxJurisdiction field value if set, zero value otherwise.
func (o *Taxes) GetTaxJurisdiction() TaxJurisdiction {
	if o == nil || IsNil(o.TaxJurisdiction) {
		var ret TaxJurisdiction
		return ret
	}
	return *o.TaxJurisdiction
}

// GetTaxJurisdictionOk returns a tuple with the TaxJurisdiction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taxes) GetTaxJurisdictionOk() (*TaxJurisdiction, bool) {
	if o == nil || IsNil(o.TaxJurisdiction) {
		return nil, false
	}
	return o.TaxJurisdiction, true
}

// HasTaxJurisdiction returns a boolean if a field has been set.
func (o *Taxes) HasTaxJurisdiction() bool {
	if o != nil && !IsNil(o.TaxJurisdiction) {
		return true
	}

	return false
}

// SetTaxJurisdiction gets a reference to the given TaxJurisdiction and assigns it to the TaxJurisdiction field.
func (o *Taxes) SetTaxJurisdiction(v TaxJurisdiction) {
	o.TaxJurisdiction = &v
}

// GetTaxPercentage returns the TaxPercentage field value if set, zero value otherwise.
func (o *Taxes) GetTaxPercentage() string {
	if o == nil || IsNil(o.TaxPercentage) {
		var ret string
		return ret
	}
	return *o.TaxPercentage
}

// GetTaxPercentageOk returns a tuple with the TaxPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taxes) GetTaxPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.TaxPercentage) {
		return nil, false
	}
	return o.TaxPercentage, true
}

// HasTaxPercentage returns a boolean if a field has been set.
func (o *Taxes) HasTaxPercentage() bool {
	if o != nil && !IsNil(o.TaxPercentage) {
		return true
	}

	return false
}

// SetTaxPercentage gets a reference to the given string and assigns it to the TaxPercentage field.
func (o *Taxes) SetTaxPercentage(v string) {
	o.TaxPercentage = &v
}

// GetTaxType returns the TaxType field value if set, zero value otherwise.
func (o *Taxes) GetTaxType() string {
	if o == nil || IsNil(o.TaxType) {
		var ret string
		return ret
	}
	return *o.TaxType
}

// GetTaxTypeOk returns a tuple with the TaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Taxes) GetTaxTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TaxType) {
		return nil, false
	}
	return o.TaxType, true
}

// HasTaxType returns a boolean if a field has been set.
func (o *Taxes) HasTaxType() bool {
	if o != nil && !IsNil(o.TaxType) {
		return true
	}

	return false
}

// SetTaxType gets a reference to the given string and assigns it to the TaxType field.
func (o *Taxes) SetTaxType(v string) {
	o.TaxType = &v
}

func (o Taxes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Taxes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EbayCollectAndRemitTax) {
		toSerialize["ebayCollectAndRemitTax"] = o.EbayCollectAndRemitTax
	}
	if !IsNil(o.IncludedInPrice) {
		toSerialize["includedInPrice"] = o.IncludedInPrice
	}
	if !IsNil(o.ShippingAndHandlingTaxed) {
		toSerialize["shippingAndHandlingTaxed"] = o.ShippingAndHandlingTaxed
	}
	if !IsNil(o.TaxJurisdiction) {
		toSerialize["taxJurisdiction"] = o.TaxJurisdiction
	}
	if !IsNil(o.TaxPercentage) {
		toSerialize["taxPercentage"] = o.TaxPercentage
	}
	if !IsNil(o.TaxType) {
		toSerialize["taxType"] = o.TaxType
	}
	return toSerialize, nil
}

type NullableTaxes struct {
	value *Taxes
	isSet bool
}

func (v NullableTaxes) Get() *Taxes {
	return v.value
}

func (v *NullableTaxes) Set(val *Taxes) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxes) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxes(val *Taxes) *NullableTaxes {
	return &NullableTaxes{value: val, isSet: true}
}

func (v NullableTaxes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


