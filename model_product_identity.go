/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the ProductIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductIdentity{}

// ProductIdentity The type that defines the fields for the product identifier type/value pairs of product associated with an item.
type ProductIdentity struct {
	// The type of product identifier, such as UPC and EAN.
	IdentifierType *string `json:"identifierType,omitempty"`
	// The product identifier value.
	IdentifierValue *string `json:"identifierValue,omitempty"`
}

// NewProductIdentity instantiates a new ProductIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductIdentity() *ProductIdentity {
	this := ProductIdentity{}
	return &this
}

// NewProductIdentityWithDefaults instantiates a new ProductIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductIdentityWithDefaults() *ProductIdentity {
	this := ProductIdentity{}
	return &this
}

// GetIdentifierType returns the IdentifierType field value if set, zero value otherwise.
func (o *ProductIdentity) GetIdentifierType() string {
	if o == nil || IsNil(o.IdentifierType) {
		var ret string
		return ret
	}
	return *o.IdentifierType
}

// GetIdentifierTypeOk returns a tuple with the IdentifierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductIdentity) GetIdentifierTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifierType) {
		return nil, false
	}
	return o.IdentifierType, true
}

// HasIdentifierType returns a boolean if a field has been set.
func (o *ProductIdentity) HasIdentifierType() bool {
	if o != nil && !IsNil(o.IdentifierType) {
		return true
	}

	return false
}

// SetIdentifierType gets a reference to the given string and assigns it to the IdentifierType field.
func (o *ProductIdentity) SetIdentifierType(v string) {
	o.IdentifierType = &v
}

// GetIdentifierValue returns the IdentifierValue field value if set, zero value otherwise.
func (o *ProductIdentity) GetIdentifierValue() string {
	if o == nil || IsNil(o.IdentifierValue) {
		var ret string
		return ret
	}
	return *o.IdentifierValue
}

// GetIdentifierValueOk returns a tuple with the IdentifierValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductIdentity) GetIdentifierValueOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifierValue) {
		return nil, false
	}
	return o.IdentifierValue, true
}

// HasIdentifierValue returns a boolean if a field has been set.
func (o *ProductIdentity) HasIdentifierValue() bool {
	if o != nil && !IsNil(o.IdentifierValue) {
		return true
	}

	return false
}

// SetIdentifierValue gets a reference to the given string and assigns it to the IdentifierValue field.
func (o *ProductIdentity) SetIdentifierValue(v string) {
	o.IdentifierValue = &v
}

func (o ProductIdentity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IdentifierType) {
		toSerialize["identifierType"] = o.IdentifierType
	}
	if !IsNil(o.IdentifierValue) {
		toSerialize["identifierValue"] = o.IdentifierValue
	}
	return toSerialize, nil
}

type NullableProductIdentity struct {
	value *ProductIdentity
	isSet bool
}

func (v NullableProductIdentity) Get() *ProductIdentity {
	return v.value
}

func (v *NullableProductIdentity) Set(val *ProductIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableProductIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableProductIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductIdentity(val *ProductIdentity) *NullableProductIdentity {
	return &NullableProductIdentity{value: val, isSet: true}
}

func (v NullableProductIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


