/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the CouponConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouponConstraint{}

// CouponConstraint This type is used to provide the expiration date of a coded coupon.
type CouponConstraint struct {
	// This timestamp provides the expiration date of the coded coupon.
	ExpirationDate *string `json:"expirationDate,omitempty"`
}

// NewCouponConstraint instantiates a new CouponConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouponConstraint() *CouponConstraint {
	this := CouponConstraint{}
	return &this
}

// NewCouponConstraintWithDefaults instantiates a new CouponConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouponConstraintWithDefaults() *CouponConstraint {
	this := CouponConstraint{}
	return &this
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *CouponConstraint) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponConstraint) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *CouponConstraint) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *CouponConstraint) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

func (o CouponConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouponConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	return toSerialize, nil
}

type NullableCouponConstraint struct {
	value *CouponConstraint
	isSet bool
}

func (v NullableCouponConstraint) Get() *CouponConstraint {
	return v.value
}

func (v *NullableCouponConstraint) Set(val *CouponConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableCouponConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableCouponConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouponConstraint(val *CouponConstraint) *NullableCouponConstraint {
	return &NullableCouponConstraint{value: val, isSet: true}
}

func (v NullableCouponConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouponConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


