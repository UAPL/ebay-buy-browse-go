/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// ItemReturnTerms The type that defines the fields for the seller's return policy.
type ItemReturnTerms struct {
	// This indicates if the seller has enabled the Extended Holiday Returns feature on the item. Extended Holiday Returns are only applicable during the US holiday season, and gives buyers extra time to return an item. This 'extra time' will typically extend beyond what is set through the <b> returnPeriod</b> value.
	ExtendedHolidayReturnsOffered *bool `json:"extendedHolidayReturnsOffered,omitempty"`
	// An enumeration value that indicates how a buyer is refunded when an item is returned. <br><br><b> Valid Values: </b> MONEY_BACK or MERCHANDISE_CREDIT  <br /><br />Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:RefundMethodEnum'>eBay API documentation</a>
	RefundMethod *string `json:"refundMethod,omitempty"`
	// This string field indicates the restocking fee percentage that the seller has set on the item. Sellers have the option of setting no restocking fee for an item, or they can set the percentage to 10, 15, or 20 percent. So, if the cost of the item was $100, and the restocking percentage was 20 percent, the buyer would be charged $20 to return that item, so instead of receiving a $100 refund, they would receive $80 due to the restocking fee.
	RestockingFeePercentage *string `json:"restockingFeePercentage,omitempty"`
	// Text written by the seller describing what the buyer needs to do in order to return the item.
	ReturnInstructions *string `json:"returnInstructions,omitempty"`
	// An enumeration value that indicates the alternative methods for a full refund when an item is returned. This field is returned if the seller offers the buyer an item replacement or exchange instead of a monetary refund. <br><br><b> Valid Values: </b>  <ul><li><b> REPLACEMENT</b> -  Indicates that the buyer has the option of receiving money back for the returned item, or they can choose to have the seller replace the item with an identical item.</li>  <li><b> EXCHANGE</b> - Indicates that the buyer has the option of receiving money back for the returned item, or they can exchange the item for another similar item.</li></ul>  Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnMethodEnum'>eBay API documentation</a>
	ReturnMethod *string `json:"returnMethod,omitempty"`
	ReturnPeriod *TimeDuration `json:"returnPeriod,omitempty"`
	// Indicates whether the seller accepts returns for the item.
	ReturnsAccepted *bool `json:"returnsAccepted,omitempty"`
	// This enumeration value indicates whether the buyer or seller is responsible for return shipping costs when an item is returned. <br><br><b> Valid Values: </b> <ul><li><b> SELLER</b> - Indicates the seller will pay for the shipping costs to return the item.</li>  <li><b> BUYER</b> - Indicates the buyer will pay for the shipping costs to return the item.</li>  </ul>  Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:ReturnShippingCostPayerEnum'>eBay API documentation</a>
	ReturnShippingCostPayer *string `json:"returnShippingCostPayer,omitempty"`
}

// NewItemReturnTerms instantiates a new ItemReturnTerms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemReturnTerms() *ItemReturnTerms {
	this := ItemReturnTerms{}
	return &this
}

// NewItemReturnTermsWithDefaults instantiates a new ItemReturnTerms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemReturnTermsWithDefaults() *ItemReturnTerms {
	this := ItemReturnTerms{}
	return &this
}

// GetExtendedHolidayReturnsOffered returns the ExtendedHolidayReturnsOffered field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetExtendedHolidayReturnsOffered() bool {
	if o == nil || o.ExtendedHolidayReturnsOffered == nil {
		var ret bool
		return ret
	}
	return *o.ExtendedHolidayReturnsOffered
}

// GetExtendedHolidayReturnsOfferedOk returns a tuple with the ExtendedHolidayReturnsOffered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetExtendedHolidayReturnsOfferedOk() (*bool, bool) {
	if o == nil || o.ExtendedHolidayReturnsOffered == nil {
		return nil, false
	}
	return o.ExtendedHolidayReturnsOffered, true
}

// HasExtendedHolidayReturnsOffered returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasExtendedHolidayReturnsOffered() bool {
	if o != nil && o.ExtendedHolidayReturnsOffered != nil {
		return true
	}

	return false
}

// SetExtendedHolidayReturnsOffered gets a reference to the given bool and assigns it to the ExtendedHolidayReturnsOffered field.
func (o *ItemReturnTerms) SetExtendedHolidayReturnsOffered(v bool) {
	o.ExtendedHolidayReturnsOffered = &v
}

// GetRefundMethod returns the RefundMethod field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetRefundMethod() string {
	if o == nil || o.RefundMethod == nil {
		var ret string
		return ret
	}
	return *o.RefundMethod
}

// GetRefundMethodOk returns a tuple with the RefundMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetRefundMethodOk() (*string, bool) {
	if o == nil || o.RefundMethod == nil {
		return nil, false
	}
	return o.RefundMethod, true
}

// HasRefundMethod returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasRefundMethod() bool {
	if o != nil && o.RefundMethod != nil {
		return true
	}

	return false
}

// SetRefundMethod gets a reference to the given string and assigns it to the RefundMethod field.
func (o *ItemReturnTerms) SetRefundMethod(v string) {
	o.RefundMethod = &v
}

// GetRestockingFeePercentage returns the RestockingFeePercentage field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetRestockingFeePercentage() string {
	if o == nil || o.RestockingFeePercentage == nil {
		var ret string
		return ret
	}
	return *o.RestockingFeePercentage
}

// GetRestockingFeePercentageOk returns a tuple with the RestockingFeePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetRestockingFeePercentageOk() (*string, bool) {
	if o == nil || o.RestockingFeePercentage == nil {
		return nil, false
	}
	return o.RestockingFeePercentage, true
}

// HasRestockingFeePercentage returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasRestockingFeePercentage() bool {
	if o != nil && o.RestockingFeePercentage != nil {
		return true
	}

	return false
}

// SetRestockingFeePercentage gets a reference to the given string and assigns it to the RestockingFeePercentage field.
func (o *ItemReturnTerms) SetRestockingFeePercentage(v string) {
	o.RestockingFeePercentage = &v
}

// GetReturnInstructions returns the ReturnInstructions field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetReturnInstructions() string {
	if o == nil || o.ReturnInstructions == nil {
		var ret string
		return ret
	}
	return *o.ReturnInstructions
}

// GetReturnInstructionsOk returns a tuple with the ReturnInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetReturnInstructionsOk() (*string, bool) {
	if o == nil || o.ReturnInstructions == nil {
		return nil, false
	}
	return o.ReturnInstructions, true
}

// HasReturnInstructions returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasReturnInstructions() bool {
	if o != nil && o.ReturnInstructions != nil {
		return true
	}

	return false
}

// SetReturnInstructions gets a reference to the given string and assigns it to the ReturnInstructions field.
func (o *ItemReturnTerms) SetReturnInstructions(v string) {
	o.ReturnInstructions = &v
}

// GetReturnMethod returns the ReturnMethod field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetReturnMethod() string {
	if o == nil || o.ReturnMethod == nil {
		var ret string
		return ret
	}
	return *o.ReturnMethod
}

// GetReturnMethodOk returns a tuple with the ReturnMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetReturnMethodOk() (*string, bool) {
	if o == nil || o.ReturnMethod == nil {
		return nil, false
	}
	return o.ReturnMethod, true
}

// HasReturnMethod returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasReturnMethod() bool {
	if o != nil && o.ReturnMethod != nil {
		return true
	}

	return false
}

// SetReturnMethod gets a reference to the given string and assigns it to the ReturnMethod field.
func (o *ItemReturnTerms) SetReturnMethod(v string) {
	o.ReturnMethod = &v
}

// GetReturnPeriod returns the ReturnPeriod field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetReturnPeriod() TimeDuration {
	if o == nil || o.ReturnPeriod == nil {
		var ret TimeDuration
		return ret
	}
	return *o.ReturnPeriod
}

// GetReturnPeriodOk returns a tuple with the ReturnPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetReturnPeriodOk() (*TimeDuration, bool) {
	if o == nil || o.ReturnPeriod == nil {
		return nil, false
	}
	return o.ReturnPeriod, true
}

// HasReturnPeriod returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasReturnPeriod() bool {
	if o != nil && o.ReturnPeriod != nil {
		return true
	}

	return false
}

// SetReturnPeriod gets a reference to the given TimeDuration and assigns it to the ReturnPeriod field.
func (o *ItemReturnTerms) SetReturnPeriod(v TimeDuration) {
	o.ReturnPeriod = &v
}

// GetReturnsAccepted returns the ReturnsAccepted field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetReturnsAccepted() bool {
	if o == nil || o.ReturnsAccepted == nil {
		var ret bool
		return ret
	}
	return *o.ReturnsAccepted
}

// GetReturnsAcceptedOk returns a tuple with the ReturnsAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetReturnsAcceptedOk() (*bool, bool) {
	if o == nil || o.ReturnsAccepted == nil {
		return nil, false
	}
	return o.ReturnsAccepted, true
}

// HasReturnsAccepted returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasReturnsAccepted() bool {
	if o != nil && o.ReturnsAccepted != nil {
		return true
	}

	return false
}

// SetReturnsAccepted gets a reference to the given bool and assigns it to the ReturnsAccepted field.
func (o *ItemReturnTerms) SetReturnsAccepted(v bool) {
	o.ReturnsAccepted = &v
}

// GetReturnShippingCostPayer returns the ReturnShippingCostPayer field value if set, zero value otherwise.
func (o *ItemReturnTerms) GetReturnShippingCostPayer() string {
	if o == nil || o.ReturnShippingCostPayer == nil {
		var ret string
		return ret
	}
	return *o.ReturnShippingCostPayer
}

// GetReturnShippingCostPayerOk returns a tuple with the ReturnShippingCostPayer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemReturnTerms) GetReturnShippingCostPayerOk() (*string, bool) {
	if o == nil || o.ReturnShippingCostPayer == nil {
		return nil, false
	}
	return o.ReturnShippingCostPayer, true
}

// HasReturnShippingCostPayer returns a boolean if a field has been set.
func (o *ItemReturnTerms) HasReturnShippingCostPayer() bool {
	if o != nil && o.ReturnShippingCostPayer != nil {
		return true
	}

	return false
}

// SetReturnShippingCostPayer gets a reference to the given string and assigns it to the ReturnShippingCostPayer field.
func (o *ItemReturnTerms) SetReturnShippingCostPayer(v string) {
	o.ReturnShippingCostPayer = &v
}

func (o ItemReturnTerms) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExtendedHolidayReturnsOffered != nil {
		toSerialize["extendedHolidayReturnsOffered"] = o.ExtendedHolidayReturnsOffered
	}
	if o.RefundMethod != nil {
		toSerialize["refundMethod"] = o.RefundMethod
	}
	if o.RestockingFeePercentage != nil {
		toSerialize["restockingFeePercentage"] = o.RestockingFeePercentage
	}
	if o.ReturnInstructions != nil {
		toSerialize["returnInstructions"] = o.ReturnInstructions
	}
	if o.ReturnMethod != nil {
		toSerialize["returnMethod"] = o.ReturnMethod
	}
	if o.ReturnPeriod != nil {
		toSerialize["returnPeriod"] = o.ReturnPeriod
	}
	if o.ReturnsAccepted != nil {
		toSerialize["returnsAccepted"] = o.ReturnsAccepted
	}
	if o.ReturnShippingCostPayer != nil {
		toSerialize["returnShippingCostPayer"] = o.ReturnShippingCostPayer
	}
	return json.Marshal(toSerialize)
}

type NullableItemReturnTerms struct {
	value *ItemReturnTerms
	isSet bool
}

func (v NullableItemReturnTerms) Get() *ItemReturnTerms {
	return v.value
}

func (v *NullableItemReturnTerms) Set(val *ItemReturnTerms) {
	v.value = val
	v.isSet = true
}

func (v NullableItemReturnTerms) IsSet() bool {
	return v.isSet
}

func (v *NullableItemReturnTerms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemReturnTerms(val *ItemReturnTerms) *NullableItemReturnTerms {
	return &NullableItemReturnTerms{value: val, isSet: true}
}

func (v NullableItemReturnTerms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemReturnTerms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


