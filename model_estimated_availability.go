/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// EstimatedAvailability The type that defines the fields for the estimated item availability information.
type EstimatedAvailability struct {
	// This field is return only when the seller sets their '<a href=\"#display-item-quantity\">display item quantity</a>' preference to <b> Display \"More than 10 available\" in your listing (if applicable)</b>. The value of this field will be \"10\", which is the threshold value. <br /><br />Code so that your app gracefully handles any future changes to this value.
	AvailabilityThreshold *int32 `json:"availabilityThreshold,omitempty"`
	// <a name=\"display-item-quantity\"></a> This field is return only when the seller sets their <b> Display Item Quantity</b> preference to <b> Display \"More than 10 available\" in your listing (if applicable)</b>. The value of this field will be <code> MORE_THAN</code>. This indicates that the seller has more than the 'quantity display preference', which is 10, in stock for this item.    <br /><br /> The following are the display item quantity preferences the seller can set. <br /><ul><li> <b> Display \"More than 10 available\" in your listing (if applicable) </b><ul> <li>If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory.</li>  <li> If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the <b> estimatedAvailableQuantity</b> field.</li></ul> </li> <li> <b> Display the exact quantity in your items</b> <br />If the seller enables this preference, the <b> availabilityThresholdType</b> and <b> availabilityThreshold</b> fields are not returned and the estimated quantity of the item is returned in the <b> estimatedAvailableQuantity</b> field.<br /><br /><b> Note: </b> Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. </li></ul>   <br />Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityThresholdEnum'>eBay API documentation</a>
	AvailabilityThresholdType *string `json:"availabilityThresholdType,omitempty"`
	// An array of available delivery options. <br><br><b> Valid Values: </b> SHIP_TO_HOME, SELLER_ARRANGED_LOCAL_PICKUP, IN_STORE_PICKUP, PICKUP_DROP_OFF, or DIGITAL_DELIVERY <br /><br />Code so that your app gracefully handles any future changes to this list. 
	DeliveryOptions *[]string `json:"deliveryOptions,omitempty"`
	// An enumeration value representing the inventory status of this item.<br /><br /><span class=\"tablenote\"><b> Note: </b>Be sure to review the <b>itemEndDate</b> field to determine whether the item is available for purchase.</span><br><br><b> Valid Values: </b> IN_STOCK, LIMITED_STOCK, or OUT_OF_STOCK <br /><br />Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityStatusEnum'>eBay API documentation</a>
	EstimatedAvailabilityStatus *string `json:"estimatedAvailabilityStatus,omitempty"`
	// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
	EstimatedAvailableQuantity *int32 `json:"estimatedAvailableQuantity,omitempty"`
	// The estimated number of this item that have been sold.
	EstimatedSoldQuantity *int32 `json:"estimatedSoldQuantity,omitempty"`
}

// NewEstimatedAvailability instantiates a new EstimatedAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedAvailability() *EstimatedAvailability {
	this := EstimatedAvailability{}
	return &this
}

// NewEstimatedAvailabilityWithDefaults instantiates a new EstimatedAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedAvailabilityWithDefaults() *EstimatedAvailability {
	this := EstimatedAvailability{}
	return &this
}

// GetAvailabilityThreshold returns the AvailabilityThreshold field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetAvailabilityThreshold() int32 {
	if o == nil || o.AvailabilityThreshold == nil {
		var ret int32
		return ret
	}
	return *o.AvailabilityThreshold
}

// GetAvailabilityThresholdOk returns a tuple with the AvailabilityThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetAvailabilityThresholdOk() (*int32, bool) {
	if o == nil || o.AvailabilityThreshold == nil {
		return nil, false
	}
	return o.AvailabilityThreshold, true
}

// HasAvailabilityThreshold returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasAvailabilityThreshold() bool {
	if o != nil && o.AvailabilityThreshold != nil {
		return true
	}

	return false
}

// SetAvailabilityThreshold gets a reference to the given int32 and assigns it to the AvailabilityThreshold field.
func (o *EstimatedAvailability) SetAvailabilityThreshold(v int32) {
	o.AvailabilityThreshold = &v
}

// GetAvailabilityThresholdType returns the AvailabilityThresholdType field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetAvailabilityThresholdType() string {
	if o == nil || o.AvailabilityThresholdType == nil {
		var ret string
		return ret
	}
	return *o.AvailabilityThresholdType
}

// GetAvailabilityThresholdTypeOk returns a tuple with the AvailabilityThresholdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetAvailabilityThresholdTypeOk() (*string, bool) {
	if o == nil || o.AvailabilityThresholdType == nil {
		return nil, false
	}
	return o.AvailabilityThresholdType, true
}

// HasAvailabilityThresholdType returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasAvailabilityThresholdType() bool {
	if o != nil && o.AvailabilityThresholdType != nil {
		return true
	}

	return false
}

// SetAvailabilityThresholdType gets a reference to the given string and assigns it to the AvailabilityThresholdType field.
func (o *EstimatedAvailability) SetAvailabilityThresholdType(v string) {
	o.AvailabilityThresholdType = &v
}

// GetDeliveryOptions returns the DeliveryOptions field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetDeliveryOptions() []string {
	if o == nil || o.DeliveryOptions == nil {
		var ret []string
		return ret
	}
	return *o.DeliveryOptions
}

// GetDeliveryOptionsOk returns a tuple with the DeliveryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetDeliveryOptionsOk() (*[]string, bool) {
	if o == nil || o.DeliveryOptions == nil {
		return nil, false
	}
	return o.DeliveryOptions, true
}

// HasDeliveryOptions returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasDeliveryOptions() bool {
	if o != nil && o.DeliveryOptions != nil {
		return true
	}

	return false
}

// SetDeliveryOptions gets a reference to the given []string and assigns it to the DeliveryOptions field.
func (o *EstimatedAvailability) SetDeliveryOptions(v []string) {
	o.DeliveryOptions = &v
}

// GetEstimatedAvailabilityStatus returns the EstimatedAvailabilityStatus field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetEstimatedAvailabilityStatus() string {
	if o == nil || o.EstimatedAvailabilityStatus == nil {
		var ret string
		return ret
	}
	return *o.EstimatedAvailabilityStatus
}

// GetEstimatedAvailabilityStatusOk returns a tuple with the EstimatedAvailabilityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetEstimatedAvailabilityStatusOk() (*string, bool) {
	if o == nil || o.EstimatedAvailabilityStatus == nil {
		return nil, false
	}
	return o.EstimatedAvailabilityStatus, true
}

// HasEstimatedAvailabilityStatus returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasEstimatedAvailabilityStatus() bool {
	if o != nil && o.EstimatedAvailabilityStatus != nil {
		return true
	}

	return false
}

// SetEstimatedAvailabilityStatus gets a reference to the given string and assigns it to the EstimatedAvailabilityStatus field.
func (o *EstimatedAvailability) SetEstimatedAvailabilityStatus(v string) {
	o.EstimatedAvailabilityStatus = &v
}

// GetEstimatedAvailableQuantity returns the EstimatedAvailableQuantity field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetEstimatedAvailableQuantity() int32 {
	if o == nil || o.EstimatedAvailableQuantity == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedAvailableQuantity
}

// GetEstimatedAvailableQuantityOk returns a tuple with the EstimatedAvailableQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetEstimatedAvailableQuantityOk() (*int32, bool) {
	if o == nil || o.EstimatedAvailableQuantity == nil {
		return nil, false
	}
	return o.EstimatedAvailableQuantity, true
}

// HasEstimatedAvailableQuantity returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasEstimatedAvailableQuantity() bool {
	if o != nil && o.EstimatedAvailableQuantity != nil {
		return true
	}

	return false
}

// SetEstimatedAvailableQuantity gets a reference to the given int32 and assigns it to the EstimatedAvailableQuantity field.
func (o *EstimatedAvailability) SetEstimatedAvailableQuantity(v int32) {
	o.EstimatedAvailableQuantity = &v
}

// GetEstimatedSoldQuantity returns the EstimatedSoldQuantity field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetEstimatedSoldQuantity() int32 {
	if o == nil || o.EstimatedSoldQuantity == nil {
		var ret int32
		return ret
	}
	return *o.EstimatedSoldQuantity
}

// GetEstimatedSoldQuantityOk returns a tuple with the EstimatedSoldQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetEstimatedSoldQuantityOk() (*int32, bool) {
	if o == nil || o.EstimatedSoldQuantity == nil {
		return nil, false
	}
	return o.EstimatedSoldQuantity, true
}

// HasEstimatedSoldQuantity returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasEstimatedSoldQuantity() bool {
	if o != nil && o.EstimatedSoldQuantity != nil {
		return true
	}

	return false
}

// SetEstimatedSoldQuantity gets a reference to the given int32 and assigns it to the EstimatedSoldQuantity field.
func (o *EstimatedAvailability) SetEstimatedSoldQuantity(v int32) {
	o.EstimatedSoldQuantity = &v
}

func (o EstimatedAvailability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailabilityThreshold != nil {
		toSerialize["availabilityThreshold"] = o.AvailabilityThreshold
	}
	if o.AvailabilityThresholdType != nil {
		toSerialize["availabilityThresholdType"] = o.AvailabilityThresholdType
	}
	if o.DeliveryOptions != nil {
		toSerialize["deliveryOptions"] = o.DeliveryOptions
	}
	if o.EstimatedAvailabilityStatus != nil {
		toSerialize["estimatedAvailabilityStatus"] = o.EstimatedAvailabilityStatus
	}
	if o.EstimatedAvailableQuantity != nil {
		toSerialize["estimatedAvailableQuantity"] = o.EstimatedAvailableQuantity
	}
	if o.EstimatedSoldQuantity != nil {
		toSerialize["estimatedSoldQuantity"] = o.EstimatedSoldQuantity
	}
	return json.Marshal(toSerialize)
}

type NullableEstimatedAvailability struct {
	value *EstimatedAvailability
	isSet bool
}

func (v NullableEstimatedAvailability) Get() *EstimatedAvailability {
	return v.value
}

func (v *NullableEstimatedAvailability) Set(val *EstimatedAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedAvailability(val *EstimatedAvailability) *NullableEstimatedAvailability {
	return &NullableEstimatedAvailability{value: val, isSet: true}
}

func (v NullableEstimatedAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


