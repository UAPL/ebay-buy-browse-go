/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the EstimatedAvailability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimatedAvailability{}

// EstimatedAvailability The type that defines the fields for the estimated item availability information.
type EstimatedAvailability struct {
	// This field is return only when the seller sets their '<a href=\"#display-item-quantity\">display item quantity</a>' preference to <b> Display \"More than 10 available\" in your listing (if applicable)</b>. The value of this field will be \"10\", which is the threshold value. <br><br>Code so that your app gracefully handles any future changes to this value.
	AvailabilityThreshold *int32 `json:"availabilityThreshold,omitempty"`
	// <a name=\"display-item-quantity\"></a> This field is return only when the seller sets their <b> Display Item Quantity</b> preference to <b> Display \"More than 10 available\" in your listing (if applicable)</b>. The value of this field will be <code> MORE_THAN</code>. This indicates that the seller has more than the 'quantity display preference', which is 10, in stock for this item.    <br><br> The following are the display item quantity preferences the seller can set. <br><ul><li> <b> Display \"More than 10 available\" in your listing (if applicable) </b><ul> <li>If the seller enables this preference, this field is returned as long as there are more than 10 of this item in inventory.</li>  <li> If the quantity is equal to 10 or drops below 10, this field is not returned and the estimated quantity of the item is returned in the <b> estimatedAvailableQuantity</b> field.</li></ul> </li> <li> <b> Display the exact quantity in your items</b> <br>If the seller enables this preference, the <b> availabilityThresholdType</b> and <b> availabilityThreshold</b> fields are not returned and the estimated quantity of the item is returned in the <b> estimatedAvailableQuantity</b> field.<br><br><b> Note: </b> Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. </li></ul>   <br>Code so that your app gracefully handles any future changes to these preferences. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityThresholdEnum'>eBay API documentation</a>
	AvailabilityThresholdType *string `json:"availabilityThresholdType,omitempty"`
	// An array of available delivery options. <br><br><b> Valid Values: </b> SHIP_TO_HOME, SELLER_ARRANGED_LOCAL_PICKUP, IN_STORE_PICKUP, PICKUP_DROP_OFF, or DIGITAL_DELIVERY <br><br>Code so that your app gracefully handles any future changes to this list. 
	DeliveryOptions []string `json:"deliveryOptions,omitempty"`
	// An enumeration value representing the inventory status of this item.<br><br><span class=\"tablenote\"><b> Note: </b>Be sure to review the <b>itemEndDate</b> field to determine whether the item is available for purchase.</span><br><br><b> Valid Values: </b> IN_STOCK, LIMITED_STOCK, or OUT_OF_STOCK <br><br>Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:AvailabilityStatusEnum'>eBay API documentation</a>
	EstimatedAvailabilityStatus *string `json:"estimatedAvailabilityStatus,omitempty"`
	// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.<br><br><span class=\"tablenote\"><b>Note:</b> To see if a listing is available for purchase, review the <a href=\"/api-docs/buy/browse/resources/item/methods/getItem#response.itemEndDate\">itemEndDate</a> and <a href=\"/api-docs/buy/browse/resources/item/methods/getItem#response.estimatedAvailabilities.estimatedAvailabilityStatus\">estimatedAvailablityStatus</a> fields. If the item has an <b>EndDate</b> in the past, or the <b>estimatedAvailabilityStatus</b> is <code>OUT_OF_STOCK</code>, the item is unavailable for purchase.</span>
	EstimatedAvailableQuantity *int32 `json:"estimatedAvailableQuantity,omitempty"`
	// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.<br><br><span class=\"tablenote\"><b>Note:</b> To see if a listing is available for purchase, review the <a href=\"/api-docs/buy/browse/resources/item/methods/getItem#response.itemEndDate\">itemEndDate</a> and <a href=\"/api-docs/buy/browse/resources/item/methods/getItem#response.estimatedAvailabilities.estimatedAvailabilityStatus\">estimatedAvailablityStatus</a> fields. If the item has an <b>EndDate</b> in the past, or the <b>estimatedAvailabilityStatus</b> is <code>OUT_OF_STOCK</code>, the item is unavailable for purchase.</span>
	EstimatedRemainingQuantity *int32 `json:"estimatedRemainingQuantity,omitempty"`
	// The estimated number of this item that have been sold.
	EstimatedSoldQuantity *int32 `json:"estimatedSoldQuantity,omitempty"`
}

// NewEstimatedAvailability instantiates a new EstimatedAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedAvailability() *EstimatedAvailability {
	this := EstimatedAvailability{}
	return &this
}

// NewEstimatedAvailabilityWithDefaults instantiates a new EstimatedAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedAvailabilityWithDefaults() *EstimatedAvailability {
	this := EstimatedAvailability{}
	return &this
}

// GetAvailabilityThreshold returns the AvailabilityThreshold field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetAvailabilityThreshold() int32 {
	if o == nil || IsNil(o.AvailabilityThreshold) {
		var ret int32
		return ret
	}
	return *o.AvailabilityThreshold
}

// GetAvailabilityThresholdOk returns a tuple with the AvailabilityThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetAvailabilityThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailabilityThreshold) {
		return nil, false
	}
	return o.AvailabilityThreshold, true
}

// HasAvailabilityThreshold returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasAvailabilityThreshold() bool {
	if o != nil && !IsNil(o.AvailabilityThreshold) {
		return true
	}

	return false
}

// SetAvailabilityThreshold gets a reference to the given int32 and assigns it to the AvailabilityThreshold field.
func (o *EstimatedAvailability) SetAvailabilityThreshold(v int32) {
	o.AvailabilityThreshold = &v
}

// GetAvailabilityThresholdType returns the AvailabilityThresholdType field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetAvailabilityThresholdType() string {
	if o == nil || IsNil(o.AvailabilityThresholdType) {
		var ret string
		return ret
	}
	return *o.AvailabilityThresholdType
}

// GetAvailabilityThresholdTypeOk returns a tuple with the AvailabilityThresholdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetAvailabilityThresholdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AvailabilityThresholdType) {
		return nil, false
	}
	return o.AvailabilityThresholdType, true
}

// HasAvailabilityThresholdType returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasAvailabilityThresholdType() bool {
	if o != nil && !IsNil(o.AvailabilityThresholdType) {
		return true
	}

	return false
}

// SetAvailabilityThresholdType gets a reference to the given string and assigns it to the AvailabilityThresholdType field.
func (o *EstimatedAvailability) SetAvailabilityThresholdType(v string) {
	o.AvailabilityThresholdType = &v
}

// GetDeliveryOptions returns the DeliveryOptions field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetDeliveryOptions() []string {
	if o == nil || IsNil(o.DeliveryOptions) {
		var ret []string
		return ret
	}
	return o.DeliveryOptions
}

// GetDeliveryOptionsOk returns a tuple with the DeliveryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetDeliveryOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeliveryOptions) {
		return nil, false
	}
	return o.DeliveryOptions, true
}

// HasDeliveryOptions returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasDeliveryOptions() bool {
	if o != nil && !IsNil(o.DeliveryOptions) {
		return true
	}

	return false
}

// SetDeliveryOptions gets a reference to the given []string and assigns it to the DeliveryOptions field.
func (o *EstimatedAvailability) SetDeliveryOptions(v []string) {
	o.DeliveryOptions = v
}

// GetEstimatedAvailabilityStatus returns the EstimatedAvailabilityStatus field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetEstimatedAvailabilityStatus() string {
	if o == nil || IsNil(o.EstimatedAvailabilityStatus) {
		var ret string
		return ret
	}
	return *o.EstimatedAvailabilityStatus
}

// GetEstimatedAvailabilityStatusOk returns a tuple with the EstimatedAvailabilityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetEstimatedAvailabilityStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EstimatedAvailabilityStatus) {
		return nil, false
	}
	return o.EstimatedAvailabilityStatus, true
}

// HasEstimatedAvailabilityStatus returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasEstimatedAvailabilityStatus() bool {
	if o != nil && !IsNil(o.EstimatedAvailabilityStatus) {
		return true
	}

	return false
}

// SetEstimatedAvailabilityStatus gets a reference to the given string and assigns it to the EstimatedAvailabilityStatus field.
func (o *EstimatedAvailability) SetEstimatedAvailabilityStatus(v string) {
	o.EstimatedAvailabilityStatus = &v
}

// GetEstimatedAvailableQuantity returns the EstimatedAvailableQuantity field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetEstimatedAvailableQuantity() int32 {
	if o == nil || IsNil(o.EstimatedAvailableQuantity) {
		var ret int32
		return ret
	}
	return *o.EstimatedAvailableQuantity
}

// GetEstimatedAvailableQuantityOk returns a tuple with the EstimatedAvailableQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetEstimatedAvailableQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.EstimatedAvailableQuantity) {
		return nil, false
	}
	return o.EstimatedAvailableQuantity, true
}

// HasEstimatedAvailableQuantity returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasEstimatedAvailableQuantity() bool {
	if o != nil && !IsNil(o.EstimatedAvailableQuantity) {
		return true
	}

	return false
}

// SetEstimatedAvailableQuantity gets a reference to the given int32 and assigns it to the EstimatedAvailableQuantity field.
func (o *EstimatedAvailability) SetEstimatedAvailableQuantity(v int32) {
	o.EstimatedAvailableQuantity = &v
}

// GetEstimatedRemainingQuantity returns the EstimatedRemainingQuantity field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetEstimatedRemainingQuantity() int32 {
	if o == nil || IsNil(o.EstimatedRemainingQuantity) {
		var ret int32
		return ret
	}
	return *o.EstimatedRemainingQuantity
}

// GetEstimatedRemainingQuantityOk returns a tuple with the EstimatedRemainingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetEstimatedRemainingQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.EstimatedRemainingQuantity) {
		return nil, false
	}
	return o.EstimatedRemainingQuantity, true
}

// HasEstimatedRemainingQuantity returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasEstimatedRemainingQuantity() bool {
	if o != nil && !IsNil(o.EstimatedRemainingQuantity) {
		return true
	}

	return false
}

// SetEstimatedRemainingQuantity gets a reference to the given int32 and assigns it to the EstimatedRemainingQuantity field.
func (o *EstimatedAvailability) SetEstimatedRemainingQuantity(v int32) {
	o.EstimatedRemainingQuantity = &v
}

// GetEstimatedSoldQuantity returns the EstimatedSoldQuantity field value if set, zero value otherwise.
func (o *EstimatedAvailability) GetEstimatedSoldQuantity() int32 {
	if o == nil || IsNil(o.EstimatedSoldQuantity) {
		var ret int32
		return ret
	}
	return *o.EstimatedSoldQuantity
}

// GetEstimatedSoldQuantityOk returns a tuple with the EstimatedSoldQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedAvailability) GetEstimatedSoldQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.EstimatedSoldQuantity) {
		return nil, false
	}
	return o.EstimatedSoldQuantity, true
}

// HasEstimatedSoldQuantity returns a boolean if a field has been set.
func (o *EstimatedAvailability) HasEstimatedSoldQuantity() bool {
	if o != nil && !IsNil(o.EstimatedSoldQuantity) {
		return true
	}

	return false
}

// SetEstimatedSoldQuantity gets a reference to the given int32 and assigns it to the EstimatedSoldQuantity field.
func (o *EstimatedAvailability) SetEstimatedSoldQuantity(v int32) {
	o.EstimatedSoldQuantity = &v
}

func (o EstimatedAvailability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimatedAvailability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailabilityThreshold) {
		toSerialize["availabilityThreshold"] = o.AvailabilityThreshold
	}
	if !IsNil(o.AvailabilityThresholdType) {
		toSerialize["availabilityThresholdType"] = o.AvailabilityThresholdType
	}
	if !IsNil(o.DeliveryOptions) {
		toSerialize["deliveryOptions"] = o.DeliveryOptions
	}
	if !IsNil(o.EstimatedAvailabilityStatus) {
		toSerialize["estimatedAvailabilityStatus"] = o.EstimatedAvailabilityStatus
	}
	if !IsNil(o.EstimatedAvailableQuantity) {
		toSerialize["estimatedAvailableQuantity"] = o.EstimatedAvailableQuantity
	}
	if !IsNil(o.EstimatedRemainingQuantity) {
		toSerialize["estimatedRemainingQuantity"] = o.EstimatedRemainingQuantity
	}
	if !IsNil(o.EstimatedSoldQuantity) {
		toSerialize["estimatedSoldQuantity"] = o.EstimatedSoldQuantity
	}
	return toSerialize, nil
}

type NullableEstimatedAvailability struct {
	value *EstimatedAvailability
	isSet bool
}

func (v NullableEstimatedAvailability) Get() *EstimatedAvailability {
	return v.value
}

func (v *NullableEstimatedAvailability) Set(val *EstimatedAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedAvailability(val *EstimatedAvailability) *NullableEstimatedAvailability {
	return &NullableEstimatedAvailability{value: val, isSet: true}
}

func (v NullableEstimatedAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


