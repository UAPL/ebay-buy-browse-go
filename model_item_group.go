/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// ItemGroup The type that defines the fields for the item details.
type ItemGroup struct {
	// An array of containers for a description and the item IDs of all the items that have this exact description. Often the item variations within an item group all have the same description. Instead of repeating this description in the item details of each item, a description that is shared by at least one other item is returned in this container. If the description is unique, it is returned in the <b> items.description</b> field.
	CommonDescriptions *[]CommonDescriptions `json:"commonDescriptions,omitempty"`
	// An array of containers for all the item variation details, excluding the description.
	Items *[]Item `json:"items,omitempty"`
	// An array of warning messages. These types of errors do not prevent the method from executing but should be checked.
	Warnings *[]Error `json:"warnings,omitempty"`
}

// NewItemGroup instantiates a new ItemGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemGroup() *ItemGroup {
	this := ItemGroup{}
	return &this
}

// NewItemGroupWithDefaults instantiates a new ItemGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemGroupWithDefaults() *ItemGroup {
	this := ItemGroup{}
	return &this
}

// GetCommonDescriptions returns the CommonDescriptions field value if set, zero value otherwise.
func (o *ItemGroup) GetCommonDescriptions() []CommonDescriptions {
	if o == nil || o.CommonDescriptions == nil {
		var ret []CommonDescriptions
		return ret
	}
	return *o.CommonDescriptions
}

// GetCommonDescriptionsOk returns a tuple with the CommonDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroup) GetCommonDescriptionsOk() (*[]CommonDescriptions, bool) {
	if o == nil || o.CommonDescriptions == nil {
		return nil, false
	}
	return o.CommonDescriptions, true
}

// HasCommonDescriptions returns a boolean if a field has been set.
func (o *ItemGroup) HasCommonDescriptions() bool {
	if o != nil && o.CommonDescriptions != nil {
		return true
	}

	return false
}

// SetCommonDescriptions gets a reference to the given []CommonDescriptions and assigns it to the CommonDescriptions field.
func (o *ItemGroup) SetCommonDescriptions(v []CommonDescriptions) {
	o.CommonDescriptions = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ItemGroup) GetItems() []Item {
	if o == nil || o.Items == nil {
		var ret []Item
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroup) GetItemsOk() (*[]Item, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ItemGroup) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Item and assigns it to the Items field.
func (o *ItemGroup) SetItems(v []Item) {
	o.Items = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ItemGroup) GetWarnings() []Error {
	if o == nil || o.Warnings == nil {
		var ret []Error
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemGroup) GetWarningsOk() (*[]Error, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ItemGroup) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Error and assigns it to the Warnings field.
func (o *ItemGroup) SetWarnings(v []Error) {
	o.Warnings = &v
}

func (o ItemGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommonDescriptions != nil {
		toSerialize["commonDescriptions"] = o.CommonDescriptions
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableItemGroup struct {
	value *ItemGroup
	isSet bool
}

func (v NullableItemGroup) Get() *ItemGroup {
	return v.value
}

func (v *NullableItemGroup) Set(val *ItemGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableItemGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableItemGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemGroup(val *ItemGroup) *NullableItemGroup {
	return &NullableItemGroup{value: val, isSet: true}
}

func (v NullableItemGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


