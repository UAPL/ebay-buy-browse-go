/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// PaymentMethod struct for PaymentMethod
type PaymentMethod struct {
	// The payment method type, such as credit card or cash. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PaymentMethodTypeEnum'>eBay API documentation</a>
	PaymentMethodType *string `json:"paymentMethodType,omitempty"`
	// The payment method brands, including the payment method brand type and logo image.
	PaymentMethodBrands *[]PaymentMethodBrand `json:"paymentMethodBrands,omitempty"`
	// The payment instructions for the buyer, such as <i>cash in person</i> or <i>contact seller</i>.
	PaymentInstructions *[]string `json:"paymentInstructions,omitempty"`
	// The seller instructions to the buyer, such as <i>accepts credit cards</i> or <i>see description</i>.
	SellerInstructions *[]string `json:"sellerInstructions,omitempty"`
}

// NewPaymentMethod instantiates a new PaymentMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethod() *PaymentMethod {
	this := PaymentMethod{}
	return &this
}

// NewPaymentMethodWithDefaults instantiates a new PaymentMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodWithDefaults() *PaymentMethod {
	this := PaymentMethod{}
	return &this
}

// GetPaymentMethodType returns the PaymentMethodType field value if set, zero value otherwise.
func (o *PaymentMethod) GetPaymentMethodType() string {
	if o == nil || o.PaymentMethodType == nil {
		var ret string
		return ret
	}
	return *o.PaymentMethodType
}

// GetPaymentMethodTypeOk returns a tuple with the PaymentMethodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetPaymentMethodTypeOk() (*string, bool) {
	if o == nil || o.PaymentMethodType == nil {
		return nil, false
	}
	return o.PaymentMethodType, true
}

// HasPaymentMethodType returns a boolean if a field has been set.
func (o *PaymentMethod) HasPaymentMethodType() bool {
	if o != nil && o.PaymentMethodType != nil {
		return true
	}

	return false
}

// SetPaymentMethodType gets a reference to the given string and assigns it to the PaymentMethodType field.
func (o *PaymentMethod) SetPaymentMethodType(v string) {
	o.PaymentMethodType = &v
}

// GetPaymentMethodBrands returns the PaymentMethodBrands field value if set, zero value otherwise.
func (o *PaymentMethod) GetPaymentMethodBrands() []PaymentMethodBrand {
	if o == nil || o.PaymentMethodBrands == nil {
		var ret []PaymentMethodBrand
		return ret
	}
	return *o.PaymentMethodBrands
}

// GetPaymentMethodBrandsOk returns a tuple with the PaymentMethodBrands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetPaymentMethodBrandsOk() (*[]PaymentMethodBrand, bool) {
	if o == nil || o.PaymentMethodBrands == nil {
		return nil, false
	}
	return o.PaymentMethodBrands, true
}

// HasPaymentMethodBrands returns a boolean if a field has been set.
func (o *PaymentMethod) HasPaymentMethodBrands() bool {
	if o != nil && o.PaymentMethodBrands != nil {
		return true
	}

	return false
}

// SetPaymentMethodBrands gets a reference to the given []PaymentMethodBrand and assigns it to the PaymentMethodBrands field.
func (o *PaymentMethod) SetPaymentMethodBrands(v []PaymentMethodBrand) {
	o.PaymentMethodBrands = &v
}

// GetPaymentInstructions returns the PaymentInstructions field value if set, zero value otherwise.
func (o *PaymentMethod) GetPaymentInstructions() []string {
	if o == nil || o.PaymentInstructions == nil {
		var ret []string
		return ret
	}
	return *o.PaymentInstructions
}

// GetPaymentInstructionsOk returns a tuple with the PaymentInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetPaymentInstructionsOk() (*[]string, bool) {
	if o == nil || o.PaymentInstructions == nil {
		return nil, false
	}
	return o.PaymentInstructions, true
}

// HasPaymentInstructions returns a boolean if a field has been set.
func (o *PaymentMethod) HasPaymentInstructions() bool {
	if o != nil && o.PaymentInstructions != nil {
		return true
	}

	return false
}

// SetPaymentInstructions gets a reference to the given []string and assigns it to the PaymentInstructions field.
func (o *PaymentMethod) SetPaymentInstructions(v []string) {
	o.PaymentInstructions = &v
}

// GetSellerInstructions returns the SellerInstructions field value if set, zero value otherwise.
func (o *PaymentMethod) GetSellerInstructions() []string {
	if o == nil || o.SellerInstructions == nil {
		var ret []string
		return ret
	}
	return *o.SellerInstructions
}

// GetSellerInstructionsOk returns a tuple with the SellerInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethod) GetSellerInstructionsOk() (*[]string, bool) {
	if o == nil || o.SellerInstructions == nil {
		return nil, false
	}
	return o.SellerInstructions, true
}

// HasSellerInstructions returns a boolean if a field has been set.
func (o *PaymentMethod) HasSellerInstructions() bool {
	if o != nil && o.SellerInstructions != nil {
		return true
	}

	return false
}

// SetSellerInstructions gets a reference to the given []string and assigns it to the SellerInstructions field.
func (o *PaymentMethod) SetSellerInstructions(v []string) {
	o.SellerInstructions = &v
}

func (o PaymentMethod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PaymentMethodType != nil {
		toSerialize["paymentMethodType"] = o.PaymentMethodType
	}
	if o.PaymentMethodBrands != nil {
		toSerialize["paymentMethodBrands"] = o.PaymentMethodBrands
	}
	if o.PaymentInstructions != nil {
		toSerialize["paymentInstructions"] = o.PaymentInstructions
	}
	if o.SellerInstructions != nil {
		toSerialize["sellerInstructions"] = o.SellerInstructions
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethod struct {
	value *PaymentMethod
	isSet bool
}

func (v NullablePaymentMethod) Get() *PaymentMethod {
	return v.value
}

func (v *NullablePaymentMethod) Set(val *PaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethod(val *PaymentMethod) *NullablePaymentMethod {
	return &NullablePaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


