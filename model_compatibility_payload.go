/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the CompatibilityPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompatibilityPayload{}

// CompatibilityPayload An array of attribute name/value pairs used to define a specific product. For example: If you wanted to specify a specific car, one of the name/value pairs would be:<br><br><code>\"name\" : \"Year\",<br>\"value\" : \"2019\"</code><br><br>For a list of the attributes required for cars and trucks and motorcycles refer to <a href=\"/api-docs/buy/static/api-browse.html#Check\" target=\"_blank\">Check compatibility</a> in the <a href=\"/api-docs/buy/static/buying-ig-landing.html\" target=\"_blank\">Buying Integration Guide</a>.
type CompatibilityPayload struct {
	// An array of attribute name/value pairs used to define a specific product. For example: If you wanted to specify a specific car, one of the name/value pairs would be<br><br><code>\"name\" : \"Year\", <br>\"value\" : \"2019\"</code><br><br>For a list of the attributes required for cars and trucks and motorcycles see <a href=\"/api-docs/buy/static/api-browse.html#Check\">Check compatibility</a> in the Buy Integration Guide.
	CompatibilityProperties []AttributeNameValue `json:"compatibilityProperties,omitempty"`
}

// NewCompatibilityPayload instantiates a new CompatibilityPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompatibilityPayload() *CompatibilityPayload {
	this := CompatibilityPayload{}
	return &this
}

// NewCompatibilityPayloadWithDefaults instantiates a new CompatibilityPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompatibilityPayloadWithDefaults() *CompatibilityPayload {
	this := CompatibilityPayload{}
	return &this
}

// GetCompatibilityProperties returns the CompatibilityProperties field value if set, zero value otherwise.
func (o *CompatibilityPayload) GetCompatibilityProperties() []AttributeNameValue {
	if o == nil || IsNil(o.CompatibilityProperties) {
		var ret []AttributeNameValue
		return ret
	}
	return o.CompatibilityProperties
}

// GetCompatibilityPropertiesOk returns a tuple with the CompatibilityProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompatibilityPayload) GetCompatibilityPropertiesOk() ([]AttributeNameValue, bool) {
	if o == nil || IsNil(o.CompatibilityProperties) {
		return nil, false
	}
	return o.CompatibilityProperties, true
}

// HasCompatibilityProperties returns a boolean if a field has been set.
func (o *CompatibilityPayload) HasCompatibilityProperties() bool {
	if o != nil && !IsNil(o.CompatibilityProperties) {
		return true
	}

	return false
}

// SetCompatibilityProperties gets a reference to the given []AttributeNameValue and assigns it to the CompatibilityProperties field.
func (o *CompatibilityPayload) SetCompatibilityProperties(v []AttributeNameValue) {
	o.CompatibilityProperties = v
}

func (o CompatibilityPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompatibilityPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompatibilityProperties) {
		toSerialize["compatibilityProperties"] = o.CompatibilityProperties
	}
	return toSerialize, nil
}

type NullableCompatibilityPayload struct {
	value *CompatibilityPayload
	isSet bool
}

func (v NullableCompatibilityPayload) Get() *CompatibilityPayload {
	return v.value
}

func (v *NullableCompatibilityPayload) Set(val *CompatibilityPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCompatibilityPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCompatibilityPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompatibilityPayload(val *CompatibilityPayload) *NullableCompatibilityPayload {
	return &NullableCompatibilityPayload{value: val, isSet: true}
}

func (v NullableCompatibilityPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompatibilityPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


