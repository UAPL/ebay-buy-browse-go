/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the CoreItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreItem{}

// CoreItem An array of containers with the details for all of the items returned.
type CoreItem struct {
	// An array of containers with the URLs for the images that are in addition to the primary image.  The primary image is returned in the <b> image.imageUrl</b> field.
	AdditionalImages []Image `json:"additionalImages,omitempty"`
	// This indicates if the item is for  adults only. For more information about adult-only items on eBay, see <a href=\"https://pages.ebay.com/help/policies/adult-only.html \" target=\"_blank\">Adult items policy</a> for sellers and <a href=\"https://www.ebay.com/help/terms-conditions/default/searching-adult-items?id=4661 \" target=\"_blank\">Adult-Only items on eBay</a> for buyers.
	AdultOnly *bool `json:"adultOnly,omitempty"`
	// (Primary Item Aspect) The age group for which the product is recommended. For example, newborn, infant, toddler, kids, adult, etc. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	AgeGroup *string `json:"ageGroup,omitempty"`
	AuthenticityGuarantee *AuthenticityGuaranteeProgram `json:"authenticityGuarantee,omitempty"`
	AuthenticityVerification *AuthenticityVerificationProgram `json:"authenticityVerification,omitempty"`
	// A list of available coupons for the item.
	AvailableCoupons []AvailableCoupon `json:"availableCoupons,omitempty"`
	// This integer value indicates the total number of bids that have been placed against an auction item. This field is returned only for auction items.
	BidCount *int32 `json:"bidCount,omitempty"`
	// (Primary Item Aspect) The name brand of the item, such as Nike, Apple, etc.  All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	Brand *string `json:"brand,omitempty"`
	// A comma separated list of all the purchase options available for the item. The values returned are:<ul><li><code>FIXED_PRICE</code> - Indicates the buyer can purchase the item for a set price using the Buy It Now button.</li><li><code>AUCTION</code> - Indicates the buyer can place a bid for the item. After the first bid is placed, this becomes a live auction item and is the only buying option for this item.</li><li><code>BEST_OFFER</code> - Indicates the buyer can send the seller a price they're willing to pay for the item. The seller can accept, reject, or send a counter offer. For more information on how this works, see <a href=\"https://www.ebay.com/help/buying/buy-now/making-best-offer?id=4019 \">Making a Best Offer</a>.</li><li><code>CLASSIFIED_AD</code> - Indicates that the final sales transaction is to be completed outside of the eBay environment.</li></ul>Code so that your app gracefully handles any future changes to this list.
	BuyingOptions []string `json:"buyingOptions,omitempty"`
	// The ID of the leaf category for this item. A leaf category is the lowest level in that category and has no children.
	CategoryId *string `json:"categoryId,omitempty"`
	// Text that shows the category hierarchy of the item. For example: Computers/Tablets &amp; Networking, Laptops &amp; Netbooks, PC Laptops &amp; Netbooks
	CategoryPath *string `json:"categoryPath,omitempty"`
	// (Primary Item Aspect) Text describing the color of the item.  All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	Color *string `json:"color,omitempty"`
	// A short text description for the condition of the item, such as New or Used. For a list of condition names, see <a href=\"https://developer.ebay.com/devzone/finding/callref/enums/conditionIdList.html \" target=\"_blank\">Item Condition IDs and Names</a>.  <br><br>Code so that your app gracefully handles any future changes to this list.
	Condition *string `json:"condition,omitempty"`
	// A full text description for the condition of the item. This field elaborates on the value specified in the <b>condition</b> field and provides full details for the condition of the item.
	ConditionDescription *string `json:"conditionDescription,omitempty"`
	// The identifier of the condition of the item. For example, 1000 is the identifier for NEW. For a list of condition names and IDs, see <a href=\"https://developer.ebay.com/devzone/finding/callref/enums/conditionIdList.html \" target=\"_blank\">Item Condition IDs and Names</a>. <br><br>Code so that your app gracefully handles any future changes to this list.</span>
	ConditionId *string `json:"conditionId,omitempty"`
	CurrentBidPrice *ConvertedAmount `json:"currentBidPrice,omitempty"`
	// The full description of the item that was created by the seller. This can be plain text or rich content and can be very large.
	Description *string `json:"description,omitempty"`
	// This field indicates if the item can be purchased using the Buy <a href=\"/api-docs/buy/order/resources/methods\">Order API</a>. <ul> <li>If the value of this field is <code>true</code>, this indicates that the item can be purchased using the <b> Order API</b>. </li>  <li>If the value of this field is <code>false</code>, this indicates that the item cannot be purchased using the <b> Order API</b> and must be purchased on the eBay site.</li> </ul>
	EligibleForInlineCheckout *bool `json:"eligibleForInlineCheckout,omitempty"`
	// This indicates if the item can be purchased using Guest Checkout in the <a href=\"/api-docs/buy/order/resources/methods\">Order API</a>. You can use this flag to exclude items from your inventory that are not eligible for Guest Checkout, such as gift cards.
	EnabledForGuestCheckout *bool `json:"enabledForGuestCheckout,omitempty"`
	// This indicates the <a href=\"https://en.wikipedia.org/wiki/European_Union_energy_label \">European energy efficiency</a> rating (EEK) of the item. This field is returned only if the seller specified the energy efficiency rating. <br><br>The rating is a set of energy efficiency classes from A to G, where 'A' is the most energy efficient and 'G' is the least efficient. This rating helps buyers choose between various models. <br><br>When the manufacturer's specifications for this item are available, the link to this information is returned in the <b>productFicheWebUrl</b> field.
	EnergyEfficiencyClass *string `json:"energyEfficiencyClass,omitempty"`
	// An EPID is the eBay product identifier of a product from the eBay product catalog.  This indicates the product in which the item belongs.
	Epid *string `json:"epid,omitempty"`
	// The estimated number of this item that are available for purchase. Because the quantity of an item can change several times within a second, it is impossible to return the exact quantity. So instead of returning quantity, the estimated availability of the item is returned.
	EstimatedAvailabilities []EstimatedAvailability `json:"estimatedAvailabilities,omitempty"`
	// (Primary Item Aspect) The gender for the item. This is used for items that could vary by gender, such as clothing. For example: male, female, or unisex. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	Gender *string `json:"gender,omitempty"`
	// The unique Global Trade Item number of the item as defined by <a href=\"https://www.gtin.info \" target=\"_blank\">https://www.gtin.info</a>. This can be a UPC (Universal Product Code), EAN (European Article Number), or an ISBN (International Standard Book Number) value.
	Gtin *string `json:"gtin,omitempty"`
	Image *Image `json:"image,omitempty"`
	// The ePID (eBay Product ID of a product from the eBay product catalog) for the item, which has been programmatically determined by eBay using the item's title, aspects, and other data. <br><br>If the seller provided an ePID for the item, the seller's value is returned in the <b> epid</b> field. <br><br><span class=\"tablenote\"><b> Note: </b> This field is returned only for authorized Partners.</span>
	InferredEpid *string `json:"inferredEpid,omitempty"`
	// The URL to the View Item page of the item which includes the affiliate tracking ID.<br><br><span class=\"tablenote\"><b>Note:</b> In order to receive commissions on sales, eBay Partner Network affiliates must use this URL to forward buyers to the listing on the eBay marketplace.</span><br>The <b>itemAffiliateWebUrl</b> is only returned if:<ul><li>The marketplace through which the item is being viewed is part of the eBay Partner Network. Currently Singapore (<code>EBAY_SG</code>) is <b>not</b> supported.<br><br>For additional information, refer to <a href=\"https://partnerhelp.ebay.com/helpcenter/s/article/countries-available-as-a-program-in-EPN?language=en_US \" target=\"_blank\">eBay Partner Network</a>.</li><li>The seller enables affiliate tracking for the item by including the <code><a href=\"/api-docs/buy/static/api-browse.html#Headers\">X-EBAY-C-ENDUSERCTX</a></code> request header in the method.</li></ul>
	ItemAffiliateWebUrl *string `json:"itemAffiliateWebUrl,omitempty"`
	// A timestamp that indicates the date and time an item listing was created.<br><br>This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which can be converted into the local time of the buyer.
	ItemCreationDate *string `json:"itemCreationDate,omitempty"`
	// This timestamp indicates the date and time up to which the item can be purchased.  This value is returned in UTC format (yyyy-MM-ddThh:mm:ss.sssZ), which you can convert into the local time of the buyer.<br><br><span class=\"tablenote\"><b> Note: </b>This field is only returned for auction listings.</span>
	ItemEndDate *string `json:"itemEndDate,omitempty"`
	// The unique RESTful identifier of the item.
	ItemId *string `json:"itemId,omitempty"`
	ItemLocation *Address `json:"itemLocation,omitempty"`
	// The URL of the View Item page of the item. This enables you to include a \"Report Item on eBay\" link that takes the buyer to the View Item page on eBay. From there they can report any issues regarding this item to eBay.
	ItemWebUrl *string `json:"itemWebUrl,omitempty"`
	// The unique identifier of the eBay listing that contains the item. This is the traditional/legacy ID that is often seen in the URL of the listing View Item page.
	LegacyItemId *string `json:"legacyItemId,omitempty"`
	// An array of containers that show the complete list of the aspect name/value pairs that describe the variation of the item.
	LocalizedAspects []TypedNameValue `json:"localizedAspects,omitempty"`
	// The number of items in a lot. In other words, a lot size is the number of items that are being sold together.  <br><br>A lot is a set of two or more items included in a single listing that must be purchased together in a single order line item. All the items in the lot are the same but there can be multiple items in a single lot,  such as the package of batteries shown in the example below.   <br><br><table border=\"1\"> <tr> <tr>  <th>Item</th>  <th>Lot Definition</th> <th>Lot Size</th></tr>  <tr>  <td>A package of 24 AA batteries</td>  <td>A box of 10 packages</td>  <td>10  </td> </tr>  <tr>  <td>A P235/75-15 Goodyear tire </td>  <td>4 tires  </td>  <td>4  </td> </tr> <tr> <td>Fashion Jewelry Rings  </td> <td>Package of 100 assorted rings  </td> <td>100 </td> </tr></table>  <br><br><span class=\"tablenote\"><b>Note: </b>  Lots are not supported in all categories.  </span>
	LotSize *int32 `json:"lotSize,omitempty"`
	MarketingPrice *MarketingPrice `json:"marketingPrice,omitempty"`
	// (Primary Item Aspect) Text describing what the item is made of. For example, silk. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	Material *string `json:"material,omitempty"`
	MinimumPriceToBid *ConvertedAmount `json:"minimumPriceToBid,omitempty"`
	// The manufacturer's part number, which is a unique number that identifies a specific product. To identify the product, this is always used along with brand.
	Mpn *string `json:"mpn,omitempty"`
	// (Primary Item Aspect) Text describing the pattern used on the item. For example, paisley. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	Pattern *string `json:"pattern,omitempty"`
	// The payment methods for the item, including the payment method types, brands, and instructions for the buyer.
	PaymentMethods []PaymentMethod `json:"paymentMethods,omitempty"`
	Price *ConvertedAmount `json:"price,omitempty"`
	// Indicates when in the buying flow the item's price can appear for minimum advertised price (MAP) items, which is the lowest price a retailer can advertise/show for this item. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/browse/types/gct:PriceDisplayConditionEnum'>eBay API documentation</a>
	PriceDisplayCondition *string `json:"priceDisplayCondition,omitempty"`
	PrimaryItemGroup *ItemGroupSummary `json:"primaryItemGroup,omitempty"`
	PrimaryProductReviewRating *ReviewRating `json:"primaryProductReviewRating,omitempty"`
	// This field is returned as <code>true</code> if the listing is part of a Promoted Listing campaign. Promoted Listings are available to Above Standard and Top Rated sellers with recent sales activity.<br><br>For more information, see <a href=\"https://pages.ebay.com/seller-center/listing-and-marketing/promoted-listings.html \" target=\"_blank\">Promoted Listings</a>.
	PriorityListing *bool `json:"priorityListing,omitempty"`
	Product *Product `json:"product,omitempty"`
	// The URL of a page containing the manufacturer's specification of this item, which helps buyers make a purchasing decision. This information is available only for items that include the European energy efficiency rating (EEK) but is not available for <em> all</em> items with an EEK rating and is returned only if this information is available. The EEK rating of the item is returned in the <b> energyEfficiencyClass</b> field.
	ProductFicheWebUrl *string `json:"productFicheWebUrl,omitempty"`
	// An array of the qualified programs available for the item, such as EBAY_PLUS, AUTHENTICITY_GUARANTEE, and AUTHENTICITY_VERIFICATION.<br><br>eBay Plus is a premium account option for buyers, which provides benefits such as fast free domestic shipping and free returns on selected items. Top-Rated eBay sellers must opt in to eBay Plus to be able to offer the program on qualifying listings. Sellers must commit to next-day delivery of those items.<br><br><span class=\"tablenote\"><b>Note: </b> eBay Plus is available only to buyers in Germany, Austria, and Australia marketplaces.</span><br><br>The eBay <a href=\"https://pages.ebay.com/authenticity-guarantee/ \" target=\"_blank\">Authenticity Guarantee</a> program enables third-party authenticators to perform authentication verification inspections on items such as watches and sneakers.
	QualifiedPrograms []string `json:"qualifiedPrograms,omitempty"`
	// The maximum number for a specific item that one buyer can purchase.
	QuantityLimitPerBuyer *int32 `json:"quantityLimitPerBuyer,omitempty"`
	// This indicates if the reserve price of the item has been met. A reserve price is set by the seller and is the minimum amount the seller is willing to sell the item for. <p>If the highest bid is not equal to or higher than the reserve price when the auction ends, the listing ends and the item is not sold.</p> <p><b> Note: </b>This is returned only for auctions that have a reserve price.</p>
	ReservePriceMet *bool `json:"reservePriceMet,omitempty"`
	ReturnTerms *ItemReturnTerms `json:"returnTerms,omitempty"`
	Seller *SellerDetail `json:"seller,omitempty"`
	// An identifier generated/incremented when a seller revises the item. There are two types of item revisions: <ul><li>Seller changes, such as changing the title</li>  <li>eBay system changes, such as changing the quantity when an item is purchased</li></ul> This ID is changed <em> only</em> when the seller makes a change to the item. This means you cannot use this value to determine if the quantity has changed.
	SellerItemRevision *string `json:"sellerItemRevision,omitempty"`
	// An array of shipping options containers that have the details about cost, carrier, etc. of one shipping option. 
	ShippingOptions []ShippingOption `json:"shippingOptions,omitempty"`
	ShipToLocations *ShipToLocations `json:"shipToLocations,omitempty"`
	// This text string is derived from the item condition and the item aspects (such as size, color, capacity, model, brand, etc.).
	ShortDescription *string `json:"shortDescription,omitempty"`
	// (Primary Item Aspect) The size of the item. For example, '7' for a size 7 shoe. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	Size *string `json:"size,omitempty"`
	// (Primary Item Aspect) The sizing system of the country.  All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container. <br><br><b> Valid Values: </b> <br>AU (Australia),  <br>BR (Brazil), <br>CN (China),  <br>DE (Germany),  <br>EU (European Union),  <br> FR (France), <br> IT (Italy),  <br>JP (Japan), <br>MX (Mexico),  <br>US (USA), <br> UK (United Kingdom) <br><br>Code so that your app gracefully handles any future changes to this list. 
	SizeSystem *string `json:"sizeSystem,omitempty"`
	// (Primary Item Aspect) Text describing a size group in which the item would be included, such as regular, petite, plus, big-and-tall or maternity. All the item aspects, including this aspect, are returned in the <b> localizedAspects</b> container.
	SizeType *string `json:"sizeType,omitempty"`
	// A subtitle is optional and allows the seller to provide more information about the product, possibly including keywords that may assist with search results.
	Subtitle *string `json:"subtitle,omitempty"`
	// The container for the tax information for the item.
	Taxes []Taxes `json:"taxes,omitempty"`
	// The seller-created title of the item. <br><br><b> Maximum Length: </b> 80 characters
	Title *string `json:"title,omitempty"`
	// This indicates if the item a top-rated plus item. There are three benefits of a top-rated plus item: a  minimum 30-day money-back return policy, shipping the items in 1 business day with tracking provided, and the added comfort of knowing this item is from experienced sellers with the highest buyer ratings. See the <a href=\"https://pages.ebay.com/topratedplus/index.html \" target=\"_blank\">Top Rated Plus Items </a> and <a href=\"https://pages.ebay.com/help/sell/top-rated.html \" target=\"_blank\">Becoming a Top Rated Seller and qualifying for Top Rated Plus</a> help topics for more information.
	TopRatedBuyingExperience *bool `json:"topRatedBuyingExperience,omitempty"`
	// The URL to the image that shows the information on the tyre label.
	TyreLabelImageUrl *string `json:"tyreLabelImageUrl,omitempty"`
	// This integer value indicates the number of different eBay users who have placed one or more bids on an auction item. This field is only applicable to auction items.
	UniqueBidderCount *int32 `json:"uniqueBidderCount,omitempty"`
	UnitPrice *ConvertedAmount `json:"unitPrice,omitempty"`
	// The designation, such as size, weight, volume, count, etc., that was used to specify the quantity of the item.  This helps buyers compare prices. <br><br>For example, the following tells the buyer that the item is 7.99 per 100 grams. <br><br><code>\"unitPricingMeasure\": \"100g\",<br> \"unitPrice\": {<br>&nbsp;&nbsp;\"value\": \"7.99\",<br>&nbsp;&nbsp;\"currency\": \"GBP\"</code>
	UnitPricingMeasure *string `json:"unitPricingMeasure,omitempty"`
}

// NewCoreItem instantiates a new CoreItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreItem() *CoreItem {
	this := CoreItem{}
	return &this
}

// NewCoreItemWithDefaults instantiates a new CoreItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreItemWithDefaults() *CoreItem {
	this := CoreItem{}
	return &this
}

// GetAdditionalImages returns the AdditionalImages field value if set, zero value otherwise.
func (o *CoreItem) GetAdditionalImages() []Image {
	if o == nil || IsNil(o.AdditionalImages) {
		var ret []Image
		return ret
	}
	return o.AdditionalImages
}

// GetAdditionalImagesOk returns a tuple with the AdditionalImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetAdditionalImagesOk() ([]Image, bool) {
	if o == nil || IsNil(o.AdditionalImages) {
		return nil, false
	}
	return o.AdditionalImages, true
}

// HasAdditionalImages returns a boolean if a field has been set.
func (o *CoreItem) HasAdditionalImages() bool {
	if o != nil && !IsNil(o.AdditionalImages) {
		return true
	}

	return false
}

// SetAdditionalImages gets a reference to the given []Image and assigns it to the AdditionalImages field.
func (o *CoreItem) SetAdditionalImages(v []Image) {
	o.AdditionalImages = v
}

// GetAdultOnly returns the AdultOnly field value if set, zero value otherwise.
func (o *CoreItem) GetAdultOnly() bool {
	if o == nil || IsNil(o.AdultOnly) {
		var ret bool
		return ret
	}
	return *o.AdultOnly
}

// GetAdultOnlyOk returns a tuple with the AdultOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetAdultOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.AdultOnly) {
		return nil, false
	}
	return o.AdultOnly, true
}

// HasAdultOnly returns a boolean if a field has been set.
func (o *CoreItem) HasAdultOnly() bool {
	if o != nil && !IsNil(o.AdultOnly) {
		return true
	}

	return false
}

// SetAdultOnly gets a reference to the given bool and assigns it to the AdultOnly field.
func (o *CoreItem) SetAdultOnly(v bool) {
	o.AdultOnly = &v
}

// GetAgeGroup returns the AgeGroup field value if set, zero value otherwise.
func (o *CoreItem) GetAgeGroup() string {
	if o == nil || IsNil(o.AgeGroup) {
		var ret string
		return ret
	}
	return *o.AgeGroup
}

// GetAgeGroupOk returns a tuple with the AgeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetAgeGroupOk() (*string, bool) {
	if o == nil || IsNil(o.AgeGroup) {
		return nil, false
	}
	return o.AgeGroup, true
}

// HasAgeGroup returns a boolean if a field has been set.
func (o *CoreItem) HasAgeGroup() bool {
	if o != nil && !IsNil(o.AgeGroup) {
		return true
	}

	return false
}

// SetAgeGroup gets a reference to the given string and assigns it to the AgeGroup field.
func (o *CoreItem) SetAgeGroup(v string) {
	o.AgeGroup = &v
}

// GetAuthenticityGuarantee returns the AuthenticityGuarantee field value if set, zero value otherwise.
func (o *CoreItem) GetAuthenticityGuarantee() AuthenticityGuaranteeProgram {
	if o == nil || IsNil(o.AuthenticityGuarantee) {
		var ret AuthenticityGuaranteeProgram
		return ret
	}
	return *o.AuthenticityGuarantee
}

// GetAuthenticityGuaranteeOk returns a tuple with the AuthenticityGuarantee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetAuthenticityGuaranteeOk() (*AuthenticityGuaranteeProgram, bool) {
	if o == nil || IsNil(o.AuthenticityGuarantee) {
		return nil, false
	}
	return o.AuthenticityGuarantee, true
}

// HasAuthenticityGuarantee returns a boolean if a field has been set.
func (o *CoreItem) HasAuthenticityGuarantee() bool {
	if o != nil && !IsNil(o.AuthenticityGuarantee) {
		return true
	}

	return false
}

// SetAuthenticityGuarantee gets a reference to the given AuthenticityGuaranteeProgram and assigns it to the AuthenticityGuarantee field.
func (o *CoreItem) SetAuthenticityGuarantee(v AuthenticityGuaranteeProgram) {
	o.AuthenticityGuarantee = &v
}

// GetAuthenticityVerification returns the AuthenticityVerification field value if set, zero value otherwise.
func (o *CoreItem) GetAuthenticityVerification() AuthenticityVerificationProgram {
	if o == nil || IsNil(o.AuthenticityVerification) {
		var ret AuthenticityVerificationProgram
		return ret
	}
	return *o.AuthenticityVerification
}

// GetAuthenticityVerificationOk returns a tuple with the AuthenticityVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetAuthenticityVerificationOk() (*AuthenticityVerificationProgram, bool) {
	if o == nil || IsNil(o.AuthenticityVerification) {
		return nil, false
	}
	return o.AuthenticityVerification, true
}

// HasAuthenticityVerification returns a boolean if a field has been set.
func (o *CoreItem) HasAuthenticityVerification() bool {
	if o != nil && !IsNil(o.AuthenticityVerification) {
		return true
	}

	return false
}

// SetAuthenticityVerification gets a reference to the given AuthenticityVerificationProgram and assigns it to the AuthenticityVerification field.
func (o *CoreItem) SetAuthenticityVerification(v AuthenticityVerificationProgram) {
	o.AuthenticityVerification = &v
}

// GetAvailableCoupons returns the AvailableCoupons field value if set, zero value otherwise.
func (o *CoreItem) GetAvailableCoupons() []AvailableCoupon {
	if o == nil || IsNil(o.AvailableCoupons) {
		var ret []AvailableCoupon
		return ret
	}
	return o.AvailableCoupons
}

// GetAvailableCouponsOk returns a tuple with the AvailableCoupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetAvailableCouponsOk() ([]AvailableCoupon, bool) {
	if o == nil || IsNil(o.AvailableCoupons) {
		return nil, false
	}
	return o.AvailableCoupons, true
}

// HasAvailableCoupons returns a boolean if a field has been set.
func (o *CoreItem) HasAvailableCoupons() bool {
	if o != nil && !IsNil(o.AvailableCoupons) {
		return true
	}

	return false
}

// SetAvailableCoupons gets a reference to the given []AvailableCoupon and assigns it to the AvailableCoupons field.
func (o *CoreItem) SetAvailableCoupons(v []AvailableCoupon) {
	o.AvailableCoupons = v
}

// GetBidCount returns the BidCount field value if set, zero value otherwise.
func (o *CoreItem) GetBidCount() int32 {
	if o == nil || IsNil(o.BidCount) {
		var ret int32
		return ret
	}
	return *o.BidCount
}

// GetBidCountOk returns a tuple with the BidCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetBidCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BidCount) {
		return nil, false
	}
	return o.BidCount, true
}

// HasBidCount returns a boolean if a field has been set.
func (o *CoreItem) HasBidCount() bool {
	if o != nil && !IsNil(o.BidCount) {
		return true
	}

	return false
}

// SetBidCount gets a reference to the given int32 and assigns it to the BidCount field.
func (o *CoreItem) SetBidCount(v int32) {
	o.BidCount = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *CoreItem) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *CoreItem) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *CoreItem) SetBrand(v string) {
	o.Brand = &v
}

// GetBuyingOptions returns the BuyingOptions field value if set, zero value otherwise.
func (o *CoreItem) GetBuyingOptions() []string {
	if o == nil || IsNil(o.BuyingOptions) {
		var ret []string
		return ret
	}
	return o.BuyingOptions
}

// GetBuyingOptionsOk returns a tuple with the BuyingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetBuyingOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.BuyingOptions) {
		return nil, false
	}
	return o.BuyingOptions, true
}

// HasBuyingOptions returns a boolean if a field has been set.
func (o *CoreItem) HasBuyingOptions() bool {
	if o != nil && !IsNil(o.BuyingOptions) {
		return true
	}

	return false
}

// SetBuyingOptions gets a reference to the given []string and assigns it to the BuyingOptions field.
func (o *CoreItem) SetBuyingOptions(v []string) {
	o.BuyingOptions = v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *CoreItem) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *CoreItem) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *CoreItem) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetCategoryPath returns the CategoryPath field value if set, zero value otherwise.
func (o *CoreItem) GetCategoryPath() string {
	if o == nil || IsNil(o.CategoryPath) {
		var ret string
		return ret
	}
	return *o.CategoryPath
}

// GetCategoryPathOk returns a tuple with the CategoryPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetCategoryPathOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryPath) {
		return nil, false
	}
	return o.CategoryPath, true
}

// HasCategoryPath returns a boolean if a field has been set.
func (o *CoreItem) HasCategoryPath() bool {
	if o != nil && !IsNil(o.CategoryPath) {
		return true
	}

	return false
}

// SetCategoryPath gets a reference to the given string and assigns it to the CategoryPath field.
func (o *CoreItem) SetCategoryPath(v string) {
	o.CategoryPath = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CoreItem) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CoreItem) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CoreItem) SetColor(v string) {
	o.Color = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *CoreItem) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *CoreItem) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *CoreItem) SetCondition(v string) {
	o.Condition = &v
}

// GetConditionDescription returns the ConditionDescription field value if set, zero value otherwise.
func (o *CoreItem) GetConditionDescription() string {
	if o == nil || IsNil(o.ConditionDescription) {
		var ret string
		return ret
	}
	return *o.ConditionDescription
}

// GetConditionDescriptionOk returns a tuple with the ConditionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetConditionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionDescription) {
		return nil, false
	}
	return o.ConditionDescription, true
}

// HasConditionDescription returns a boolean if a field has been set.
func (o *CoreItem) HasConditionDescription() bool {
	if o != nil && !IsNil(o.ConditionDescription) {
		return true
	}

	return false
}

// SetConditionDescription gets a reference to the given string and assigns it to the ConditionDescription field.
func (o *CoreItem) SetConditionDescription(v string) {
	o.ConditionDescription = &v
}

// GetConditionId returns the ConditionId field value if set, zero value otherwise.
func (o *CoreItem) GetConditionId() string {
	if o == nil || IsNil(o.ConditionId) {
		var ret string
		return ret
	}
	return *o.ConditionId
}

// GetConditionIdOk returns a tuple with the ConditionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetConditionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConditionId) {
		return nil, false
	}
	return o.ConditionId, true
}

// HasConditionId returns a boolean if a field has been set.
func (o *CoreItem) HasConditionId() bool {
	if o != nil && !IsNil(o.ConditionId) {
		return true
	}

	return false
}

// SetConditionId gets a reference to the given string and assigns it to the ConditionId field.
func (o *CoreItem) SetConditionId(v string) {
	o.ConditionId = &v
}

// GetCurrentBidPrice returns the CurrentBidPrice field value if set, zero value otherwise.
func (o *CoreItem) GetCurrentBidPrice() ConvertedAmount {
	if o == nil || IsNil(o.CurrentBidPrice) {
		var ret ConvertedAmount
		return ret
	}
	return *o.CurrentBidPrice
}

// GetCurrentBidPriceOk returns a tuple with the CurrentBidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetCurrentBidPriceOk() (*ConvertedAmount, bool) {
	if o == nil || IsNil(o.CurrentBidPrice) {
		return nil, false
	}
	return o.CurrentBidPrice, true
}

// HasCurrentBidPrice returns a boolean if a field has been set.
func (o *CoreItem) HasCurrentBidPrice() bool {
	if o != nil && !IsNil(o.CurrentBidPrice) {
		return true
	}

	return false
}

// SetCurrentBidPrice gets a reference to the given ConvertedAmount and assigns it to the CurrentBidPrice field.
func (o *CoreItem) SetCurrentBidPrice(v ConvertedAmount) {
	o.CurrentBidPrice = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CoreItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CoreItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CoreItem) SetDescription(v string) {
	o.Description = &v
}

// GetEligibleForInlineCheckout returns the EligibleForInlineCheckout field value if set, zero value otherwise.
func (o *CoreItem) GetEligibleForInlineCheckout() bool {
	if o == nil || IsNil(o.EligibleForInlineCheckout) {
		var ret bool
		return ret
	}
	return *o.EligibleForInlineCheckout
}

// GetEligibleForInlineCheckoutOk returns a tuple with the EligibleForInlineCheckout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetEligibleForInlineCheckoutOk() (*bool, bool) {
	if o == nil || IsNil(o.EligibleForInlineCheckout) {
		return nil, false
	}
	return o.EligibleForInlineCheckout, true
}

// HasEligibleForInlineCheckout returns a boolean if a field has been set.
func (o *CoreItem) HasEligibleForInlineCheckout() bool {
	if o != nil && !IsNil(o.EligibleForInlineCheckout) {
		return true
	}

	return false
}

// SetEligibleForInlineCheckout gets a reference to the given bool and assigns it to the EligibleForInlineCheckout field.
func (o *CoreItem) SetEligibleForInlineCheckout(v bool) {
	o.EligibleForInlineCheckout = &v
}

// GetEnabledForGuestCheckout returns the EnabledForGuestCheckout field value if set, zero value otherwise.
func (o *CoreItem) GetEnabledForGuestCheckout() bool {
	if o == nil || IsNil(o.EnabledForGuestCheckout) {
		var ret bool
		return ret
	}
	return *o.EnabledForGuestCheckout
}

// GetEnabledForGuestCheckoutOk returns a tuple with the EnabledForGuestCheckout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetEnabledForGuestCheckoutOk() (*bool, bool) {
	if o == nil || IsNil(o.EnabledForGuestCheckout) {
		return nil, false
	}
	return o.EnabledForGuestCheckout, true
}

// HasEnabledForGuestCheckout returns a boolean if a field has been set.
func (o *CoreItem) HasEnabledForGuestCheckout() bool {
	if o != nil && !IsNil(o.EnabledForGuestCheckout) {
		return true
	}

	return false
}

// SetEnabledForGuestCheckout gets a reference to the given bool and assigns it to the EnabledForGuestCheckout field.
func (o *CoreItem) SetEnabledForGuestCheckout(v bool) {
	o.EnabledForGuestCheckout = &v
}

// GetEnergyEfficiencyClass returns the EnergyEfficiencyClass field value if set, zero value otherwise.
func (o *CoreItem) GetEnergyEfficiencyClass() string {
	if o == nil || IsNil(o.EnergyEfficiencyClass) {
		var ret string
		return ret
	}
	return *o.EnergyEfficiencyClass
}

// GetEnergyEfficiencyClassOk returns a tuple with the EnergyEfficiencyClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetEnergyEfficiencyClassOk() (*string, bool) {
	if o == nil || IsNil(o.EnergyEfficiencyClass) {
		return nil, false
	}
	return o.EnergyEfficiencyClass, true
}

// HasEnergyEfficiencyClass returns a boolean if a field has been set.
func (o *CoreItem) HasEnergyEfficiencyClass() bool {
	if o != nil && !IsNil(o.EnergyEfficiencyClass) {
		return true
	}

	return false
}

// SetEnergyEfficiencyClass gets a reference to the given string and assigns it to the EnergyEfficiencyClass field.
func (o *CoreItem) SetEnergyEfficiencyClass(v string) {
	o.EnergyEfficiencyClass = &v
}

// GetEpid returns the Epid field value if set, zero value otherwise.
func (o *CoreItem) GetEpid() string {
	if o == nil || IsNil(o.Epid) {
		var ret string
		return ret
	}
	return *o.Epid
}

// GetEpidOk returns a tuple with the Epid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetEpidOk() (*string, bool) {
	if o == nil || IsNil(o.Epid) {
		return nil, false
	}
	return o.Epid, true
}

// HasEpid returns a boolean if a field has been set.
func (o *CoreItem) HasEpid() bool {
	if o != nil && !IsNil(o.Epid) {
		return true
	}

	return false
}

// SetEpid gets a reference to the given string and assigns it to the Epid field.
func (o *CoreItem) SetEpid(v string) {
	o.Epid = &v
}

// GetEstimatedAvailabilities returns the EstimatedAvailabilities field value if set, zero value otherwise.
func (o *CoreItem) GetEstimatedAvailabilities() []EstimatedAvailability {
	if o == nil || IsNil(o.EstimatedAvailabilities) {
		var ret []EstimatedAvailability
		return ret
	}
	return o.EstimatedAvailabilities
}

// GetEstimatedAvailabilitiesOk returns a tuple with the EstimatedAvailabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetEstimatedAvailabilitiesOk() ([]EstimatedAvailability, bool) {
	if o == nil || IsNil(o.EstimatedAvailabilities) {
		return nil, false
	}
	return o.EstimatedAvailabilities, true
}

// HasEstimatedAvailabilities returns a boolean if a field has been set.
func (o *CoreItem) HasEstimatedAvailabilities() bool {
	if o != nil && !IsNil(o.EstimatedAvailabilities) {
		return true
	}

	return false
}

// SetEstimatedAvailabilities gets a reference to the given []EstimatedAvailability and assigns it to the EstimatedAvailabilities field.
func (o *CoreItem) SetEstimatedAvailabilities(v []EstimatedAvailability) {
	o.EstimatedAvailabilities = v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *CoreItem) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *CoreItem) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *CoreItem) SetGender(v string) {
	o.Gender = &v
}

// GetGtin returns the Gtin field value if set, zero value otherwise.
func (o *CoreItem) GetGtin() string {
	if o == nil || IsNil(o.Gtin) {
		var ret string
		return ret
	}
	return *o.Gtin
}

// GetGtinOk returns a tuple with the Gtin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetGtinOk() (*string, bool) {
	if o == nil || IsNil(o.Gtin) {
		return nil, false
	}
	return o.Gtin, true
}

// HasGtin returns a boolean if a field has been set.
func (o *CoreItem) HasGtin() bool {
	if o != nil && !IsNil(o.Gtin) {
		return true
	}

	return false
}

// SetGtin gets a reference to the given string and assigns it to the Gtin field.
func (o *CoreItem) SetGtin(v string) {
	o.Gtin = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CoreItem) GetImage() Image {
	if o == nil || IsNil(o.Image) {
		var ret Image
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetImageOk() (*Image, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CoreItem) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given Image and assigns it to the Image field.
func (o *CoreItem) SetImage(v Image) {
	o.Image = &v
}

// GetInferredEpid returns the InferredEpid field value if set, zero value otherwise.
func (o *CoreItem) GetInferredEpid() string {
	if o == nil || IsNil(o.InferredEpid) {
		var ret string
		return ret
	}
	return *o.InferredEpid
}

// GetInferredEpidOk returns a tuple with the InferredEpid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetInferredEpidOk() (*string, bool) {
	if o == nil || IsNil(o.InferredEpid) {
		return nil, false
	}
	return o.InferredEpid, true
}

// HasInferredEpid returns a boolean if a field has been set.
func (o *CoreItem) HasInferredEpid() bool {
	if o != nil && !IsNil(o.InferredEpid) {
		return true
	}

	return false
}

// SetInferredEpid gets a reference to the given string and assigns it to the InferredEpid field.
func (o *CoreItem) SetInferredEpid(v string) {
	o.InferredEpid = &v
}

// GetItemAffiliateWebUrl returns the ItemAffiliateWebUrl field value if set, zero value otherwise.
func (o *CoreItem) GetItemAffiliateWebUrl() string {
	if o == nil || IsNil(o.ItemAffiliateWebUrl) {
		var ret string
		return ret
	}
	return *o.ItemAffiliateWebUrl
}

// GetItemAffiliateWebUrlOk returns a tuple with the ItemAffiliateWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetItemAffiliateWebUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ItemAffiliateWebUrl) {
		return nil, false
	}
	return o.ItemAffiliateWebUrl, true
}

// HasItemAffiliateWebUrl returns a boolean if a field has been set.
func (o *CoreItem) HasItemAffiliateWebUrl() bool {
	if o != nil && !IsNil(o.ItemAffiliateWebUrl) {
		return true
	}

	return false
}

// SetItemAffiliateWebUrl gets a reference to the given string and assigns it to the ItemAffiliateWebUrl field.
func (o *CoreItem) SetItemAffiliateWebUrl(v string) {
	o.ItemAffiliateWebUrl = &v
}

// GetItemCreationDate returns the ItemCreationDate field value if set, zero value otherwise.
func (o *CoreItem) GetItemCreationDate() string {
	if o == nil || IsNil(o.ItemCreationDate) {
		var ret string
		return ret
	}
	return *o.ItemCreationDate
}

// GetItemCreationDateOk returns a tuple with the ItemCreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetItemCreationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCreationDate) {
		return nil, false
	}
	return o.ItemCreationDate, true
}

// HasItemCreationDate returns a boolean if a field has been set.
func (o *CoreItem) HasItemCreationDate() bool {
	if o != nil && !IsNil(o.ItemCreationDate) {
		return true
	}

	return false
}

// SetItemCreationDate gets a reference to the given string and assigns it to the ItemCreationDate field.
func (o *CoreItem) SetItemCreationDate(v string) {
	o.ItemCreationDate = &v
}

// GetItemEndDate returns the ItemEndDate field value if set, zero value otherwise.
func (o *CoreItem) GetItemEndDate() string {
	if o == nil || IsNil(o.ItemEndDate) {
		var ret string
		return ret
	}
	return *o.ItemEndDate
}

// GetItemEndDateOk returns a tuple with the ItemEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetItemEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ItemEndDate) {
		return nil, false
	}
	return o.ItemEndDate, true
}

// HasItemEndDate returns a boolean if a field has been set.
func (o *CoreItem) HasItemEndDate() bool {
	if o != nil && !IsNil(o.ItemEndDate) {
		return true
	}

	return false
}

// SetItemEndDate gets a reference to the given string and assigns it to the ItemEndDate field.
func (o *CoreItem) SetItemEndDate(v string) {
	o.ItemEndDate = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *CoreItem) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *CoreItem) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *CoreItem) SetItemId(v string) {
	o.ItemId = &v
}

// GetItemLocation returns the ItemLocation field value if set, zero value otherwise.
func (o *CoreItem) GetItemLocation() Address {
	if o == nil || IsNil(o.ItemLocation) {
		var ret Address
		return ret
	}
	return *o.ItemLocation
}

// GetItemLocationOk returns a tuple with the ItemLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetItemLocationOk() (*Address, bool) {
	if o == nil || IsNil(o.ItemLocation) {
		return nil, false
	}
	return o.ItemLocation, true
}

// HasItemLocation returns a boolean if a field has been set.
func (o *CoreItem) HasItemLocation() bool {
	if o != nil && !IsNil(o.ItemLocation) {
		return true
	}

	return false
}

// SetItemLocation gets a reference to the given Address and assigns it to the ItemLocation field.
func (o *CoreItem) SetItemLocation(v Address) {
	o.ItemLocation = &v
}

// GetItemWebUrl returns the ItemWebUrl field value if set, zero value otherwise.
func (o *CoreItem) GetItemWebUrl() string {
	if o == nil || IsNil(o.ItemWebUrl) {
		var ret string
		return ret
	}
	return *o.ItemWebUrl
}

// GetItemWebUrlOk returns a tuple with the ItemWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetItemWebUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ItemWebUrl) {
		return nil, false
	}
	return o.ItemWebUrl, true
}

// HasItemWebUrl returns a boolean if a field has been set.
func (o *CoreItem) HasItemWebUrl() bool {
	if o != nil && !IsNil(o.ItemWebUrl) {
		return true
	}

	return false
}

// SetItemWebUrl gets a reference to the given string and assigns it to the ItemWebUrl field.
func (o *CoreItem) SetItemWebUrl(v string) {
	o.ItemWebUrl = &v
}

// GetLegacyItemId returns the LegacyItemId field value if set, zero value otherwise.
func (o *CoreItem) GetLegacyItemId() string {
	if o == nil || IsNil(o.LegacyItemId) {
		var ret string
		return ret
	}
	return *o.LegacyItemId
}

// GetLegacyItemIdOk returns a tuple with the LegacyItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetLegacyItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyItemId) {
		return nil, false
	}
	return o.LegacyItemId, true
}

// HasLegacyItemId returns a boolean if a field has been set.
func (o *CoreItem) HasLegacyItemId() bool {
	if o != nil && !IsNil(o.LegacyItemId) {
		return true
	}

	return false
}

// SetLegacyItemId gets a reference to the given string and assigns it to the LegacyItemId field.
func (o *CoreItem) SetLegacyItemId(v string) {
	o.LegacyItemId = &v
}

// GetLocalizedAspects returns the LocalizedAspects field value if set, zero value otherwise.
func (o *CoreItem) GetLocalizedAspects() []TypedNameValue {
	if o == nil || IsNil(o.LocalizedAspects) {
		var ret []TypedNameValue
		return ret
	}
	return o.LocalizedAspects
}

// GetLocalizedAspectsOk returns a tuple with the LocalizedAspects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetLocalizedAspectsOk() ([]TypedNameValue, bool) {
	if o == nil || IsNil(o.LocalizedAspects) {
		return nil, false
	}
	return o.LocalizedAspects, true
}

// HasLocalizedAspects returns a boolean if a field has been set.
func (o *CoreItem) HasLocalizedAspects() bool {
	if o != nil && !IsNil(o.LocalizedAspects) {
		return true
	}

	return false
}

// SetLocalizedAspects gets a reference to the given []TypedNameValue and assigns it to the LocalizedAspects field.
func (o *CoreItem) SetLocalizedAspects(v []TypedNameValue) {
	o.LocalizedAspects = v
}

// GetLotSize returns the LotSize field value if set, zero value otherwise.
func (o *CoreItem) GetLotSize() int32 {
	if o == nil || IsNil(o.LotSize) {
		var ret int32
		return ret
	}
	return *o.LotSize
}

// GetLotSizeOk returns a tuple with the LotSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetLotSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.LotSize) {
		return nil, false
	}
	return o.LotSize, true
}

// HasLotSize returns a boolean if a field has been set.
func (o *CoreItem) HasLotSize() bool {
	if o != nil && !IsNil(o.LotSize) {
		return true
	}

	return false
}

// SetLotSize gets a reference to the given int32 and assigns it to the LotSize field.
func (o *CoreItem) SetLotSize(v int32) {
	o.LotSize = &v
}

// GetMarketingPrice returns the MarketingPrice field value if set, zero value otherwise.
func (o *CoreItem) GetMarketingPrice() MarketingPrice {
	if o == nil || IsNil(o.MarketingPrice) {
		var ret MarketingPrice
		return ret
	}
	return *o.MarketingPrice
}

// GetMarketingPriceOk returns a tuple with the MarketingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetMarketingPriceOk() (*MarketingPrice, bool) {
	if o == nil || IsNil(o.MarketingPrice) {
		return nil, false
	}
	return o.MarketingPrice, true
}

// HasMarketingPrice returns a boolean if a field has been set.
func (o *CoreItem) HasMarketingPrice() bool {
	if o != nil && !IsNil(o.MarketingPrice) {
		return true
	}

	return false
}

// SetMarketingPrice gets a reference to the given MarketingPrice and assigns it to the MarketingPrice field.
func (o *CoreItem) SetMarketingPrice(v MarketingPrice) {
	o.MarketingPrice = &v
}

// GetMaterial returns the Material field value if set, zero value otherwise.
func (o *CoreItem) GetMaterial() string {
	if o == nil || IsNil(o.Material) {
		var ret string
		return ret
	}
	return *o.Material
}

// GetMaterialOk returns a tuple with the Material field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetMaterialOk() (*string, bool) {
	if o == nil || IsNil(o.Material) {
		return nil, false
	}
	return o.Material, true
}

// HasMaterial returns a boolean if a field has been set.
func (o *CoreItem) HasMaterial() bool {
	if o != nil && !IsNil(o.Material) {
		return true
	}

	return false
}

// SetMaterial gets a reference to the given string and assigns it to the Material field.
func (o *CoreItem) SetMaterial(v string) {
	o.Material = &v
}

// GetMinimumPriceToBid returns the MinimumPriceToBid field value if set, zero value otherwise.
func (o *CoreItem) GetMinimumPriceToBid() ConvertedAmount {
	if o == nil || IsNil(o.MinimumPriceToBid) {
		var ret ConvertedAmount
		return ret
	}
	return *o.MinimumPriceToBid
}

// GetMinimumPriceToBidOk returns a tuple with the MinimumPriceToBid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetMinimumPriceToBidOk() (*ConvertedAmount, bool) {
	if o == nil || IsNil(o.MinimumPriceToBid) {
		return nil, false
	}
	return o.MinimumPriceToBid, true
}

// HasMinimumPriceToBid returns a boolean if a field has been set.
func (o *CoreItem) HasMinimumPriceToBid() bool {
	if o != nil && !IsNil(o.MinimumPriceToBid) {
		return true
	}

	return false
}

// SetMinimumPriceToBid gets a reference to the given ConvertedAmount and assigns it to the MinimumPriceToBid field.
func (o *CoreItem) SetMinimumPriceToBid(v ConvertedAmount) {
	o.MinimumPriceToBid = &v
}

// GetMpn returns the Mpn field value if set, zero value otherwise.
func (o *CoreItem) GetMpn() string {
	if o == nil || IsNil(o.Mpn) {
		var ret string
		return ret
	}
	return *o.Mpn
}

// GetMpnOk returns a tuple with the Mpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetMpnOk() (*string, bool) {
	if o == nil || IsNil(o.Mpn) {
		return nil, false
	}
	return o.Mpn, true
}

// HasMpn returns a boolean if a field has been set.
func (o *CoreItem) HasMpn() bool {
	if o != nil && !IsNil(o.Mpn) {
		return true
	}

	return false
}

// SetMpn gets a reference to the given string and assigns it to the Mpn field.
func (o *CoreItem) SetMpn(v string) {
	o.Mpn = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *CoreItem) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *CoreItem) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *CoreItem) SetPattern(v string) {
	o.Pattern = &v
}

// GetPaymentMethods returns the PaymentMethods field value if set, zero value otherwise.
func (o *CoreItem) GetPaymentMethods() []PaymentMethod {
	if o == nil || IsNil(o.PaymentMethods) {
		var ret []PaymentMethod
		return ret
	}
	return o.PaymentMethods
}

// GetPaymentMethodsOk returns a tuple with the PaymentMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetPaymentMethodsOk() ([]PaymentMethod, bool) {
	if o == nil || IsNil(o.PaymentMethods) {
		return nil, false
	}
	return o.PaymentMethods, true
}

// HasPaymentMethods returns a boolean if a field has been set.
func (o *CoreItem) HasPaymentMethods() bool {
	if o != nil && !IsNil(o.PaymentMethods) {
		return true
	}

	return false
}

// SetPaymentMethods gets a reference to the given []PaymentMethod and assigns it to the PaymentMethods field.
func (o *CoreItem) SetPaymentMethods(v []PaymentMethod) {
	o.PaymentMethods = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CoreItem) GetPrice() ConvertedAmount {
	if o == nil || IsNil(o.Price) {
		var ret ConvertedAmount
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetPriceOk() (*ConvertedAmount, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CoreItem) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given ConvertedAmount and assigns it to the Price field.
func (o *CoreItem) SetPrice(v ConvertedAmount) {
	o.Price = &v
}

// GetPriceDisplayCondition returns the PriceDisplayCondition field value if set, zero value otherwise.
func (o *CoreItem) GetPriceDisplayCondition() string {
	if o == nil || IsNil(o.PriceDisplayCondition) {
		var ret string
		return ret
	}
	return *o.PriceDisplayCondition
}

// GetPriceDisplayConditionOk returns a tuple with the PriceDisplayCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetPriceDisplayConditionOk() (*string, bool) {
	if o == nil || IsNil(o.PriceDisplayCondition) {
		return nil, false
	}
	return o.PriceDisplayCondition, true
}

// HasPriceDisplayCondition returns a boolean if a field has been set.
func (o *CoreItem) HasPriceDisplayCondition() bool {
	if o != nil && !IsNil(o.PriceDisplayCondition) {
		return true
	}

	return false
}

// SetPriceDisplayCondition gets a reference to the given string and assigns it to the PriceDisplayCondition field.
func (o *CoreItem) SetPriceDisplayCondition(v string) {
	o.PriceDisplayCondition = &v
}

// GetPrimaryItemGroup returns the PrimaryItemGroup field value if set, zero value otherwise.
func (o *CoreItem) GetPrimaryItemGroup() ItemGroupSummary {
	if o == nil || IsNil(o.PrimaryItemGroup) {
		var ret ItemGroupSummary
		return ret
	}
	return *o.PrimaryItemGroup
}

// GetPrimaryItemGroupOk returns a tuple with the PrimaryItemGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetPrimaryItemGroupOk() (*ItemGroupSummary, bool) {
	if o == nil || IsNil(o.PrimaryItemGroup) {
		return nil, false
	}
	return o.PrimaryItemGroup, true
}

// HasPrimaryItemGroup returns a boolean if a field has been set.
func (o *CoreItem) HasPrimaryItemGroup() bool {
	if o != nil && !IsNil(o.PrimaryItemGroup) {
		return true
	}

	return false
}

// SetPrimaryItemGroup gets a reference to the given ItemGroupSummary and assigns it to the PrimaryItemGroup field.
func (o *CoreItem) SetPrimaryItemGroup(v ItemGroupSummary) {
	o.PrimaryItemGroup = &v
}

// GetPrimaryProductReviewRating returns the PrimaryProductReviewRating field value if set, zero value otherwise.
func (o *CoreItem) GetPrimaryProductReviewRating() ReviewRating {
	if o == nil || IsNil(o.PrimaryProductReviewRating) {
		var ret ReviewRating
		return ret
	}
	return *o.PrimaryProductReviewRating
}

// GetPrimaryProductReviewRatingOk returns a tuple with the PrimaryProductReviewRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetPrimaryProductReviewRatingOk() (*ReviewRating, bool) {
	if o == nil || IsNil(o.PrimaryProductReviewRating) {
		return nil, false
	}
	return o.PrimaryProductReviewRating, true
}

// HasPrimaryProductReviewRating returns a boolean if a field has been set.
func (o *CoreItem) HasPrimaryProductReviewRating() bool {
	if o != nil && !IsNil(o.PrimaryProductReviewRating) {
		return true
	}

	return false
}

// SetPrimaryProductReviewRating gets a reference to the given ReviewRating and assigns it to the PrimaryProductReviewRating field.
func (o *CoreItem) SetPrimaryProductReviewRating(v ReviewRating) {
	o.PrimaryProductReviewRating = &v
}

// GetPriorityListing returns the PriorityListing field value if set, zero value otherwise.
func (o *CoreItem) GetPriorityListing() bool {
	if o == nil || IsNil(o.PriorityListing) {
		var ret bool
		return ret
	}
	return *o.PriorityListing
}

// GetPriorityListingOk returns a tuple with the PriorityListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetPriorityListingOk() (*bool, bool) {
	if o == nil || IsNil(o.PriorityListing) {
		return nil, false
	}
	return o.PriorityListing, true
}

// HasPriorityListing returns a boolean if a field has been set.
func (o *CoreItem) HasPriorityListing() bool {
	if o != nil && !IsNil(o.PriorityListing) {
		return true
	}

	return false
}

// SetPriorityListing gets a reference to the given bool and assigns it to the PriorityListing field.
func (o *CoreItem) SetPriorityListing(v bool) {
	o.PriorityListing = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *CoreItem) GetProduct() Product {
	if o == nil || IsNil(o.Product) {
		var ret Product
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetProductOk() (*Product, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *CoreItem) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given Product and assigns it to the Product field.
func (o *CoreItem) SetProduct(v Product) {
	o.Product = &v
}

// GetProductFicheWebUrl returns the ProductFicheWebUrl field value if set, zero value otherwise.
func (o *CoreItem) GetProductFicheWebUrl() string {
	if o == nil || IsNil(o.ProductFicheWebUrl) {
		var ret string
		return ret
	}
	return *o.ProductFicheWebUrl
}

// GetProductFicheWebUrlOk returns a tuple with the ProductFicheWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetProductFicheWebUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProductFicheWebUrl) {
		return nil, false
	}
	return o.ProductFicheWebUrl, true
}

// HasProductFicheWebUrl returns a boolean if a field has been set.
func (o *CoreItem) HasProductFicheWebUrl() bool {
	if o != nil && !IsNil(o.ProductFicheWebUrl) {
		return true
	}

	return false
}

// SetProductFicheWebUrl gets a reference to the given string and assigns it to the ProductFicheWebUrl field.
func (o *CoreItem) SetProductFicheWebUrl(v string) {
	o.ProductFicheWebUrl = &v
}

// GetQualifiedPrograms returns the QualifiedPrograms field value if set, zero value otherwise.
func (o *CoreItem) GetQualifiedPrograms() []string {
	if o == nil || IsNil(o.QualifiedPrograms) {
		var ret []string
		return ret
	}
	return o.QualifiedPrograms
}

// GetQualifiedProgramsOk returns a tuple with the QualifiedPrograms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetQualifiedProgramsOk() ([]string, bool) {
	if o == nil || IsNil(o.QualifiedPrograms) {
		return nil, false
	}
	return o.QualifiedPrograms, true
}

// HasQualifiedPrograms returns a boolean if a field has been set.
func (o *CoreItem) HasQualifiedPrograms() bool {
	if o != nil && !IsNil(o.QualifiedPrograms) {
		return true
	}

	return false
}

// SetQualifiedPrograms gets a reference to the given []string and assigns it to the QualifiedPrograms field.
func (o *CoreItem) SetQualifiedPrograms(v []string) {
	o.QualifiedPrograms = v
}

// GetQuantityLimitPerBuyer returns the QuantityLimitPerBuyer field value if set, zero value otherwise.
func (o *CoreItem) GetQuantityLimitPerBuyer() int32 {
	if o == nil || IsNil(o.QuantityLimitPerBuyer) {
		var ret int32
		return ret
	}
	return *o.QuantityLimitPerBuyer
}

// GetQuantityLimitPerBuyerOk returns a tuple with the QuantityLimitPerBuyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetQuantityLimitPerBuyerOk() (*int32, bool) {
	if o == nil || IsNil(o.QuantityLimitPerBuyer) {
		return nil, false
	}
	return o.QuantityLimitPerBuyer, true
}

// HasQuantityLimitPerBuyer returns a boolean if a field has been set.
func (o *CoreItem) HasQuantityLimitPerBuyer() bool {
	if o != nil && !IsNil(o.QuantityLimitPerBuyer) {
		return true
	}

	return false
}

// SetQuantityLimitPerBuyer gets a reference to the given int32 and assigns it to the QuantityLimitPerBuyer field.
func (o *CoreItem) SetQuantityLimitPerBuyer(v int32) {
	o.QuantityLimitPerBuyer = &v
}

// GetReservePriceMet returns the ReservePriceMet field value if set, zero value otherwise.
func (o *CoreItem) GetReservePriceMet() bool {
	if o == nil || IsNil(o.ReservePriceMet) {
		var ret bool
		return ret
	}
	return *o.ReservePriceMet
}

// GetReservePriceMetOk returns a tuple with the ReservePriceMet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetReservePriceMetOk() (*bool, bool) {
	if o == nil || IsNil(o.ReservePriceMet) {
		return nil, false
	}
	return o.ReservePriceMet, true
}

// HasReservePriceMet returns a boolean if a field has been set.
func (o *CoreItem) HasReservePriceMet() bool {
	if o != nil && !IsNil(o.ReservePriceMet) {
		return true
	}

	return false
}

// SetReservePriceMet gets a reference to the given bool and assigns it to the ReservePriceMet field.
func (o *CoreItem) SetReservePriceMet(v bool) {
	o.ReservePriceMet = &v
}

// GetReturnTerms returns the ReturnTerms field value if set, zero value otherwise.
func (o *CoreItem) GetReturnTerms() ItemReturnTerms {
	if o == nil || IsNil(o.ReturnTerms) {
		var ret ItemReturnTerms
		return ret
	}
	return *o.ReturnTerms
}

// GetReturnTermsOk returns a tuple with the ReturnTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetReturnTermsOk() (*ItemReturnTerms, bool) {
	if o == nil || IsNil(o.ReturnTerms) {
		return nil, false
	}
	return o.ReturnTerms, true
}

// HasReturnTerms returns a boolean if a field has been set.
func (o *CoreItem) HasReturnTerms() bool {
	if o != nil && !IsNil(o.ReturnTerms) {
		return true
	}

	return false
}

// SetReturnTerms gets a reference to the given ItemReturnTerms and assigns it to the ReturnTerms field.
func (o *CoreItem) SetReturnTerms(v ItemReturnTerms) {
	o.ReturnTerms = &v
}

// GetSeller returns the Seller field value if set, zero value otherwise.
func (o *CoreItem) GetSeller() SellerDetail {
	if o == nil || IsNil(o.Seller) {
		var ret SellerDetail
		return ret
	}
	return *o.Seller
}

// GetSellerOk returns a tuple with the Seller field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetSellerOk() (*SellerDetail, bool) {
	if o == nil || IsNil(o.Seller) {
		return nil, false
	}
	return o.Seller, true
}

// HasSeller returns a boolean if a field has been set.
func (o *CoreItem) HasSeller() bool {
	if o != nil && !IsNil(o.Seller) {
		return true
	}

	return false
}

// SetSeller gets a reference to the given SellerDetail and assigns it to the Seller field.
func (o *CoreItem) SetSeller(v SellerDetail) {
	o.Seller = &v
}

// GetSellerItemRevision returns the SellerItemRevision field value if set, zero value otherwise.
func (o *CoreItem) GetSellerItemRevision() string {
	if o == nil || IsNil(o.SellerItemRevision) {
		var ret string
		return ret
	}
	return *o.SellerItemRevision
}

// GetSellerItemRevisionOk returns a tuple with the SellerItemRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetSellerItemRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.SellerItemRevision) {
		return nil, false
	}
	return o.SellerItemRevision, true
}

// HasSellerItemRevision returns a boolean if a field has been set.
func (o *CoreItem) HasSellerItemRevision() bool {
	if o != nil && !IsNil(o.SellerItemRevision) {
		return true
	}

	return false
}

// SetSellerItemRevision gets a reference to the given string and assigns it to the SellerItemRevision field.
func (o *CoreItem) SetSellerItemRevision(v string) {
	o.SellerItemRevision = &v
}

// GetShippingOptions returns the ShippingOptions field value if set, zero value otherwise.
func (o *CoreItem) GetShippingOptions() []ShippingOption {
	if o == nil || IsNil(o.ShippingOptions) {
		var ret []ShippingOption
		return ret
	}
	return o.ShippingOptions
}

// GetShippingOptionsOk returns a tuple with the ShippingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetShippingOptionsOk() ([]ShippingOption, bool) {
	if o == nil || IsNil(o.ShippingOptions) {
		return nil, false
	}
	return o.ShippingOptions, true
}

// HasShippingOptions returns a boolean if a field has been set.
func (o *CoreItem) HasShippingOptions() bool {
	if o != nil && !IsNil(o.ShippingOptions) {
		return true
	}

	return false
}

// SetShippingOptions gets a reference to the given []ShippingOption and assigns it to the ShippingOptions field.
func (o *CoreItem) SetShippingOptions(v []ShippingOption) {
	o.ShippingOptions = v
}

// GetShipToLocations returns the ShipToLocations field value if set, zero value otherwise.
func (o *CoreItem) GetShipToLocations() ShipToLocations {
	if o == nil || IsNil(o.ShipToLocations) {
		var ret ShipToLocations
		return ret
	}
	return *o.ShipToLocations
}

// GetShipToLocationsOk returns a tuple with the ShipToLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetShipToLocationsOk() (*ShipToLocations, bool) {
	if o == nil || IsNil(o.ShipToLocations) {
		return nil, false
	}
	return o.ShipToLocations, true
}

// HasShipToLocations returns a boolean if a field has been set.
func (o *CoreItem) HasShipToLocations() bool {
	if o != nil && !IsNil(o.ShipToLocations) {
		return true
	}

	return false
}

// SetShipToLocations gets a reference to the given ShipToLocations and assigns it to the ShipToLocations field.
func (o *CoreItem) SetShipToLocations(v ShipToLocations) {
	o.ShipToLocations = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *CoreItem) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *CoreItem) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *CoreItem) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CoreItem) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CoreItem) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *CoreItem) SetSize(v string) {
	o.Size = &v
}

// GetSizeSystem returns the SizeSystem field value if set, zero value otherwise.
func (o *CoreItem) GetSizeSystem() string {
	if o == nil || IsNil(o.SizeSystem) {
		var ret string
		return ret
	}
	return *o.SizeSystem
}

// GetSizeSystemOk returns a tuple with the SizeSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetSizeSystemOk() (*string, bool) {
	if o == nil || IsNil(o.SizeSystem) {
		return nil, false
	}
	return o.SizeSystem, true
}

// HasSizeSystem returns a boolean if a field has been set.
func (o *CoreItem) HasSizeSystem() bool {
	if o != nil && !IsNil(o.SizeSystem) {
		return true
	}

	return false
}

// SetSizeSystem gets a reference to the given string and assigns it to the SizeSystem field.
func (o *CoreItem) SetSizeSystem(v string) {
	o.SizeSystem = &v
}

// GetSizeType returns the SizeType field value if set, zero value otherwise.
func (o *CoreItem) GetSizeType() string {
	if o == nil || IsNil(o.SizeType) {
		var ret string
		return ret
	}
	return *o.SizeType
}

// GetSizeTypeOk returns a tuple with the SizeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetSizeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SizeType) {
		return nil, false
	}
	return o.SizeType, true
}

// HasSizeType returns a boolean if a field has been set.
func (o *CoreItem) HasSizeType() bool {
	if o != nil && !IsNil(o.SizeType) {
		return true
	}

	return false
}

// SetSizeType gets a reference to the given string and assigns it to the SizeType field.
func (o *CoreItem) SetSizeType(v string) {
	o.SizeType = &v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *CoreItem) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *CoreItem) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *CoreItem) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetTaxes returns the Taxes field value if set, zero value otherwise.
func (o *CoreItem) GetTaxes() []Taxes {
	if o == nil || IsNil(o.Taxes) {
		var ret []Taxes
		return ret
	}
	return o.Taxes
}

// GetTaxesOk returns a tuple with the Taxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetTaxesOk() ([]Taxes, bool) {
	if o == nil || IsNil(o.Taxes) {
		return nil, false
	}
	return o.Taxes, true
}

// HasTaxes returns a boolean if a field has been set.
func (o *CoreItem) HasTaxes() bool {
	if o != nil && !IsNil(o.Taxes) {
		return true
	}

	return false
}

// SetTaxes gets a reference to the given []Taxes and assigns it to the Taxes field.
func (o *CoreItem) SetTaxes(v []Taxes) {
	o.Taxes = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CoreItem) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CoreItem) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CoreItem) SetTitle(v string) {
	o.Title = &v
}

// GetTopRatedBuyingExperience returns the TopRatedBuyingExperience field value if set, zero value otherwise.
func (o *CoreItem) GetTopRatedBuyingExperience() bool {
	if o == nil || IsNil(o.TopRatedBuyingExperience) {
		var ret bool
		return ret
	}
	return *o.TopRatedBuyingExperience
}

// GetTopRatedBuyingExperienceOk returns a tuple with the TopRatedBuyingExperience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetTopRatedBuyingExperienceOk() (*bool, bool) {
	if o == nil || IsNil(o.TopRatedBuyingExperience) {
		return nil, false
	}
	return o.TopRatedBuyingExperience, true
}

// HasTopRatedBuyingExperience returns a boolean if a field has been set.
func (o *CoreItem) HasTopRatedBuyingExperience() bool {
	if o != nil && !IsNil(o.TopRatedBuyingExperience) {
		return true
	}

	return false
}

// SetTopRatedBuyingExperience gets a reference to the given bool and assigns it to the TopRatedBuyingExperience field.
func (o *CoreItem) SetTopRatedBuyingExperience(v bool) {
	o.TopRatedBuyingExperience = &v
}

// GetTyreLabelImageUrl returns the TyreLabelImageUrl field value if set, zero value otherwise.
func (o *CoreItem) GetTyreLabelImageUrl() string {
	if o == nil || IsNil(o.TyreLabelImageUrl) {
		var ret string
		return ret
	}
	return *o.TyreLabelImageUrl
}

// GetTyreLabelImageUrlOk returns a tuple with the TyreLabelImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetTyreLabelImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TyreLabelImageUrl) {
		return nil, false
	}
	return o.TyreLabelImageUrl, true
}

// HasTyreLabelImageUrl returns a boolean if a field has been set.
func (o *CoreItem) HasTyreLabelImageUrl() bool {
	if o != nil && !IsNil(o.TyreLabelImageUrl) {
		return true
	}

	return false
}

// SetTyreLabelImageUrl gets a reference to the given string and assigns it to the TyreLabelImageUrl field.
func (o *CoreItem) SetTyreLabelImageUrl(v string) {
	o.TyreLabelImageUrl = &v
}

// GetUniqueBidderCount returns the UniqueBidderCount field value if set, zero value otherwise.
func (o *CoreItem) GetUniqueBidderCount() int32 {
	if o == nil || IsNil(o.UniqueBidderCount) {
		var ret int32
		return ret
	}
	return *o.UniqueBidderCount
}

// GetUniqueBidderCountOk returns a tuple with the UniqueBidderCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetUniqueBidderCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueBidderCount) {
		return nil, false
	}
	return o.UniqueBidderCount, true
}

// HasUniqueBidderCount returns a boolean if a field has been set.
func (o *CoreItem) HasUniqueBidderCount() bool {
	if o != nil && !IsNil(o.UniqueBidderCount) {
		return true
	}

	return false
}

// SetUniqueBidderCount gets a reference to the given int32 and assigns it to the UniqueBidderCount field.
func (o *CoreItem) SetUniqueBidderCount(v int32) {
	o.UniqueBidderCount = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *CoreItem) GetUnitPrice() ConvertedAmount {
	if o == nil || IsNil(o.UnitPrice) {
		var ret ConvertedAmount
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetUnitPriceOk() (*ConvertedAmount, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *CoreItem) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given ConvertedAmount and assigns it to the UnitPrice field.
func (o *CoreItem) SetUnitPrice(v ConvertedAmount) {
	o.UnitPrice = &v
}

// GetUnitPricingMeasure returns the UnitPricingMeasure field value if set, zero value otherwise.
func (o *CoreItem) GetUnitPricingMeasure() string {
	if o == nil || IsNil(o.UnitPricingMeasure) {
		var ret string
		return ret
	}
	return *o.UnitPricingMeasure
}

// GetUnitPricingMeasureOk returns a tuple with the UnitPricingMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreItem) GetUnitPricingMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.UnitPricingMeasure) {
		return nil, false
	}
	return o.UnitPricingMeasure, true
}

// HasUnitPricingMeasure returns a boolean if a field has been set.
func (o *CoreItem) HasUnitPricingMeasure() bool {
	if o != nil && !IsNil(o.UnitPricingMeasure) {
		return true
	}

	return false
}

// SetUnitPricingMeasure gets a reference to the given string and assigns it to the UnitPricingMeasure field.
func (o *CoreItem) SetUnitPricingMeasure(v string) {
	o.UnitPricingMeasure = &v
}

func (o CoreItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalImages) {
		toSerialize["additionalImages"] = o.AdditionalImages
	}
	if !IsNil(o.AdultOnly) {
		toSerialize["adultOnly"] = o.AdultOnly
	}
	if !IsNil(o.AgeGroup) {
		toSerialize["ageGroup"] = o.AgeGroup
	}
	if !IsNil(o.AuthenticityGuarantee) {
		toSerialize["authenticityGuarantee"] = o.AuthenticityGuarantee
	}
	if !IsNil(o.AuthenticityVerification) {
		toSerialize["authenticityVerification"] = o.AuthenticityVerification
	}
	if !IsNil(o.AvailableCoupons) {
		toSerialize["availableCoupons"] = o.AvailableCoupons
	}
	if !IsNil(o.BidCount) {
		toSerialize["bidCount"] = o.BidCount
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.BuyingOptions) {
		toSerialize["buyingOptions"] = o.BuyingOptions
	}
	if !IsNil(o.CategoryId) {
		toSerialize["categoryId"] = o.CategoryId
	}
	if !IsNil(o.CategoryPath) {
		toSerialize["categoryPath"] = o.CategoryPath
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.ConditionDescription) {
		toSerialize["conditionDescription"] = o.ConditionDescription
	}
	if !IsNil(o.ConditionId) {
		toSerialize["conditionId"] = o.ConditionId
	}
	if !IsNil(o.CurrentBidPrice) {
		toSerialize["currentBidPrice"] = o.CurrentBidPrice
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EligibleForInlineCheckout) {
		toSerialize["eligibleForInlineCheckout"] = o.EligibleForInlineCheckout
	}
	if !IsNil(o.EnabledForGuestCheckout) {
		toSerialize["enabledForGuestCheckout"] = o.EnabledForGuestCheckout
	}
	if !IsNil(o.EnergyEfficiencyClass) {
		toSerialize["energyEfficiencyClass"] = o.EnergyEfficiencyClass
	}
	if !IsNil(o.Epid) {
		toSerialize["epid"] = o.Epid
	}
	if !IsNil(o.EstimatedAvailabilities) {
		toSerialize["estimatedAvailabilities"] = o.EstimatedAvailabilities
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Gtin) {
		toSerialize["gtin"] = o.Gtin
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.InferredEpid) {
		toSerialize["inferredEpid"] = o.InferredEpid
	}
	if !IsNil(o.ItemAffiliateWebUrl) {
		toSerialize["itemAffiliateWebUrl"] = o.ItemAffiliateWebUrl
	}
	if !IsNil(o.ItemCreationDate) {
		toSerialize["itemCreationDate"] = o.ItemCreationDate
	}
	if !IsNil(o.ItemEndDate) {
		toSerialize["itemEndDate"] = o.ItemEndDate
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.ItemLocation) {
		toSerialize["itemLocation"] = o.ItemLocation
	}
	if !IsNil(o.ItemWebUrl) {
		toSerialize["itemWebUrl"] = o.ItemWebUrl
	}
	if !IsNil(o.LegacyItemId) {
		toSerialize["legacyItemId"] = o.LegacyItemId
	}
	if !IsNil(o.LocalizedAspects) {
		toSerialize["localizedAspects"] = o.LocalizedAspects
	}
	if !IsNil(o.LotSize) {
		toSerialize["lotSize"] = o.LotSize
	}
	if !IsNil(o.MarketingPrice) {
		toSerialize["marketingPrice"] = o.MarketingPrice
	}
	if !IsNil(o.Material) {
		toSerialize["material"] = o.Material
	}
	if !IsNil(o.MinimumPriceToBid) {
		toSerialize["minimumPriceToBid"] = o.MinimumPriceToBid
	}
	if !IsNil(o.Mpn) {
		toSerialize["mpn"] = o.Mpn
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.PaymentMethods) {
		toSerialize["paymentMethods"] = o.PaymentMethods
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceDisplayCondition) {
		toSerialize["priceDisplayCondition"] = o.PriceDisplayCondition
	}
	if !IsNil(o.PrimaryItemGroup) {
		toSerialize["primaryItemGroup"] = o.PrimaryItemGroup
	}
	if !IsNil(o.PrimaryProductReviewRating) {
		toSerialize["primaryProductReviewRating"] = o.PrimaryProductReviewRating
	}
	if !IsNil(o.PriorityListing) {
		toSerialize["priorityListing"] = o.PriorityListing
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.ProductFicheWebUrl) {
		toSerialize["productFicheWebUrl"] = o.ProductFicheWebUrl
	}
	if !IsNil(o.QualifiedPrograms) {
		toSerialize["qualifiedPrograms"] = o.QualifiedPrograms
	}
	if !IsNil(o.QuantityLimitPerBuyer) {
		toSerialize["quantityLimitPerBuyer"] = o.QuantityLimitPerBuyer
	}
	if !IsNil(o.ReservePriceMet) {
		toSerialize["reservePriceMet"] = o.ReservePriceMet
	}
	if !IsNil(o.ReturnTerms) {
		toSerialize["returnTerms"] = o.ReturnTerms
	}
	if !IsNil(o.Seller) {
		toSerialize["seller"] = o.Seller
	}
	if !IsNil(o.SellerItemRevision) {
		toSerialize["sellerItemRevision"] = o.SellerItemRevision
	}
	if !IsNil(o.ShippingOptions) {
		toSerialize["shippingOptions"] = o.ShippingOptions
	}
	if !IsNil(o.ShipToLocations) {
		toSerialize["shipToLocations"] = o.ShipToLocations
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.SizeSystem) {
		toSerialize["sizeSystem"] = o.SizeSystem
	}
	if !IsNil(o.SizeType) {
		toSerialize["sizeType"] = o.SizeType
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.Taxes) {
		toSerialize["taxes"] = o.Taxes
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.TopRatedBuyingExperience) {
		toSerialize["topRatedBuyingExperience"] = o.TopRatedBuyingExperience
	}
	if !IsNil(o.TyreLabelImageUrl) {
		toSerialize["tyreLabelImageUrl"] = o.TyreLabelImageUrl
	}
	if !IsNil(o.UniqueBidderCount) {
		toSerialize["uniqueBidderCount"] = o.UniqueBidderCount
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.UnitPricingMeasure) {
		toSerialize["unitPricingMeasure"] = o.UnitPricingMeasure
	}
	return toSerialize, nil
}

type NullableCoreItem struct {
	value *CoreItem
	isSet bool
}

func (v NullableCoreItem) Get() *CoreItem {
	return v.value
}

func (v *NullableCoreItem) Set(val *CoreItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreItem(val *CoreItem) *NullableCoreItem {
	return &NullableCoreItem{value: val, isSet: true}
}

func (v NullableCoreItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


