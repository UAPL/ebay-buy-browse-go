/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the AspectGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AspectGroup{}

// AspectGroup struct for AspectGroup
type AspectGroup struct {
	// An array of the name/value pairs for the aspects of the product. For example: BRAND/Apple
	Aspects []Aspect `json:"aspects,omitempty"`
	// The name of a group of aspects.<br><br>In the following example, <b>Product Identifiers</b> and <b>Process</b> are product aspect group names. Under the group name are the product aspect name/value pairs.<br><br><b>Product Identifiers</b><br>&nbsp;&nbsp;&nbsp;Brand/Apple<br>&nbsp;&nbsp;&nbsp;Product Family/iMac<br><br><b>Processor</b><br>&nbsp;&nbsp;&nbsp;Processor Type/Intel<br>&nbsp;&nbsp;&nbsp;Processor Speed/3.10
	LocalizedGroupName *string `json:"localizedGroupName,omitempty"`
}

// NewAspectGroup instantiates a new AspectGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAspectGroup() *AspectGroup {
	this := AspectGroup{}
	return &this
}

// NewAspectGroupWithDefaults instantiates a new AspectGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAspectGroupWithDefaults() *AspectGroup {
	this := AspectGroup{}
	return &this
}

// GetAspects returns the Aspects field value if set, zero value otherwise.
func (o *AspectGroup) GetAspects() []Aspect {
	if o == nil || IsNil(o.Aspects) {
		var ret []Aspect
		return ret
	}
	return o.Aspects
}

// GetAspectsOk returns a tuple with the Aspects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AspectGroup) GetAspectsOk() ([]Aspect, bool) {
	if o == nil || IsNil(o.Aspects) {
		return nil, false
	}
	return o.Aspects, true
}

// HasAspects returns a boolean if a field has been set.
func (o *AspectGroup) HasAspects() bool {
	if o != nil && !IsNil(o.Aspects) {
		return true
	}

	return false
}

// SetAspects gets a reference to the given []Aspect and assigns it to the Aspects field.
func (o *AspectGroup) SetAspects(v []Aspect) {
	o.Aspects = v
}

// GetLocalizedGroupName returns the LocalizedGroupName field value if set, zero value otherwise.
func (o *AspectGroup) GetLocalizedGroupName() string {
	if o == nil || IsNil(o.LocalizedGroupName) {
		var ret string
		return ret
	}
	return *o.LocalizedGroupName
}

// GetLocalizedGroupNameOk returns a tuple with the LocalizedGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AspectGroup) GetLocalizedGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizedGroupName) {
		return nil, false
	}
	return o.LocalizedGroupName, true
}

// HasLocalizedGroupName returns a boolean if a field has been set.
func (o *AspectGroup) HasLocalizedGroupName() bool {
	if o != nil && !IsNil(o.LocalizedGroupName) {
		return true
	}

	return false
}

// SetLocalizedGroupName gets a reference to the given string and assigns it to the LocalizedGroupName field.
func (o *AspectGroup) SetLocalizedGroupName(v string) {
	o.LocalizedGroupName = &v
}

func (o AspectGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AspectGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aspects) {
		toSerialize["aspects"] = o.Aspects
	}
	if !IsNil(o.LocalizedGroupName) {
		toSerialize["localizedGroupName"] = o.LocalizedGroupName
	}
	return toSerialize, nil
}

type NullableAspectGroup struct {
	value *AspectGroup
	isSet bool
}

func (v NullableAspectGroup) Get() *AspectGroup {
	return v.value
}

func (v *NullableAspectGroup) Set(val *AspectGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAspectGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAspectGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAspectGroup(val *AspectGroup) *NullableAspectGroup {
	return &NullableAspectGroup{value: val, isSet: true}
}

func (v NullableAspectGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAspectGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


