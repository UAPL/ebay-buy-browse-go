/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// AspectGroup struct for AspectGroup
type AspectGroup struct {
	// An array of the name/value pairs for the aspects of the product. For example: BRAND/Apple
	Aspects *[]Aspect `json:"aspects,omitempty"`
	// The name of a group of aspects. <br /><br />In the following example, <b> Product Identifiers</b> and <b> Process</b> are product aspect group names. Under the group name are the product aspect name/value pairs. <p><b> Product Identifiers</b> <br />&nbsp;&nbsp;&nbsp;Brand/Apple <br />&nbsp;&nbsp;&nbsp;Product Family/iMac</p> <p><b> Processor</b><br />&nbsp;&nbsp;&nbsp;Processor Type/Intel <br />&nbsp;&nbsp;&nbsp;Processor Speed/3.10</p> 
	LocalizedGroupName *string `json:"localizedGroupName,omitempty"`
}

// NewAspectGroup instantiates a new AspectGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAspectGroup() *AspectGroup {
	this := AspectGroup{}
	return &this
}

// NewAspectGroupWithDefaults instantiates a new AspectGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAspectGroupWithDefaults() *AspectGroup {
	this := AspectGroup{}
	return &this
}

// GetAspects returns the Aspects field value if set, zero value otherwise.
func (o *AspectGroup) GetAspects() []Aspect {
	if o == nil || o.Aspects == nil {
		var ret []Aspect
		return ret
	}
	return *o.Aspects
}

// GetAspectsOk returns a tuple with the Aspects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AspectGroup) GetAspectsOk() (*[]Aspect, bool) {
	if o == nil || o.Aspects == nil {
		return nil, false
	}
	return o.Aspects, true
}

// HasAspects returns a boolean if a field has been set.
func (o *AspectGroup) HasAspects() bool {
	if o != nil && o.Aspects != nil {
		return true
	}

	return false
}

// SetAspects gets a reference to the given []Aspect and assigns it to the Aspects field.
func (o *AspectGroup) SetAspects(v []Aspect) {
	o.Aspects = &v
}

// GetLocalizedGroupName returns the LocalizedGroupName field value if set, zero value otherwise.
func (o *AspectGroup) GetLocalizedGroupName() string {
	if o == nil || o.LocalizedGroupName == nil {
		var ret string
		return ret
	}
	return *o.LocalizedGroupName
}

// GetLocalizedGroupNameOk returns a tuple with the LocalizedGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AspectGroup) GetLocalizedGroupNameOk() (*string, bool) {
	if o == nil || o.LocalizedGroupName == nil {
		return nil, false
	}
	return o.LocalizedGroupName, true
}

// HasLocalizedGroupName returns a boolean if a field has been set.
func (o *AspectGroup) HasLocalizedGroupName() bool {
	if o != nil && o.LocalizedGroupName != nil {
		return true
	}

	return false
}

// SetLocalizedGroupName gets a reference to the given string and assigns it to the LocalizedGroupName field.
func (o *AspectGroup) SetLocalizedGroupName(v string) {
	o.LocalizedGroupName = &v
}

func (o AspectGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aspects != nil {
		toSerialize["aspects"] = o.Aspects
	}
	if o.LocalizedGroupName != nil {
		toSerialize["localizedGroupName"] = o.LocalizedGroupName
	}
	return json.Marshal(toSerialize)
}

type NullableAspectGroup struct {
	value *AspectGroup
	isSet bool
}

func (v NullableAspectGroup) Get() *AspectGroup {
	return v.value
}

func (v *NullableAspectGroup) Set(val *AspectGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAspectGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAspectGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAspectGroup(val *AspectGroup) *NullableAspectGroup {
	return &NullableAspectGroup{value: val, isSet: true}
}

func (v NullableAspectGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAspectGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


