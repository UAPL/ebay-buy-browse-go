/*
Browse API

The Browse API has the following resources:<ul><li><b>item_summary:</b><br>Allows shoppers to search for specific items by keyword, GTIN, category, charity, product, image, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values, or UI parameters.</li><li><b>item:</b><br>Allows shoppers to retrieve the details of a specific item or all items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.<br><br>This resource also provides a bridge between the eBay legacy APIs, such as the <a href=\"/api-docs/user-guides/static/finding-user-guide-landing.html\" target=\"_blank\">Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li></ul>The <b>item_summary</b>, <b>search_by_image</b>, and <b>item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\" target=\"_blank\">Application access token</a>.

API version: v1.19.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// checks if the HazardStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HazardStatement{}

// HazardStatement A type that defines the hazard statement for a hazardous material.
type HazardStatement struct {
	// A description of the nature of the hazard, such as whether the material is toxic if swallowed.
	StatementDescription *string `json:"statementDescription,omitempty"`
	// The ID of the hazard statement.
	StatementId *string `json:"statementId,omitempty"`
}

// NewHazardStatement instantiates a new HazardStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHazardStatement() *HazardStatement {
	this := HazardStatement{}
	return &this
}

// NewHazardStatementWithDefaults instantiates a new HazardStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHazardStatementWithDefaults() *HazardStatement {
	this := HazardStatement{}
	return &this
}

// GetStatementDescription returns the StatementDescription field value if set, zero value otherwise.
func (o *HazardStatement) GetStatementDescription() string {
	if o == nil || IsNil(o.StatementDescription) {
		var ret string
		return ret
	}
	return *o.StatementDescription
}

// GetStatementDescriptionOk returns a tuple with the StatementDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardStatement) GetStatementDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.StatementDescription) {
		return nil, false
	}
	return o.StatementDescription, true
}

// HasStatementDescription returns a boolean if a field has been set.
func (o *HazardStatement) HasStatementDescription() bool {
	if o != nil && !IsNil(o.StatementDescription) {
		return true
	}

	return false
}

// SetStatementDescription gets a reference to the given string and assigns it to the StatementDescription field.
func (o *HazardStatement) SetStatementDescription(v string) {
	o.StatementDescription = &v
}

// GetStatementId returns the StatementId field value if set, zero value otherwise.
func (o *HazardStatement) GetStatementId() string {
	if o == nil || IsNil(o.StatementId) {
		var ret string
		return ret
	}
	return *o.StatementId
}

// GetStatementIdOk returns a tuple with the StatementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HazardStatement) GetStatementIdOk() (*string, bool) {
	if o == nil || IsNil(o.StatementId) {
		return nil, false
	}
	return o.StatementId, true
}

// HasStatementId returns a boolean if a field has been set.
func (o *HazardStatement) HasStatementId() bool {
	if o != nil && !IsNil(o.StatementId) {
		return true
	}

	return false
}

// SetStatementId gets a reference to the given string and assigns it to the StatementId field.
func (o *HazardStatement) SetStatementId(v string) {
	o.StatementId = &v
}

func (o HazardStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HazardStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StatementDescription) {
		toSerialize["statementDescription"] = o.StatementDescription
	}
	if !IsNil(o.StatementId) {
		toSerialize["statementId"] = o.StatementId
	}
	return toSerialize, nil
}

type NullableHazardStatement struct {
	value *HazardStatement
	isSet bool
}

func (v NullableHazardStatement) Get() *HazardStatement {
	return v.value
}

func (v *NullableHazardStatement) Set(val *HazardStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableHazardStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableHazardStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHazardStatement(val *HazardStatement) *NullableHazardStatement {
	return &NullableHazardStatement{value: val, isSet: true}
}

func (v NullableHazardStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHazardStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


