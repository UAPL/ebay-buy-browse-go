/*
Browse API

<p>The Browse API has the following resources:</p>   <ul> <li><b> item_summary: </b> Lets shoppers search for specific items by keyword, GTIN, category, charity, product, or item aspects and refine the results by using filters, such as aspects, compatibility, and fields values.</li>  <li><b> search_by_image: </b><a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> Lets shoppers search for specific items by image. You can refine the results by using URI parameters and filters.</li>   <li><b> item: </b> <ul><li>Lets you retrieve the details of a specific item or all the items in an item group, which is an item with variations such as color and size and check if a product is compatible with the specified item, such as if a specific car is compatible with a specific part.</li> <li>Provides a bridge between the eBay legacy APIs, such as <b> Finding</b>, and the RESTful APIs, which use different formats for the item IDs.</li>  </ul> </li>  <li> <b> shopping_cart: </b> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#experimental\" target=\"_blank\"><img src=\"/cms/img/docs/experimental-icon.svg\" class=\"legend-icon experimental-icon\" alt=\"Experimental Release\" title=\"Experimental Release\" />&nbsp;(Experimental)</a> <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> Provides the ability for eBay members to see the contents of their eBay cart, and add, remove, and change the quantity of items in their eBay cart.&nbsp;&nbsp;<b> Note: </b> This resource is not available in the eBay API Explorer.</li></ul>       <p>The <b> item_summary</b>, <b> search_by_image</b>, and <b> item</b> resource calls require an <a href=\"/api-docs/static/oauth-client-credentials-grant.html\">Application access token</a>. The <b> shopping_cart</b> resource calls require a <a href=\"/api-docs/static/oauth-authorization-code-grant.html\">User access token</a>.</p>

API version: v1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buybrowse

import (
	"encoding/json"
)

// RemoteShopcartResponse The type that defines the fields and containers for the member's eBay cart information.
type RemoteShopcartResponse struct {
	// An array of the items in the member's eBay cart.
	CartItems *[]CartItem `json:"cartItems,omitempty"`
	CartSubtotal *Amount `json:"cartSubtotal,omitempty"`
	// The URL of the member's eBay cart.
	CartWebUrl *string `json:"cartWebUrl,omitempty"`
	// An array of items in the cart that are unavailable. This can be for a variety of reasons such as, when the listing has ended or the item is out of stock. Because a cart never expires, these items will remain in the cart until they are removed.
	UnavailableCartItems *[]CartItem `json:"unavailableCartItems,omitempty"`
	// An array of warning messages. These type of errors do not prevent the call from executing but should be checked.
	Warnings *[]Error `json:"warnings,omitempty"`
}

// NewRemoteShopcartResponse instantiates a new RemoteShopcartResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteShopcartResponse() *RemoteShopcartResponse {
	this := RemoteShopcartResponse{}
	return &this
}

// NewRemoteShopcartResponseWithDefaults instantiates a new RemoteShopcartResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteShopcartResponseWithDefaults() *RemoteShopcartResponse {
	this := RemoteShopcartResponse{}
	return &this
}

// GetCartItems returns the CartItems field value if set, zero value otherwise.
func (o *RemoteShopcartResponse) GetCartItems() []CartItem {
	if o == nil || o.CartItems == nil {
		var ret []CartItem
		return ret
	}
	return *o.CartItems
}

// GetCartItemsOk returns a tuple with the CartItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteShopcartResponse) GetCartItemsOk() (*[]CartItem, bool) {
	if o == nil || o.CartItems == nil {
		return nil, false
	}
	return o.CartItems, true
}

// HasCartItems returns a boolean if a field has been set.
func (o *RemoteShopcartResponse) HasCartItems() bool {
	if o != nil && o.CartItems != nil {
		return true
	}

	return false
}

// SetCartItems gets a reference to the given []CartItem and assigns it to the CartItems field.
func (o *RemoteShopcartResponse) SetCartItems(v []CartItem) {
	o.CartItems = &v
}

// GetCartSubtotal returns the CartSubtotal field value if set, zero value otherwise.
func (o *RemoteShopcartResponse) GetCartSubtotal() Amount {
	if o == nil || o.CartSubtotal == nil {
		var ret Amount
		return ret
	}
	return *o.CartSubtotal
}

// GetCartSubtotalOk returns a tuple with the CartSubtotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteShopcartResponse) GetCartSubtotalOk() (*Amount, bool) {
	if o == nil || o.CartSubtotal == nil {
		return nil, false
	}
	return o.CartSubtotal, true
}

// HasCartSubtotal returns a boolean if a field has been set.
func (o *RemoteShopcartResponse) HasCartSubtotal() bool {
	if o != nil && o.CartSubtotal != nil {
		return true
	}

	return false
}

// SetCartSubtotal gets a reference to the given Amount and assigns it to the CartSubtotal field.
func (o *RemoteShopcartResponse) SetCartSubtotal(v Amount) {
	o.CartSubtotal = &v
}

// GetCartWebUrl returns the CartWebUrl field value if set, zero value otherwise.
func (o *RemoteShopcartResponse) GetCartWebUrl() string {
	if o == nil || o.CartWebUrl == nil {
		var ret string
		return ret
	}
	return *o.CartWebUrl
}

// GetCartWebUrlOk returns a tuple with the CartWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteShopcartResponse) GetCartWebUrlOk() (*string, bool) {
	if o == nil || o.CartWebUrl == nil {
		return nil, false
	}
	return o.CartWebUrl, true
}

// HasCartWebUrl returns a boolean if a field has been set.
func (o *RemoteShopcartResponse) HasCartWebUrl() bool {
	if o != nil && o.CartWebUrl != nil {
		return true
	}

	return false
}

// SetCartWebUrl gets a reference to the given string and assigns it to the CartWebUrl field.
func (o *RemoteShopcartResponse) SetCartWebUrl(v string) {
	o.CartWebUrl = &v
}

// GetUnavailableCartItems returns the UnavailableCartItems field value if set, zero value otherwise.
func (o *RemoteShopcartResponse) GetUnavailableCartItems() []CartItem {
	if o == nil || o.UnavailableCartItems == nil {
		var ret []CartItem
		return ret
	}
	return *o.UnavailableCartItems
}

// GetUnavailableCartItemsOk returns a tuple with the UnavailableCartItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteShopcartResponse) GetUnavailableCartItemsOk() (*[]CartItem, bool) {
	if o == nil || o.UnavailableCartItems == nil {
		return nil, false
	}
	return o.UnavailableCartItems, true
}

// HasUnavailableCartItems returns a boolean if a field has been set.
func (o *RemoteShopcartResponse) HasUnavailableCartItems() bool {
	if o != nil && o.UnavailableCartItems != nil {
		return true
	}

	return false
}

// SetUnavailableCartItems gets a reference to the given []CartItem and assigns it to the UnavailableCartItems field.
func (o *RemoteShopcartResponse) SetUnavailableCartItems(v []CartItem) {
	o.UnavailableCartItems = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RemoteShopcartResponse) GetWarnings() []Error {
	if o == nil || o.Warnings == nil {
		var ret []Error
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteShopcartResponse) GetWarningsOk() (*[]Error, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RemoteShopcartResponse) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Error and assigns it to the Warnings field.
func (o *RemoteShopcartResponse) SetWarnings(v []Error) {
	o.Warnings = &v
}

func (o RemoteShopcartResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CartItems != nil {
		toSerialize["cartItems"] = o.CartItems
	}
	if o.CartSubtotal != nil {
		toSerialize["cartSubtotal"] = o.CartSubtotal
	}
	if o.CartWebUrl != nil {
		toSerialize["cartWebUrl"] = o.CartWebUrl
	}
	if o.UnavailableCartItems != nil {
		toSerialize["unavailableCartItems"] = o.UnavailableCartItems
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteShopcartResponse struct {
	value *RemoteShopcartResponse
	isSet bool
}

func (v NullableRemoteShopcartResponse) Get() *RemoteShopcartResponse {
	return v.value
}

func (v *NullableRemoteShopcartResponse) Set(val *RemoteShopcartResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteShopcartResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteShopcartResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteShopcartResponse(val *RemoteShopcartResponse) *NullableRemoteShopcartResponse {
	return &NullableRemoteShopcartResponse{value: val, isSet: true}
}

func (v NullableRemoteShopcartResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteShopcartResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


